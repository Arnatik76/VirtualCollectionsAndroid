# PROJECT CODE COMPILATION
# Generated on 05/20/2025 16:58:28
# Source: C:\Users\Arnat\AndroidStudioProjects\FinalProject


###############################################################################
# FILE: get_project_code.bat
###############################################################################

@echo off
echo Running code collection script...
powershell.exe -ExecutionPolicy Bypass -File "%~dp0CollectCode.ps1"

###############################################################################
# FILE: gradle.properties
###############################################################################

# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

###############################################################################
# FILE: gradlew.bat
###############################################################################

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


###############################################################################
# FILE: local.properties
###############################################################################

## This file is automatically generated by Android Studio.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
#
# This file should *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
sdk.dir=C\:\\Users\\Arnat\\AppData\\Local\\Android\\Sdk

###############################################################################
# FILE: gradle\wrapper\gradle-wrapper.properties
###############################################################################

#Tue May 06 12:25:58 QYZT 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists


###############################################################################
# FILE: app\src\main\AndroidManifest.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.FinalProject"
        android:usesCleartextTraffic="true"
        tools:targetApi="31">
    <activity
        android:name=".MainActivity"
        android:exported="true">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />

            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
    </activity>
</application>

<uses-permission android:name="android.permission.INTERNET" />
    </manifest>

###############################################################################
# FILE: app\src\main\res\drawable\bg_tag_chip.xml
###############################################################################

<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="#1A000000"/>
    <corners android:radius="12dp"/>
    <stroke android:width="1dp" android:color="?attr/colorPrimary"/>
</shape>

###############################################################################
# FILE: app\src\main\res\drawable\ic_launcher_background.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


###############################################################################
# FILE: app\src\main\res\drawable\ic_launcher_foreground.xml
###############################################################################

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

###############################################################################
# FILE: app\src\main\res\layout\activity_main.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <androidx.fragment.app.FragmentContainerView
        android:id="@+id/nav_host_fragment"
        android:name="androidx.navigation.fragment.NavHostFragment"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:defaultNavHost="true"
        app:layout_constraintBottom_toTopOf="@+id/bottom_navigation_view"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:navGraph="@navigation/nav_graph" />

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottom_navigation_view"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:menu="@menu/bottom_nav_menu"
        android:visibility="gone" />

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_add_item.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.collection.AddItemFragment">

    <!-- TODO: Update blank fragment layout -->
    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="@string/hello_blank_fragment" />

</FrameLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_collection_details.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true"
    tools:context=".fragments.collection.CollectionDetailsFragment">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingBottom="16dp">

        <ImageView
            android:id="@+id/collection_detail_cover_image"
            android:layout_width="0dp"
            android:layout_height="250dp"
            android:scaleType="centerCrop"
            android:contentDescription="@string/collection_cover_image_desc"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:srcCompat="@drawable/ic_launcher_background" />

        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/fab_like_collection"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginEnd="16dp"
            android:src="@drawable/ic_like_outline_24"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_cover_image"
            app:layout_constraintBottom_toBottomOf="@id/collection_detail_cover_image"
            app:layout_constraintEnd_toEndOf="parent"
            app:tint="@color/white"
            android:contentDescription="@string/like_button_desc"/>

        <TextView
            android:id="@+id/collection_detail_title"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="16dp"
            android:layout_marginEnd="16dp"
            android:textAppearance="?attr/textAppearanceHeadline5"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_cover_image"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toStartOf="@id/fab_like_collection"
            tools:text="Название очень длинной коллекции" />

        <TextView
            android:id="@+id/collection_detail_author"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceSubtitle1"
            android:textColor="?attr/colorPrimary"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_title"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            app:layout_constraintEnd_toEndOf="@id/collection_detail_title"
            tools:text="Автор: username123" />

        <TextView
            android:id="@+id/collection_detail_description"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:textAppearance="?attr/textAppearanceBody1"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_author"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            app:layout_constraintEnd_toEndOf="@id/collection_detail_title"
            tools:text="Очень длинное и подробное описание коллекции, которое может занимать несколько строк и содержать много интересной информации." />

        <LinearLayout
            android:id="@+id/collection_detail_stats_layout"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="12dp"
            android:gravity="start|center_vertical"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_description"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            app:layout_constraintEnd_toEndOf="@id/collection_detail_title">

            <ImageView
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_like_filled_24"
                app:tint="?attr/colorControlNormal"
                android:layout_marginEnd="4dp"/>
            <TextView
                android:id="@+id/collection_detail_likes_count"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginEnd="16dp"
                tools:text="1.2K" />

            <ImageView
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_views_24"
                app:tint="?attr/colorControlNormal"
                android:layout_marginEnd="4dp"/>
            <TextView
                android:id="@+id/collection_detail_views_count"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginEnd="16dp"
                tools:text="10.5K" />

            <ImageView
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_comment_24"
                app:tint="?attr/colorControlNormal"
                android:layout_marginEnd="4dp"/>
            <TextView
                android:id="@+id/collection_detail_comments_count"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="15" />
        </LinearLayout>

        <View
            android:id="@+id/divider1"
            android:layout_width="0dp"
            android:layout_height="1dp"
            android:background="?android:attr/listDivider"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_stats_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <!-- Элементы коллекции -->
        <TextView
            android:id="@+id/items_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/collection_items_title"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/divider1"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title" />

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/collection_items_recycler_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:nestedScrollingEnabled="false"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            app:layout_constraintTop_toBottomOf="@id/items_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:listitem="@layout/item_collection_item_entry"
            tools:itemCount="3"/>

        <View
            android:id="@+id/divider2"
            android:layout_width="0dp"
            android:layout_height="1dp"
            android:background="?android:attr/listDivider"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/collection_items_recycler_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <!-- Коллабораторы (если есть) -->
        <TextView
            android:id="@+id/collaborators_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/collaborators_title"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:layout_marginTop="16dp"
            android:visibility="gone"
            app:layout_constraintTop_toBottomOf="@id/divider2"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            tools:visibility="visible"/>

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/collaborators_recycler_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:nestedScrollingEnabled="false"
            android:visibility="gone"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            android:orientation="horizontal"
            app:layout_constraintTop_toBottomOf="@id/collaborators_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:listitem="@layout/item_collaborator"
            tools:itemCount="2"
            tools:visibility="visible"/>
        <!-- item_collaborator.xml нужно будет создать (аватар + имя) -->

        <View
            android:id="@+id/divider3"
            android:layout_width="0dp"
            android:layout_height="1dp"
            android:background="?android:attr/listDivider"
            android:layout_marginTop="16dp"
            android:visibility="gone"
            app:layout_constraintTop_toBottomOf="@id/collaborators_recycler_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>


        <!-- Комментарии -->
        <TextView
            android:id="@+id/comments_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/comments_title"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/divider3"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title" />

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/comments_recycler_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:nestedScrollingEnabled="false"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            app:layout_constraintTop_toBottomOf="@id/comments_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:listitem="@layout/item_comment"
            tools:itemCount="2"/>
        <!-- item_comment.xml нужно будет создать (аватар, имя, текст, дата) -->

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/comment_input_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:layout_marginStart="16dp"
            android:layout_marginEnd="16dp"
            app:layout_constraintTop_toBottomOf="@id/comments_recycler_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/add_comment_hint">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/comment_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine"
                android:maxLines="5"/>
        </com.google.android.material.textfield.TextInputLayout>

        <Button
            android:id="@+id/post_comment_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:text="@string/post_comment_button"
            app:layout_constraintTop_toBottomOf="@id/comment_input_layout"
            app:layout_constraintEnd_toEndOf="@id/comment_input_layout" />


        <ProgressBar
            android:id="@+id/collection_detail_progress_bar"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</androidx.core.widget.NestedScrollView>

###############################################################################
# FILE: app\src\main\res\layout\fragment_create_collection.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.collection.EditCollectionFragment">

    <!-- TODO: Update blank fragment layout -->
    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="@string/hello_blank_fragment" />

</FrameLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_edit_media_item.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.mediaitem.EditMediaItemFragment">

    <!-- TODO: Update blank fragment layout -->
    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="@string/hello_blank_fragment" />

</FrameLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_edit_profile.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.user.EditProfileFragment">

    <!-- TODO: Update blank fragment layout -->
    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="@string/hello_blank_fragment" />

</FrameLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_forgot_password.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".fragments.user.ForgotPasswordFragment">

    <TextView
        android:id="@+id/titleTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Восстановление пароля"
        android:textSize="24sp"
        android:textStyle="bold"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="32dp"/>

    <TextView
        android:id="@+id/instructionTextView"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Введите адрес электронной почты, связанный с вашим аккаунтом, и мы отправим вам инструкции по сбросу пароля."
        android:textSize="16sp"
        android:textAlignment="center"
        app:layout_constraintTop_toBottomOf="@id/titleTextView"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="16dp"/>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/emailTextInputLayout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        app:layout_constraintTop_toBottomOf="@id/instructionTextView"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:hint="@string/hint_email">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/emailEditText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="textEmailAddress" />
    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/sendButton"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Отправить"
        app:layout_constraintTop_toBottomOf="@id/emailTextInputLayout"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="24dp"
        android:paddingTop="12dp"
        android:paddingBottom="12dp"/>

    <ProgressBar
        android:id="@+id/progressBar"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_home.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.collection.HomeFragment">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/collections_recycler_view"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:listitem="@layout/item_collection_card"
        android:clipToPadding="false"
        android:paddingBottom="8dp"/>

    <ProgressBar
        android:id="@+id/home_progress_bar"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

    <TextView
        android:id="@+id/empty_view_text"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/no_collections_found"
        android:textSize="18sp"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_login.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".fragments.user.LoginFragment">

    <ImageView
        android:id="@+id/login_logo"
        android:layout_width="120dp"
        android:layout_height="120dp"
        android:layout_marginTop="64dp"
        android:contentDescription="@string/login_logo_description"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:srcCompat="@android:drawable/ic_lock_lock" />

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/email_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/login_logo">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/email_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_email"
            android:inputType="textEmailAddress" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/password_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/email_text_input_layout"
        app:passwordToggleEnabled="true">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/password_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_password"
            android:inputType="textPassword" />
    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/login_button"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:text="@string/login_button_text"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/password_text_input_layout" />

<!--    <TextView-->
<!--        android:id="@+id/forgot_password_text_view"-->
<!--        android:layout_width="wrap_content"-->
<!--        android:layout_height="wrap_content"-->
<!--        android:layout_marginTop="16dp"-->
<!--        android:text="@string/forgot_password_text"-->
<!--        android:textColor="?attr/colorPrimary"-->
<!--        app:layout_constraintEnd_toEndOf="parent"-->
<!--        app:layout_constraintTop_toBottomOf="@+id/login_button" />-->

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        android:layout_marginBottom="32dp">

        <TextView
            android:id="@+id/no_account_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/no_account_text" />

        <TextView
            android:id="@+id/sign_up_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="4dp"
            android:text="@string/sign_up_text"
            android:textColor="?attr/colorPrimary"
            android:textStyle="bold" />
    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_media_item_details.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.mediaitem.MediaItemDetailsFragment">

    <!-- TODO: Update blank fragment layout -->
    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="@string/hello_blank_fragment" />

</FrameLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_my_collections.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.collection.MyCollectionsFragment">

    <!-- TODO: Update blank fragment layout -->
    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="@string/hello_blank_fragment" />

</FrameLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_registration.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".fragments.user.RegistrationFragment">

    <ImageView
        android:id="@+id/register_logo"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_marginTop="32dp"
        android:contentDescription="@string/login_logo_description"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:srcCompat="@android:drawable/ic_menu_edit" />

    <TextView
        android:id="@+id/register_title_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:text="@string/sign_up_text"
        android:textSize="24sp"
        android:textStyle="bold"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/register_logo" />

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/username_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/register_title_text_view">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/username_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_username"
            android:inputType="textPersonName" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/email_text_input_layout_register"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/username_text_input_layout">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/email_edit_text_register"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_email"
            android:inputType="textEmailAddress" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/display_name_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/email_text_input_layout_register">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/display_name_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_display_name"
            android:inputType="textPersonName" />
    </com.google.android.material.textfield.TextInputLayout>


    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/password_text_input_layout_register"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/display_name_text_input_layout"
        app:passwordToggleEnabled="true">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/password_edit_text_register"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_password"
            android:inputType="textPassword" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/confirm_password_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/password_text_input_layout_register"
        app:passwordToggleEnabled="true">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/confirm_password_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_confirm_password"
            android:inputType="textPassword" />
    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/register_button"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:paddingTop="12dp"
        android:paddingBottom="12dp"
        android:text="@string/register_button_text"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/confirm_password_text_input_layout" />

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        android:layout_marginBottom="32dp">

        <TextView
            android:id="@+id/already_account_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/already_have_account" />

        <TextView
            android:id="@+id/login_now_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="4dp"
            android:text="@string/login_now_text"
            android:textColor="?attr/colorPrimary"
            android:textStyle="bold" />
    </LinearLayout>

    <ProgressBar
        android:id="@+id/progressBarRegister"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:visibility="visible" />

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_user_profile.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.user.UserProfileFragment">

    <!-- TODO: Update blank fragment layout -->
    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="@string/hello_blank_fragment" />

</FrameLayout>

###############################################################################
# FILE: app\src\main\res\layout\item_collaborator.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:gravity="center_horizontal"
    android:padding="8dp">

    <ImageView
        android:id="@+id/collaborator_avatar"
        android:layout_width="48dp"
        android:layout_height="48dp"
        tools:srcCompat="@drawable/ic_profile_24"
        android:contentDescription="@string/user_avatar_desc"/>

    <TextView
        android:id="@+id/collaborator_name"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="4dp"
        android:textSize="12sp"
        android:maxLines="1"
        android:ellipsize="end"
        tools:text="Collaborator Name"/>
</LinearLayout>

###############################################################################
# FILE: app\src\main\res\layout\item_collection_card.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="16dp"
    android:layout_marginTop="8dp"
    android:layout_marginEnd="16dp"
    android:layout_marginBottom="8dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <ImageView
            android:id="@+id/collection_cover_image_view"
            android:layout_width="0dp"
            android:layout_height="180dp"
            android:scaleType="centerCrop"
            android:contentDescription="@string/collection_cover_image_desc"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:srcCompat="@drawable/ic_launcher_background" /> <!-- Заглушка -->

        <TextView
            android:id="@+id/collection_title_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="12dp"
            android:layout_marginEnd="16dp"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:maxLines="2"
            android:ellipsize="end"
            app:layout_constraintTop_toBottomOf="@id/collection_cover_image_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Очень длинное название коллекции фильмов" />

        <TextView
            android:id="@+id/collection_author_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceBody2"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintTop_toBottomOf="@id/collection_title_text_view"
            app:layout_constraintStart_toStartOf="@id/collection_title_text_view"
            app:layout_constraintEnd_toEndOf="@id/collection_title_text_view"
            tools:text="Автор: username123" />

        <LinearLayout
            android:id="@+id/stats_layout"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="8dp"
            android:layout_marginBottom="12dp"
            android:gravity="start|center_vertical"
            app:layout_constraintTop_toBottomOf="@id/collection_author_text_view"
            app:layout_constraintStart_toStartOf="@id/collection_title_text_view"
            app:layout_constraintEnd_toEndOf="@id/collection_title_text_view"
            app:layout_constraintBottom_toBottomOf="parent">

            <ImageView
                android:id="@+id/likes_icon"
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_like_filled_24"
                app:tint="?attr/colorControlNormal"
                android:contentDescription="@string/likes_icon_desc" />

            <TextView
                android:id="@+id/collection_likes_count_text_view"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="4dp"
                android:layout_marginEnd="16dp"
                android:textAppearance="?attr/textAppearanceCaption"
                tools:text="1.2K" />

            <ImageView
                android:id="@+id/views_icon"
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_views_24"
                app:tint="?attr/colorControlNormal"
                android:contentDescription="@string/views_icon_desc" />

            <TextView
                android:id="@+id/collection_view_count_text_view"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="4dp"
                android:textAppearance="?attr/textAppearanceCaption"
                tools:text="10.5K" />
        </LinearLayout>

    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>

###############################################################################
# FILE: app\src\main\res\layout\item_collection_item_entry.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:cardElevation="2dp"
    app:cardCornerRadius="4dp"
    android:layout_marginStart="16dp"
    android:layout_marginEnd="16dp"
    android:layout_marginTop="4dp"
    android:layout_marginBottom="4dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="12dp">

        <ImageView
            android:id="@+id/item_thumbnail"
            android:layout_width="80dp"
            android:layout_height="100dp"
            android:scaleType="centerCrop"
            android:contentDescription="@string/media_item_thumbnail_desc"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            tools:srcCompat="@drawable/ic_image_placeholder_24"/>

        <TextView
            android:id="@+id/item_title"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="12dp"
            android:textAppearance="?attr/textAppearanceSubtitle1"
            android:maxLines="2"
            android:ellipsize="end"
            app:layout_constraintTop_toTopOf="@id/item_thumbnail"
            app:layout_constraintStart_toEndOf="@id/item_thumbnail"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Название медиа-элемента, которое может быть длинным"/>

        <TextView
            android:id="@+id/item_creator"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceBody2"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintTop_toBottomOf="@id/item_title"
            app:layout_constraintStart_toStartOf="@id/item_title"
            app:layout_constraintEnd_toEndOf="@id/item_title"
            tools:text="Автор/Режиссер: Имя Фамилия"/>

        <TextView
            android:id="@+id/item_type"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:background="@drawable/bg_tag_chip"
            android:paddingStart="8dp"
            android:paddingEnd="8dp"
            android:paddingTop="2dp"
            android:paddingBottom="2dp"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?attr/colorPrimary"
            app:layout_constraintTop_toBottomOf="@id/item_creator"
            app:layout_constraintStart_toStartOf="@id/item_title"
            tools:text="Фильм"/>

        <TextView
            android:id="@+id/item_notes"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:textAppearance="?attr/textAppearanceCaption"
            android:maxLines="3"
            android:ellipsize="end"
            android:visibility="gone"
            tools:visibility="visible"
            app:layout_constraintTop_toBottomOf="@id/item_type"
            app:layout_constraintStart_toStartOf="@id/item_title"
            app:layout_constraintEnd_toEndOf="@id/item_title"
            app:layout_constraintBottom_toBottomOf="parent"
            tools:text="Заметки пользователя к этому элементу: очень интересная деталь..."/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>

###############################################################################
# FILE: app\src\main\res\layout\item_comment.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingStart="16dp"
    android:paddingEnd="16dp"
    android:paddingTop="8dp"
    android:paddingBottom="8dp">

    <ImageView
        android:id="@+id/comment_author_avatar"
        android:layout_width="36dp"
        android:layout_height="36dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:srcCompat="@drawable/ic_profile_24"
        android:contentDescription="@string/user_avatar_desc"/>

    <TextView
        android:id="@+id/comment_author_name"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="8dp"
        android:textStyle="bold"
        app:layout_constraintStart_toEndOf="@id/comment_author_avatar"
        app:layout_constraintTop_toTopOf="@id/comment_author_avatar"
        app:layout_constraintEnd_toStartOf="@id/comment_date"
        tools:text="User Name"/>

    <TextView
        android:id="@+id/comment_text"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintStart_toStartOf="@id/comment_author_name"
        app:layout_constraintTop_toBottomOf="@id/comment_author_name"
        app:layout_constraintEnd_toEndOf="parent"
        tools:text="This is a sample comment text which can be quite long and wrap to multiple lines."/>

    <TextView
        android:id="@+id/comment_date"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="12sp"
        android:textColor="?android:attr/textColorSecondary"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="@id/comment_author_name"
        app:layout_constraintBottom_toBottomOf="@id/comment_author_name"
        tools:text="2h ago"/>
</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\menu\bottom_nav_menu.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:id="@+id/homeFragment"
        android:icon="@drawable/ic_home_24"
        android:title="@string/bottom_nav_home" />
    <item
        android:id="@+id/myCollectionsFragment"
        android:icon="@drawable/ic_collections_24"
        android:title="@string/bottom_nav_my_collections" />
    <item
        android:id="@+id/userProfileFragment"
        android:icon="@drawable/ic_profile_24"
        android:title="@string/bottom_nav_profile" />
</menu>

###############################################################################
# FILE: app\src\main\res\mipmap-anydpi\ic_launcher.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

###############################################################################
# FILE: app\src\main\res\mipmap-anydpi\ic_launcher_round.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

###############################################################################
# FILE: app\src\main\res\navigation\nav_graph.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/nav_graph"
    app:startDestination="@id/homeFragment">

    <fragment
        android:id="@+id/login"
        android:name="com.example.finalproject.fragments.user.LoginFragment"
        android:label="fragment_login"
        tools:layout="@layout/fragment_login" >
        <action
            android:id="@+id/action_login_to_registration"
            app:destination="@id/registration" />
        <action
            android:id="@+id/action_login_to_homeFragment"
            app:destination="@id/homeFragment"
            app:popUpTo="@id/login"
            app:popUpToInclusive="true" />
        <action
            android:id="@+id/action_login_to_forgetPasswordFragment"
            app:destination="@id/forgetPasswordFragment" />
    </fragment>
    <fragment
        android:id="@+id/registration"
        android:name="com.example.finalproject.fragments.user.RegistrationFragment"
        android:label="fragment_registration"
        tools:layout="@layout/fragment_registration" >
        <action
            android:id="@+id/action_registration_to_login"
            app:destination="@id/login"
            app:popUpTo="@id/login"
            app:popUpToInclusive="true" />
    </fragment>
    <fragment
        android:id="@+id/userProfileFragment"
        android:name="com.example.finalproject.fragments.user.UserProfileFragment"
        android:label="fragment_user_profile"
        tools:layout="@layout/fragment_user_profile" />
    <fragment
        android:id="@+id/editProfile"
        android:name="com.example.finalproject.fragments.user.EditProfileFragment"
        android:label="fragment_edit_profile"
        tools:layout="@layout/fragment_edit_profile" />
    <fragment
        android:id="@+id/homeFragment"
        android:name="com.example.finalproject.fragments.collection.HomeFragment"
        android:label="fragment_home"
        tools:layout="@layout/fragment_home" >
        <action
            android:id="@+id/action_homeFragment_to_collectionDetailsFragment"
            app:destination="@id/collectionDetailsFragment" />
    </fragment>
    <fragment
        android:id="@+id/myCollectionsFragment"
        android:name="com.example.finalproject.fragments.collection.MyCollectionsFragment"
        android:label="fragment_my_collections"
        tools:layout="@layout/fragment_my_collections" />
    <fragment
        android:id="@+id/collectionDetailsFragment"
        android:name="com.example.finalproject.fragments.collection.CollectionDetailsFragment"
        android:label="fragment_collection_details"
        tools:layout="@layout/fragment_collection_details" >
    <argument
        android:name="collectionId"
        app:argType="integer" />
    <action
        android:id="@+id/action_collectionDetailsFragment_to_userProfileFragment"
        app:destination="@id/userProfileFragment" />
    <action
        android:id="@+id/action_collectionDetailsFragment_to_mediaItemDetailsFragment"
        app:destination="@id/mediaItemDetailsFragment" />
    </fragment>
    <fragment
        android:id="@+id/createCollectionFragment"
        android:name="com.example.finalproject.fragments.collection.EditCollectionFragment"
        android:label="fragment_create_collection"
        tools:layout="@layout/fragment_create_collection" />
    <fragment
        android:id="@+id/addItemFragment"
        android:name="com.example.finalproject.fragments.collection.AddItemFragment"
        android:label="fragment_add_item"
        tools:layout="@layout/fragment_add_item" />
    <fragment
        android:id="@+id/mediaItemDetailsFragment"
        android:name="com.example.finalproject.fragments.mediaitem.MediaItemDetailsFragment"
        android:label="fragment_media_item_details"
        tools:layout="@layout/fragment_media_item_details" />
    <fragment
        android:id="@+id/editMediaItemFragment"
        android:name="com.example.finalproject.fragments.mediaitem.EditMediaItemFragment"
        android:label="fragment_edit_media_item"
        tools:layout="@layout/fragment_edit_media_item" />
    <fragment
        android:id="@+id/forgetPasswordFragment"
        android:name="com.example.finalproject.fragments.user.ForgotPasswordFragment"
        android:label="fragment_forget_password"
        tools:layout="@layout/fragment_forgot_password" >
        <action
            android:id="@+id/action_forgetPasswordFragment_to_loginFragment"
            app:destination="@id/login"
            app:popUpTo="@id/login"
            app:popUpToInclusive="true" />
    </fragment>
</navigation>

###############################################################################
# FILE: app\src\main\res\values\colors.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="color_liked">#FF0000</color>
</resources>

###############################################################################
# FILE: app\src\main\res\values\strings.xml
###############################################################################

<resources>
    <string name="app_name">FinalProject</string>
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="login_logo_description">Логотип приложения</string>
    <string name="hint_email">Электронная почта</string>
    <string name="hint_password">Пароль</string>
    <string name="login_button_text">Войти</string>
    <string name="forgot_password_text">Забыли пароль?</string>
    <string name="no_account_text">Нет аккаунта?</string>
    <string name="sign_up_text">Зарегистрироваться</string>
    <string name="error_invalid_email">Неверный формат электронной почты</string>
    <string name="error_empty_password">Пароль не может быть пустым</string>
    <string name="action_loginFragment_to_registerFragment">action_loginFragment_to_registerFragment</string>

    <string name="register_button_text">Зарегистрироваться</string>
    <string name="hint_username">Имя пользователя</string>
    <string name="hint_display_name">Отображаемое имя (необязательно)</string>
    <string name="hint_confirm_password">Подтвердите пароль</string>
    <string name="error_empty_username">Имя пользователя не может быть пустым</string>
    <string name="error_password_too_short">Пароль должен содержать не менее 6 символов</string>
    <string name="error_passwords_do_not_match">Пароли не совпадают</string>
    <string name="registration_successful">Регистрация прошла успешно! Пожалуйста, войдите.</string>
    <string name="registration_failed">Ошибка регистрации</string>
    <string name="already_have_account">Уже есть аккаунт?</string>
    <string name="login_now_text">Войти</string>

    <string name="bottom_nav_home">Главная</string>
    <string name="bottom_nav_my_collections">Мои коллекции</string>
    <string name="bottom_nav_profile">Профиль</string>

    <string name="collection_cover_image_desc">Обложка коллекции</string>
    <string name="likes_icon_desc">Иконка лайков</string>
    <string name="views_icon_desc">Иконка просмотров</string>
    <string name="author_prefix">Автор: %1$s</string>
    <string name="unknown_author">Неизвестный автор</string>

    <string name="no_collections_found">Коллекций пока нет.</string>
    <string name="error_loading_collections">Ошибка загрузки коллекций</string>
    <string name="network_error">Сетевая ошибка</string>

    <string name="like_button_desc">Кнопка Лайк</string>
    <string name="collection_items_title">Элементы коллекции</string>
    <string name="collaborators_title">Соавторы</string>
    <string name="comments_title">Комментарии</string>
    <string name="add_comment_hint">Добавить комментарий...</string>
    <string name="post_comment_button">Опубликовать</string>
    <string name="error_loading_collection_details">Ошибка загрузки деталей коллекции</string>
    <string name="comment_posted_successfully">Комментарий опубликован</string>
    <string name="error_posting_comment">Ошибка публикации комментария</string>

    <string name="media_item_thumbnail_desc">Миниатюра элемента</string>
    <string name="user_avatar_desc">user_avatar\n</string>
</resources>

###############################################################################
# FILE: app\src\main\res\values\themes.xml
###############################################################################

<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.FinalProject" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your light theme here. -->
        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
    </style>

    <style name="Theme.FinalProject" parent="Base.Theme.FinalProject" />
</resources>

###############################################################################
# FILE: app\src\main\res\values-night\themes.xml
###############################################################################

<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.FinalProject" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your dark theme here. -->
        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
    </style>
</resources>

###############################################################################
# FILE: app\src\main\res\xml\backup_rules.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

###############################################################################
# FILE: app\src\main\res\xml\data_extraction_rules.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\MainActivity.kt
###############################################################################

package com.example.finalproject

import android.os.Bundle
import android.view.View
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.navigation.NavController
import androidx.navigation.fragment.NavHostFragment
import androidx.navigation.ui.setupWithNavController
import com.example.finalproject.databinding.ActivityMainBinding
import com.example.finalproject.utils.AuthTokenProvider

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var navController: NavController

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        AuthTokenProvider.initialize(applicationContext)
        binding = ActivityMainBinding.inflate(layoutInflater)

        enableEdgeToEdge()
        setContentView(binding.root)
        ViewCompat.setOnApplyWindowInsetsListener(binding.main) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment
        navController = navHostFragment.navController
        val navGraph = navController.navInflater.inflate(R.navigation.nav_graph)

        if (AuthTokenProvider.isAuthenticated()) {
            navGraph.setStartDestination(R.id.homeFragment)
        } else {
            navGraph.setStartDestination(R.id.login)
        }
        navController.graph = navGraph

        binding.bottomNavigationView.setupWithNavController(navController)

        navController.addOnDestinationChangedListener { _, destination, _ ->
            when (destination.id) {
                R.id.login, R.id.registration, R.id.forgetPasswordFragment -> {
                    binding.bottomNavigationView.visibility = View.GONE
                }
                else -> {
                    binding.bottomNavigationView.visibility = View.VISIBLE
                }
            }
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        return navController.navigateUp() || super.onSupportNavigateUp()
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CollaboratorAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCollaboratorBinding
import com.example.finalproject.models.User // Предполагаем, что collaborators это List<User>

class CollaboratorAdapter(private val onCollaboratorClicked: (User) -> Unit) :
    ListAdapter<User, CollaboratorAdapter.CollaboratorViewHolder>(UserDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CollaboratorViewHolder {
        val binding = ItemCollaboratorBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return CollaboratorViewHolder(binding, onCollaboratorClicked)
    }

    override fun onBindViewHolder(holder: CollaboratorViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class CollaboratorViewHolder(
        private val binding: ItemCollaboratorBinding,
        private val onCollaboratorClicked: (User) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {
        fun bind(user: User) {
            binding.collaboratorName.text = user.displayName ?: user.username
            Glide.with(itemView.context)
                .load(user.avatarUrl)
                .placeholder(R.drawable.ic_profile_24)
                .error(R.drawable.ic_profile_24)
                .circleCrop()
                .into(binding.collaboratorAvatar)
            itemView.setOnClickListener { onCollaboratorClicked(user) }
        }
    }

    // Можно использовать общий UserDiffCallback, если он уже есть
    class UserDiffCallback : DiffUtil.ItemCallback<User>() {
        override fun areItemsTheSame(oldItem: User, newItem: User): Boolean {
            return oldItem.userId == newItem.userId
        }
        override fun areContentsTheSame(oldItem: User, newItem: User): Boolean {
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CollectionAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCollectionCardBinding
import com.example.finalproject.models.Collection

class CollectionAdapter(private val onItemClicked: (Collection) -> Unit) :
    ListAdapter<Collection, CollectionAdapter.CollectionViewHolder>(CollectionDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CollectionViewHolder {
        val binding = ItemCollectionCardBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return CollectionViewHolder(binding, onItemClicked)
    }

    override fun onBindViewHolder(holder: CollectionViewHolder, position: Int) {
        val collection = getItem(position)
        holder.bind(collection)
    }

    class CollectionViewHolder(
        private val binding: ItemCollectionCardBinding,
        private val onItemClicked: (Collection) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(collection: Collection) {
            binding.collectionTitleTextView.text = collection.title

            val authorName = collection.owner?.displayName ?: collection.owner?.username ?: itemView.context.getString(R.string.unknown_author)
            binding.collectionAuthorTextView.text = itemView.context.getString(R.string.author_prefix, authorName)

            binding.collectionLikesCountTextView.text = formatCount(collection.likeCount ?: 0)
            binding.collectionViewCountTextView.text = formatCount(collection.viewCount ?: 0) // viewCount у тебя не nullable

            Glide.with(itemView.context)
                .load(collection.coverImageUrl) // Убедись, что URL полный и рабочий
                .placeholder(R.drawable.ic_launcher_background) // Стандартная заглушка
                .error(R.drawable.ic_image_placeholder_24) // Заглушка при ошибке (создай ее)
                .into(binding.collectionCoverImageView)

            itemView.setOnClickListener {
                onItemClicked(collection)
            }
        }

        // Простая функция для форматирования чисел (1200 -> 1.2K)
        private fun formatCount(count: Int): String {
            return when {
                count >= 1_000_000 -> String.format("%.1fM", count / 1_000_000.0)
                count >= 1_000 -> String.format("%.1fK", count / 1_000.0)
                else -> count.toString()
            }
        }
    }

    class CollectionDiffCallback : DiffUtil.ItemCallback<Collection>() {
        override fun areItemsTheSame(oldItem: Collection, newItem: Collection): Boolean {
            return oldItem.collectionId == newItem.collectionId
        }

        override fun areContentsTheSame(oldItem: Collection, newItem: Collection): Boolean {
            // Сравнивай по нужным полям, если объект Collection может меняться без смены ID
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CollectionItemAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCollectionItemEntryBinding
import com.example.finalproject.models.CollectionItemEntry

class CollectionItemAdapter(private val onItemClicked: (CollectionItemEntry) -> Unit) :
    ListAdapter<CollectionItemEntry, CollectionItemAdapter.ItemViewHolder>(ItemDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemViewHolder {
        val binding = ItemCollectionItemEntryBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return ItemViewHolder(binding, onItemClicked)
    }

    override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class ItemViewHolder(
        private val binding: ItemCollectionItemEntryBinding,
        private val onItemClicked: (CollectionItemEntry) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(entry: CollectionItemEntry) {
            val mediaItem = entry.mediaItem
            binding.itemTitle.text = mediaItem.title
            binding.itemCreator.text = mediaItem.creator ?: itemView.context.getString(R.string.unknown_author) // или другой текст

            mediaItem.contentType?.typeName?.let {
                binding.itemType.text = it
                binding.itemType.visibility = View.VISIBLE
            } ?: run {
                binding.itemType.visibility = View.GONE
            }

            entry.notes?.let {
                binding.itemNotes.text = it
                binding.itemNotes.visibility = View.VISIBLE
            } ?: run {
                binding.itemNotes.visibility = View.GONE
            }

            Glide.with(itemView.context)
                .load(mediaItem.thumbnailUrl)
                .placeholder(R.drawable.ic_image_placeholder_24)
                .error(R.drawable.ic_image_placeholder_24)
                .into(binding.itemThumbnail)

            itemView.setOnClickListener {
                onItemClicked(entry)
            }
        }
    }

    class ItemDiffCallback : DiffUtil.ItemCallback<CollectionItemEntry>() {
        override fun areItemsTheSame(oldItem: CollectionItemEntry, newItem: CollectionItemEntry): Boolean {
            // Предполагаем, что у CollectionItemEntry есть уникальный ID, если нет, используй itemId из mediaItem
            return oldItem.itemId == newItem.itemId && oldItem.collectionId == newItem.collectionId
        }

        override fun areContentsTheSame(oldItem: CollectionItemEntry, newItem: CollectionItemEntry): Boolean {
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CommentAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCommentBinding
import com.example.finalproject.models.CollectionComment
// import java.text.SimpleDateFormat // Для форматирования даты
// import java.util.Locale

class CommentAdapter(private val onAuthorClicked: (Int?) -> Unit) :
    ListAdapter<CollectionComment, CommentAdapter.CommentViewHolder>(CommentDiffCallback()) {

    // private val dateFormat = SimpleDateFormat("dd MMM yyyy, HH:mm", Locale.getDefault()) // Пример

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CommentViewHolder {
        val binding = ItemCommentBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return CommentViewHolder(binding, onAuthorClicked)
    }

    override fun onBindViewHolder(holder: CommentViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class CommentViewHolder(
        private val binding: ItemCommentBinding,
        private val onAuthorClicked: (Int?) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {
        fun bind(comment: CollectionComment) {
            binding.commentText.text = comment.commentText
            binding.commentAuthorName.text = comment.user?.displayName ?: comment.user?.username ?: itemView.context.getString(R.string.unknown_author)
            // binding.commentDate.text = comment.createdAt // TODO: Format date properly
            // Простая заглушка для даты
            binding.commentDate.text = " " // Замените на реальное форматирование даты

            Glide.with(itemView.context)
                .load(comment.user?.avatarUrl)
                .placeholder(R.drawable.ic_profile_24) // Заглушка
                .error(R.drawable.ic_profile_24)
                .circleCrop()
                .into(binding.commentAuthorAvatar)

            binding.commentAuthorAvatar.setOnClickListener { onAuthorClicked(comment.userId) }
            binding.commentAuthorName.setOnClickListener { onAuthorClicked(comment.userId) }
        }
    }

    class CommentDiffCallback : DiffUtil.ItemCallback<CollectionComment>() {
        override fun areItemsTheSame(oldItem: CollectionComment, newItem: CollectionComment): Boolean {
            return oldItem.commentId == newItem.commentId
        }
        override fun areContentsTheSame(oldItem: CollectionComment, newItem: CollectionComment): Boolean {
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\api\ApiService.kt
###############################################################################

package com.example.finalproject.api

import com.example.finalproject.models.Collection
import com.example.finalproject.models.request.LoginRequest
import com.example.finalproject.models.responce.AuthResponse
import com.example.finalproject.models.CollectionComment
import com.example.finalproject.models.CollectionItemEntry
import com.example.finalproject.models.request.ForgotPasswordRequest
import com.example.finalproject.models.responce.PagedResponse
import com.example.finalproject.models.request.RegistrationRequest
import com.example.finalproject.models.CollectionCollaborator
import com.example.finalproject.models.request.CreateCommentRequest
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.http.Body
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Path
import retrofit2.http.Query

interface ApiService {
    @POST("collections")
    fun createCollection(
        @Body collection: Collection
    ): Call<Collection>

    @GET("vc-collections/collections/{id}")
    fun getCollectionById(@Path("id") collectionId: Int): Call<Collection>

    @GET("vc-collections/collections/public-feed")
    fun getPublicCollections(
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 10,
        @Query("sort") sort: String = "viewCount,desc"
    ): Call<PagedResponse<Collection>>

    @GET("collections/{collectionId}/items")
    fun getCollectionItems(
        @Path("collectionId") collectionId: Int,
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 20
    ): Call<PagedResponse<CollectionItemEntry>>

    @GET("collections/{collectionId}/comments")
    fun getCollectionComments(
        @Path("collectionId") collectionId: Int,
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 10
    ): Call<PagedResponse<CollectionComment>>

    @GET("collections/{collectionId}/collaborators")
    fun getCollectionCollaborators(@Path("collectionId") collectionId: Int): Call<List<CollectionCollaborator>>

    @POST("collections/{collectionId}/like")
    fun likeCollection(@Path("collectionId") collectionId: Int): Call<ResponseBody>

    @DELETE("collections/{collectionId}/like")
    fun unlikeCollection(@Path("collectionId") collectionId: Int): Call<ResponseBody>

    @POST("collections/{collectionId}/comments")
    fun addCollectionComment(
        @Path("collectionId") collectionId: Int,
        @Body commentRequest: CreateCommentRequest
    ): Call<CollectionComment>

    @POST("vc-users/auth/login")
    fun loginUser(@Body loginRequest: LoginRequest): Call<AuthResponse>

    @POST("auth/forgot-password")
    fun forgotPassword(@Body forgotPasswordRequest: ForgotPasswordRequest): Call<ResponseBody>

    @POST("auth/register")
    fun registerUser(@Body registrationRequest: RegistrationRequest): Call<AuthResponse>


}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\api\AuthInterceptor.kt
###############################################################################

package com.example.finalproject.api

import com.example.finalproject.utils.AuthTokenProvider
import okhttp3.Interceptor
import okhttp3.Response

class AuthInterceptor : Interceptor {
    override fun intercept(chain: Interceptor.Chain): Response {
        val originalRequest = chain.request()
        val token = AuthTokenProvider.getToken()

        val requestBuilder = originalRequest.newBuilder()
            .header("Accept", "application/json")
            .method(originalRequest.method, originalRequest.body)

        if (token != null) {
            requestBuilder.header("Authorization", "Bearer $token")
        }

        val request = requestBuilder.build()
        return chain.proceed(request)
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\api\RetrofitClient.kt
###############################################################################

package com.example.finalproject.api

import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object RetrofitClient {
    private const val BASE_URL = "http://10.0.2.2:8765/"

    private val okHttpClient = OkHttpClient.Builder()
        .addInterceptor(AuthInterceptor())
         .addInterceptor(HttpLoggingInterceptor().apply {
             level = HttpLoggingInterceptor.Level.BODY
         })
        .build()

    val instance: ApiService by lazy {
        val retrofit = Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
        retrofit.create(ApiService::class.java)
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\AchievementType.kt
###############################################################################

package com.example.finalproject.models

data class AchievementType(
    val achievementId: Int,
    val name: String,
    val description: String?,
    val iconUrl: String?,
    val requirement: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\Collection.kt
###############################################################################

package com.example.finalproject.models

data class Collection(
    val collectionId: Int,
    val title: String,
    val description: String?,
    val coverImageUrl: String?,
    val userId: Int,
    val createdAt: String?,
    val updatedAt: String?,
    val isPublic: Boolean,
    val viewCount: Int?,
    val owner: User? = null,
    val items: List<CollectionItemEntry>? = null,
    val collaborators: List<User>? = null,
    val likeCount: Int? = null,
    val commentCount: Int? = null
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionCollaborator.kt
###############################################################################

package com.example.finalproject.models

data class CollectionCollaborator(
    val collectionId: Int,
    val userId: Int,
    val role: String,
    val joinedAt: String, // Или использовать тип Date/Timestamp
    val user: User? = null // Если API будет возвращать детали соавтора
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionComment.kt
###############################################################################

package com.example.finalproject.models

data class CollectionComment(
    val commentId: Int,
    val collectionId: Int,
    val userId: Int?,
    val commentText: String,
    val createdAt: String, // Или использовать тип Date/Timestamp
    val user: User? = null // Детали пользователя, оставившего комментарий
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionItemEntry.kt
###############################################################################

package com.example.finalproject.models

data class CollectionItemEntry( // Переименовал, чтобы не путать с MediaItem
    val collectionId: Int,
    val itemId: Int,
    val addedByUserId: Int?,
    val addedAt: String, // Или использовать тип Date/Timestamp
    val position: Int?,
    val notes: String?,
    val mediaItem: MediaItem, // Вложенный объект самого медиа-элемента
    val addedByUser: User? = null // Пользователь, добавивший элемент
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionLike.kt
###############################################################################

package com.example.finalproject.models

data class CollectionLike(
    val userId: Int,
    val collectionId: Int,
    val likedAt: String, // Или использовать тип Date/Timestamp
    val user: User? = null // Детали пользователя, который поставил лайк
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\ContentType.kt
###############################################################################

package com.example.finalproject.models

data class ContentType(
    val typeId: Int,
    val typeName: String,
    val typeIcon: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\MediaItem.kt
###############################################################################

package com.example.finalproject.models

data class MediaItem(
    val itemId: Int,
    val typeId: Int,
    val title: String,
    val creator: String?,
    val description: String?,
    val thumbnailUrl: String?,
    val externalUrl: String?,
    val releaseDate: String?,
    val addedAt: String,
    val contentType: ContentType? = null,
    val tags: List<Tag>? = null
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\PageableDetails.kt
###############################################################################

package com.example.finalproject.models

import com.example.finalproject.models.responce.SortProperty
import com.google.gson.annotations.SerializedName

data class PageableDetails(
    @SerializedName("pageNumber")
    val pageNumber: Int,

    @SerializedName("pageSize")
    val pageSize: Int,

    @SerializedName("sort") // Информация о сортировке, примененной к этому pageable запросу
    val sortDetails: List<SortProperty>,

    @SerializedName("offset")
    val offset: Long,

    @SerializedName("paged")
    val paged: Boolean,

    @SerializedName("unpaged")
    val unpaged: Boolean
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\Tag.kt
###############################################################################

package com.example.finalproject.models

data class Tag(
    val tagId: Int,
    val tagName: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\User.kt
###############################################################################

package com.example.finalproject.models

data class User(
    val userId: Int?,
    val username: String,
    val email: String,
    val displayName: String?,
    val bio: String?,
    val avatarUrl: String?,
    val createdAt: String,
    val lastLogin: String?,
    val isActive: Boolean?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\UserAchievement.kt
###############################################################################

package com.example.finalproject.models

data class UserAchievement(
    val userId: Int,
    val achievementId: Int,
    val achievedAt: String, // Или использовать тип Date/Timestamp
    val achievementDetails: AchievementType? = null // Детали самого достижения
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\UserFollow.kt
###############################################################################

package com.example.finalproject.models

data class UserFollow(
    val followerId: Int,
    val followedId: Int,
    val followedAt: String, // Или использовать тип Date/Timestamp
    val followerDetails: User? = null, // Детали подписчика
    val followedDetails: User? = null  // Детали того, на кого подписаны
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\utils\AuthTokenProvider.kt
###############################################################################

package com.example.finalproject.utils

import android.content.Context
import android.content.SharedPreferences
import com.example.finalproject.models.User
import com.google.gson.Gson
import com.google.gson.JsonSyntaxException

object AuthTokenProvider {

    private const val PREFS_NAME = "auth_prefs"
    private const val KEY_AUTH_TOKEN = "auth_token"
    private const val KEY_CURRENT_USER = "current_user"

    private lateinit var sharedPreferences: SharedPreferences
    private val gson = Gson()

    fun initialize(context: Context) {
        sharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    }

    fun saveToken(token: String?) {
        sharedPreferences.edit().putString(KEY_AUTH_TOKEN, token).apply()
    }

    fun getToken(): String? {
        return sharedPreferences.getString(KEY_AUTH_TOKEN, null)
    }

    fun saveUser(user: User?) {
        val userJson = if (user != null) gson.toJson(user) else null
        sharedPreferences.edit().putString(KEY_CURRENT_USER, userJson).apply()
    }

    fun getCurrentUser(): User? {
        val userJson = sharedPreferences.getString(KEY_CURRENT_USER, null)
        return if (userJson != null) {
            try {
                gson.fromJson(userJson, User::class.java)
            } catch (e: JsonSyntaxException) {
                clearAuthData()
                null
            }
        } else {
            null
        }
    }

    fun clearAuthData() {
        sharedPreferences.edit()
            .remove(KEY_AUTH_TOKEN)
            .remove(KEY_CURRENT_USER)
            .apply()
    }

    fun isAuthenticated(): Boolean {
        return getToken() != null && getCurrentUser() != null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\AddItemFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import com.example.finalproject.R

// TODO: Rename parameter arguments, choose names that match
// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
private const val ARG_PARAM1 = "param1"
private const val ARG_PARAM2 = "param2"

/**
 * A simple [androidx.fragment.app.Fragment] subclass.
 * Use the [AddItemFragment.newInstance] factory method to
 * create an instance of this fragment.
 */
class AddItemFragment : Fragment() {
    // TODO: Rename and change types of parameters
    private var param1: String? = null
    private var param2: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            param1 = it.getString(ARG_PARAM1)
            param2 = it.getString(ARG_PARAM2)
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_add_item, container, false)
    }

    companion object {
        /**
         * Use this factory method to create a new instance of
         * this fragment using the provided parameters.
         *
         * @param param1 Parameter 1.
         * @param param2 Parameter 2.
         * @return A new instance of fragment AddItemFragment.
         */
        // TODO: Rename and change types and number of parameters
        @JvmStatic
        fun newInstance(param1: String, param2: String) =
            AddItemFragment().apply {
                arguments = Bundle().apply {
                    putString(ARG_PARAM1, param1)
                    putString(ARG_PARAM2, param2)
                }
            }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\CollectionDetailsFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.content.ContextCompat
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import androidx.recyclerview.widget.LinearLayoutManager
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.adapters.CollectionItemAdapter
import com.example.finalproject.adapters.CommentAdapter
import com.example.finalproject.adapters.CollaboratorAdapter
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentCollectionDetailsBinding
import com.example.finalproject.models.Collection
import com.example.finalproject.models.CollectionComment
import com.example.finalproject.models.CollectionItemEntry
import com.example.finalproject.models.request.CreateCommentRequest
import com.example.finalproject.models.responce.PagedResponse
import com.example.finalproject.models.User
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class CollectionDetailsFragment : Fragment() {

    private var _binding: FragmentCollectionDetailsBinding? = null
    private val binding get() = _binding!!

    private val args: CollectionDetailsFragmentArgs by navArgs() // Для получения collectionId

    private lateinit var itemsAdapter: CollectionItemAdapter
    private lateinit var commentsAdapter: CommentAdapter
    private lateinit var collaboratorAdapter: CollaboratorAdapter

    private var currentCollection: Collection? = null
    private var isLikedByCurrentUser: Boolean = false // TODO: Получать эту информацию с сервера или определять локально

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentCollectionDetailsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupAdapters()
        fetchCollectionDetails(args.collectionId)

        binding.fabLikeCollection.setOnClickListener {
            handleLikeClicked()
        }
        binding.postCommentButton.setOnClickListener {
            postComment()
        }
    }

    private fun setupAdapters() {
        itemsAdapter = CollectionItemAdapter { itemEntry ->
            // TODO: Navigate to MediaItemDetailsFragment
            Toast.makeText(context, "Открыть элемент: ${itemEntry.mediaItem.title}", Toast.LENGTH_SHORT).show()
            // val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToMediaItemDetailsFragment(itemEntry.mediaItem.itemId)
            // findNavController().navigate(action)
        }
        binding.collectionItemsRecyclerView.apply {
            adapter = itemsAdapter
            layoutManager = LinearLayoutManager(context)
            isNestedScrollingEnabled = false
        }

        commentsAdapter = CommentAdapter { userId ->
            userId?.let {
                // TODO: Navigate to UserProfileFragment
                Toast.makeText(context, "Открыть профиль автора комментария ID: $it", Toast.LENGTH_SHORT).show()
                // val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToUserProfileFragment(it)
                // findNavController().navigate(action)
            }
        }
        binding.commentsRecyclerView.apply {
            adapter = commentsAdapter
            layoutManager = LinearLayoutManager(context)
            isNestedScrollingEnabled = false
        }

        collaboratorAdapter = CollaboratorAdapter { user ->
            // TODO: Navigate to UserProfileFragment
            Toast.makeText(context, "Открыть профиль соавтора: ${user.username}", Toast.LENGTH_SHORT).show()
            // val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToUserProfileFragment(user.userId ?: -1) // Проверка на null
            // findNavController().navigate(action)
        }
        binding.collaboratorsRecyclerView.apply {
            adapter = collaboratorAdapter
            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
            isNestedScrollingEnabled = false
        }
    }

    private fun fetchCollectionDetails(collectionId: Int) {
        setLoading(true)
        RetrofitClient.instance.getCollectionById(collectionId)
            .enqueue(object : Callback<Collection> {
                override fun onResponse(call: Call<Collection>, response: Response<Collection>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { collection ->
                            currentCollection = collection
                            displayCollectionDetails(collection)
                            // TODO: Определить isLikedByCurrentUser (например, если API возвращает флаг или список лайкнувших)
                            updateLikeButtonState()
                            fetchAdditionalData(collection) // Загрузка комментов/элементов если они не пришли сразу
                        } ?: handleApiError(getString(R.string.error_loading_collection_details) + " (пустой ответ)")
                    } else {
                        handleApiError("Ошибка ${response.code()}: ${response.message()}")
                    }
                }

                override fun onFailure(call: Call<Collection>, t: Throwable) {
                    setLoading(false)
                    handleApiError(getString(R.string.network_error) + ": ${t.localizedMessage}")
                    Log.e("CollectionDetails", "API Failure", t)
                }
            })
    }

    private fun fetchAdditionalData(collection: Collection) {
        // Если элементы не пришли с коллекцией, загружаем их отдельно
        if (collection.items.isNullOrEmpty()) {
            fetchItems(collection.collectionId)
        } else {
            itemsAdapter.submitList(collection.items)
        }

        // Аналогично для комментариев, если они не приходят с основной коллекцией.
        // Здесь для примера загрузим комментарии отдельно
        fetchComments(collection.collectionId)


        // Коллабораторы
        if (!collection.collaborators.isNullOrEmpty()) {
            binding.collaboratorsTitle.isVisible = true
            binding.collaboratorsRecyclerView.isVisible = true
            binding.divider3.isVisible = true
            collaboratorAdapter.submitList(collection.collaborators)
        } else {
            binding.collaboratorsTitle.isVisible = false
            binding.collaboratorsRecyclerView.isVisible = false
            binding.divider3.isVisible = false
        }
    }


    private fun fetchItems(collectionId: Int) {
        // Показываем какой-то ProgressBar для элементов, если нужно
        RetrofitClient.instance.getCollectionItems(collectionId) // Предполагаем, что PagedResponse
            .enqueue(object : Callback<PagedResponse<CollectionItemEntry>> {
                override fun onResponse(call: Call<PagedResponse<CollectionItemEntry>>, response: Response<PagedResponse<CollectionItemEntry>>) {
                    if (response.isSuccessful) {
                        response.body()?.content?.let { itemsAdapter.submitList(it) }
                    } else {
                        Log.e("CollectionDetails", "Error fetching items: ${response.code()}")
                    }
                }
                override fun onFailure(call: Call<PagedResponse<CollectionItemEntry>>, t: Throwable) {
                    Log.e("CollectionDetails", "Failure fetching items", t)
                }
            })
    }

    private fun fetchComments(collectionId: Int) {
        // Показываем ProgressBar для комментов
        RetrofitClient.instance.getCollectionComments(collectionId)
            .enqueue(object : Callback<PagedResponse<CollectionComment>> {
                override fun onResponse(call: Call<PagedResponse<CollectionComment>>, response: Response<PagedResponse<CollectionComment>>) {
                    if (response.isSuccessful) {
                        response.body()?.content?.let { commentsAdapter.submitList(it) }
                    } else {
                        Log.e("CollectionDetails", "Error fetching comments: ${response.code()}")
                    }
                }
                override fun onFailure(call: Call<PagedResponse<CollectionComment>>, t: Throwable) {
                    Log.e("CollectionDetails", "Failure fetching comments", t)
                }
            })
    }


    private fun displayCollectionDetails(collection: Collection) {
        binding.collectionDetailTitle.text = collection.title
        val authorName = collection.owner?.displayName ?: collection.owner?.username ?: getString(R.string.unknown_author)
        binding.collectionDetailAuthor.text = getString(R.string.author_prefix, authorName)
        binding.collectionDetailAuthor.setOnClickListener {
            collection.owner?.userId?.let { userId ->
                // TODO: Navigate to UserProfileFragment
                Toast.makeText(context, "Открыть профиль автора ID: $userId", Toast.LENGTH_SHORT).show()
                // val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToUserProfileFragment(userId)
                // findNavController().navigate(action)
            }
        }

        binding.collectionDetailDescription.text = collection.description
        binding.collectionDetailDescription.isVisible = !collection.description.isNullOrEmpty()

        binding.collectionDetailLikesCount.text = formatCount(collection.likeCount ?: 0)
        binding.collectionDetailViewsCount.text = formatCount(collection.viewCount ?: 0)
        binding.collectionDetailCommentsCount.text = (collection.commentCount ?: 0).toString() // Или formatCount

        Glide.with(this)
            .load(collection.coverImageUrl)
            .placeholder(R.drawable.ic_launcher_background)
            .error(R.drawable.ic_image_placeholder_24)
            .into(binding.collectionDetailCoverImage)

        // Элементы, если они пришли сразу с коллекцией
        collection.items?.let { itemsAdapter.submitList(it) }

        // Комментарии, если они пришли сразу с коллекцией (маловероятно для большого числа)
        // collection.comments?.let { commentsAdapter.submitList(it) }
    }

    private fun handleLikeClicked() {
        val collectionId = currentCollection?.collectionId ?: return
        setLikeButtonLoading(true)

        val call = if (isLikedByCurrentUser) {
            RetrofitClient.instance.unlikeCollection(collectionId)
        } else {
            RetrofitClient.instance.likeCollection(collectionId)
        }

        call.enqueue(object : Callback<ResponseBody> { // Или Call<Collection> если сервер возвращает обновленную коллекцию
            override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                setLikeButtonLoading(false)
                if (response.isSuccessful) {
                    isLikedByCurrentUser = !isLikedByCurrentUser
                    updateLikeButtonState()
                    // Обновить счетчик лайков (либо из ответа, либо инкремент/декремент локально)
                    val currentLikes = currentCollection?.likeCount ?: 0
                    val newLikes = if (isLikedByCurrentUser) currentLikes + 1 else maxOf(0, currentLikes - 1)
                    binding.collectionDetailLikesCount.text = formatCount(newLikes)
                    currentCollection = currentCollection?.copy(likeCount = newLikes)
                } else {
                    Toast.makeText(context, "Ошибка при ${if(isLikedByCurrentUser) "снятии" else "установке"} лайка", Toast.LENGTH_SHORT).show()
                }
            }
            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                setLikeButtonLoading(false)
                Toast.makeText(context, "Сетевая ошибка при лайке", Toast.LENGTH_SHORT).show()
            }
        })
    }

    private fun postComment() {
        val commentText = binding.commentEditText.text.toString().trim()
        if (commentText.isEmpty()) {
            binding.commentInputLayout.error = "Комментарий не может быть пустым"
            return
        }
        binding.commentInputLayout.error = null
        val collectionId = currentCollection?.collectionId ?: return

        setCommentButtonLoading(true)
        val request = CreateCommentRequest(commentText)
        RetrofitClient.instance.addCollectionComment(collectionId, request)
            .enqueue(object : Callback<CollectionComment>{
                override fun onResponse(call: Call<CollectionComment>, response: Response<CollectionComment>) {
                    setCommentButtonLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { newComment ->
                            // Добавить новый комментарий в начало списка и обновить адаптер
                            val currentComments = commentsAdapter.currentList.toMutableList()
                            currentComments.add(0, newComment)
                            commentsAdapter.submitList(currentComments)
                            binding.commentsRecyclerView.scrollToPosition(0)
                            binding.commentEditText.text = null // Очистить поле ввода
                            Toast.makeText(context, getString(R.string.comment_posted_successfully), Toast.LENGTH_SHORT).show()
                            // Обновить счетчик комментариев
                            val currentCommentCount = currentCollection?.commentCount ?: 0
                            binding.collectionDetailCommentsCount.text = (currentCommentCount + 1).toString()
                            currentCollection = currentCollection?.copy(commentCount = currentCommentCount + 1)
                        }
                    } else {
                        Toast.makeText(context, getString(R.string.error_posting_comment) + ": ${response.code()}", Toast.LENGTH_SHORT).show()
                    }
                }
                override fun onFailure(call: Call<CollectionComment>, t: Throwable) {
                    setCommentButtonLoading(false)
                    Toast.makeText(context, getString(R.string.network_error), Toast.LENGTH_SHORT).show()
                }
            })
    }


    private fun updateLikeButtonState() {
        if (isLikedByCurrentUser) {
            binding.fabLikeCollection.setImageResource(R.drawable.ic_like_filled_24) // Заполненная иконка
            binding.fabLikeCollection.imageTintList = ContextCompat.getColorStateList(requireContext(), R.color.color_liked) // Красный цвет для лайка
        } else {
            binding.fabLikeCollection.setImageResource(R.drawable.ic_like_outline_24) // Контурная иконка
            binding.fabLikeCollection.imageTintList = ContextCompat.getColorStateList(requireContext(), R.color.white) // Или ваш цвет по умолчанию
        }
    }
    private fun setLikeButtonLoading(isLoading: Boolean) {
        binding.fabLikeCollection.isEnabled = !isLoading
        // Можно добавить ProgressBar рядом с FAB
    }
    private fun setCommentButtonLoading(isLoading: Boolean) {
        binding.postCommentButton.isEnabled = !isLoading
        binding.commentEditText.isEnabled = !isLoading
    }


    private fun setLoading(isLoading: Boolean) {
        binding.collectionDetailProgressBar.isVisible = isLoading
        // Скрываем основной контент при загрузке
        // binding.contentGroup.isVisible = !isLoading // Создать группу в ConstraintLayout для основного контента
    }

    private fun handleApiError(errorMessage: String) {
        Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
        // Можно показать сообщение об ошибке на весь экран
    }

    private fun formatCount(count: Int): String { // Дублируется из CollectionAdapter, можно вынести в Utils
        return when {
            count >= 1_000_000 -> String.format("%.1fM", count / 1_000_000.0)
            count >= 1_000 -> String.format("%.1fK", count / 1_000.0)
            else -> count.toString()
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        binding.collectionItemsRecyclerView.adapter = null
        binding.commentsRecyclerView.adapter = null
        binding.collaboratorsRecyclerView.adapter = null
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\EditCollectionFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import com.example.finalproject.R

// TODO: Rename parameter arguments, choose names that match
// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
private const val ARG_PARAM1 = "param1"
private const val ARG_PARAM2 = "param2"

/**
 * A simple [androidx.fragment.app.Fragment] subclass.
 * Use the [EditCollectionFragment.newInstance] factory method to
 * create an instance of this fragment.
 */
class EditCollectionFragment : Fragment() {
    // TODO: Rename and change types of parameters
    private var param1: String? = null
    private var param2: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            param1 = it.getString(ARG_PARAM1)
            param2 = it.getString(ARG_PARAM2)
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_create_collection, container, false)
    }

    companion object {
        /**
         * Use this factory method to create a new instance of
         * this fragment using the provided parameters.
         *
         * @param param1 Parameter 1.
         * @param param2 Parameter 2.
         * @return A new instance of fragment CreateCollectionFragment.
         */
        // TODO: Rename and change types and number of parameters
        @JvmStatic
        fun newInstance(param1: String, param2: String) =
            EditCollectionFragment().apply {
                arguments = Bundle().apply {
                    putString(ARG_PARAM1, param1)
                    putString(ARG_PARAM2, param2)
                }
            }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\HomeFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.finalproject.R
import com.example.finalproject.adapters.CollectionAdapter
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentHomeBinding
import com.example.finalproject.models.Collection
import com.example.finalproject.models.responce.PagedResponse
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class HomeFragment : Fragment() {

    private var _binding: FragmentHomeBinding? = null
    private val binding get() = _binding!!

    private lateinit var collectionAdapter: CollectionAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentHomeBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setupRecyclerView()
        fetchPublicCollections()
    }

    private fun setupRecyclerView() {
        collectionAdapter = CollectionAdapter { collection ->
            // Обработка клика на коллекцию -> переход на CollectionDetailsFragment
            // Для этого нужно будет создать action в nav_graph.xml
            // и передать, например, collection.collectionId
            Toast.makeText(context, "Переход к коллекции: ${collection.title}", Toast.LENGTH_SHORT).show()
            Log.d("HomeFragment", "Clicked collection ID: ${collection.collectionId}")
            // Пример навигации (раскомментировать и настроить action в nav_graph.xml):
            // val action = HomeFragmentDirections.actionHomeFragmentToCollectionDetailsFragment(collection.collectionId)
            // findNavController().navigate(action)
        }
        binding.collectionsRecyclerView.apply {
            adapter = collectionAdapter
            layoutManager = LinearLayoutManager(context)
        }
    }

    private fun fetchPublicCollections() {
        setLoading(true)
        binding.emptyViewText.isVisible = false

        RetrofitClient.instance.getPublicCollections(size = 10)
            .enqueue(object : Callback<PagedResponse<Collection>> {
                override fun onResponse(call: Call<PagedResponse<Collection>>, response: Response<PagedResponse<Collection>>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        val pagedResponse = response.body()
                        if (pagedResponse != null) {
                            val collections = pagedResponse.content
                            if (collections.isNotEmpty()) {
                                collectionAdapter.submitList(collections)
                                binding.collectionsRecyclerView.isVisible = true
                                Log.d("HomeFragment", "Loaded page ${pagedResponse.number + 1} of ${pagedResponse.totalPages}")
                            } else {
                                binding.collectionsRecyclerView.isVisible = false
                                binding.emptyViewText.text = getString(R.string.no_collections_found)
                                binding.emptyViewText.isVisible = true
                            }
                        } else {
                            handleApiError(getString(R.string.error_loading_collections) + " (пустой ответ)")
                        }
                    } else {
                        handleApiError("Ошибка ${response.code()}: ${response.message()}")
                    }
                }

                override fun onFailure(call: Call<PagedResponse<Collection>>, t: Throwable) {
                    setLoading(false)
                    handleApiError(getString(R.string.network_error) + ": ${t.localizedMessage}")
                    Log.e("HomeFragment", "API Failure", t)
                }
            })
    }

    private fun handleApiError(errorMessage: String) {
        Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
        binding.collectionsRecyclerView.isVisible = false
        binding.emptyViewText.text = errorMessage
        binding.emptyViewText.isVisible = true
    }


    private fun setLoading(isLoading: Boolean) {
        binding.homeProgressBar.isVisible = isLoading
        // Можно задизейблить RecyclerView или SwipeRefreshLayout если он есть
        binding.collectionsRecyclerView.isVisible = !isLoading && binding.collectionsRecyclerView.adapter?.itemCount ?: 0 > 0
    }

    override fun onDestroyView() {
        super.onDestroyView()
        // Важно очищать ссылку на binding в onDestroyView для фрагментов
        // чтобы избежать утечек памяти
        binding.collectionsRecyclerView.adapter = null // Очистка адаптера
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\MyCollectionsFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import com.example.finalproject.R

// TODO: Rename parameter arguments, choose names that match
// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
private const val ARG_PARAM1 = "param1"
private const val ARG_PARAM2 = "param2"

/**
 * A simple [androidx.fragment.app.Fragment] subclass.
 * Use the [MyCollectionsFragment.newInstance] factory method to
 * create an instance of this fragment.
 */
class MyCollectionsFragment : Fragment() {
    // TODO: Rename and change types of parameters
    private var param1: String? = null
    private var param2: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            param1 = it.getString(ARG_PARAM1)
            param2 = it.getString(ARG_PARAM2)
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_my_collections, container, false)
    }

    companion object {
        /**
         * Use this factory method to create a new instance of
         * this fragment using the provided parameters.
         *
         * @param param1 Parameter 1.
         * @param param2 Parameter 2.
         * @return A new instance of fragment MyCollectionsFragment.
         */
        // TODO: Rename and change types and number of parameters
        @JvmStatic
        fun newInstance(param1: String, param2: String) =
            MyCollectionsFragment().apply {
                arguments = Bundle().apply {
                    putString(ARG_PARAM1, param1)
                    putString(ARG_PARAM2, param2)
                }
            }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\mediaitem\EditMediaItemFragment.kt
###############################################################################

package com.example.finalproject.fragments.mediaitem

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import com.example.finalproject.R

// TODO: Rename parameter arguments, choose names that match
// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
private const val ARG_PARAM1 = "param1"
private const val ARG_PARAM2 = "param2"

/**
 * A simple [androidx.fragment.app.Fragment] subclass.
 * Use the [EditMediaItemFragment.newInstance] factory method to
 * create an instance of this fragment.
 */
class EditMediaItemFragment : Fragment() {
    // TODO: Rename and change types of parameters
    private var param1: String? = null
    private var param2: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            param1 = it.getString(ARG_PARAM1)
            param2 = it.getString(ARG_PARAM2)
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_edit_media_item, container, false)
    }

    companion object {
        /**
         * Use this factory method to create a new instance of
         * this fragment using the provided parameters.
         *
         * @param param1 Parameter 1.
         * @param param2 Parameter 2.
         * @return A new instance of fragment EditMediaItemFragment.
         */
        // TODO: Rename and change types and number of parameters
        @JvmStatic
        fun newInstance(param1: String, param2: String) =
            EditMediaItemFragment().apply {
                arguments = Bundle().apply {
                    putString(ARG_PARAM1, param1)
                    putString(ARG_PARAM2, param2)
                }
            }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\mediaitem\MediaItemDetailsFragment.kt
###############################################################################

package com.example.finalproject.fragments.mediaitem

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import com.example.finalproject.R

// TODO: Rename parameter arguments, choose names that match
// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
private const val ARG_PARAM1 = "param1"
private const val ARG_PARAM2 = "param2"

/**
 * A simple [androidx.fragment.app.Fragment] subclass.
 * Use the [MediaItemDetailsFragment.newInstance] factory method to
 * create an instance of this fragment.
 */
class MediaItemDetailsFragment : Fragment() {
    // TODO: Rename and change types of parameters
    private var param1: String? = null
    private var param2: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            param1 = it.getString(ARG_PARAM1)
            param2 = it.getString(ARG_PARAM2)
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_media_item_details, container, false)
    }

    companion object {
        /**
         * Use this factory method to create a new instance of
         * this fragment using the provided parameters.
         *
         * @param param1 Parameter 1.
         * @param param2 Parameter 2.
         * @return A new instance of fragment MediaItemDetailsFragment.
         */
        // TODO: Rename and change types and number of parameters
        @JvmStatic
        fun newInstance(param1: String, param2: String) =
            MediaItemDetailsFragment().apply {
                arguments = Bundle().apply {
                    putString(ARG_PARAM1, param1)
                    putString(ARG_PARAM2, param2)
                }
            }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\EditProfileFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import com.example.finalproject.R

// TODO: Rename parameter arguments, choose names that match
// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
private const val ARG_PARAM1 = "param1"
private const val ARG_PARAM2 = "param2"

/**
 * A simple [androidx.fragment.app.Fragment] subclass.
 * Use the [EditProfileFragment.newInstance] factory method to
 * create an instance of this fragment.
 */
class EditProfileFragment : Fragment() {
    // TODO: Rename and change types of parameters
    private var param1: String? = null
    private var param2: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            param1 = it.getString(ARG_PARAM1)
            param2 = it.getString(ARG_PARAM2)
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_edit_profile, container, false)
    }

    companion object {
        /**
         * Use this factory method to create a new instance of
         * this fragment using the provided parameters.
         *
         * @param param1 Parameter 1.
         * @param param2 Parameter 2.
         * @return A new instance of fragment EditProfile.
         */
        // TODO: Rename and change types and number of parameters
        @JvmStatic
        fun newInstance(param1: String, param2: String) =
            EditProfileFragment().apply {
                arguments = Bundle().apply {
                    putString(ARG_PARAM1, param1)
                    putString(ARG_PARAM2, param2)
                }
            }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\ForgotPasswordFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.util.Patterns
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentForgotPasswordBinding
import com.example.finalproject.models.request.ForgotPasswordRequest
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class ForgotPasswordFragment : Fragment() {

    private var _binding: FragmentForgotPasswordBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentForgotPasswordBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.sendButton.setOnClickListener {
            handleForgotPasswordRequest()
        }
    }

    private fun handleForgotPasswordRequest() {
        val email = binding.emailEditText.text.toString().trim()

        if (!isValidEmail(email)) {
            binding.emailTextInputLayout.error = getString(R.string.error_invalid_email)
            return
        } else {
            binding.emailTextInputLayout.error = null
        }

        setLoading(true)

        val forgotPasswordRequest = ForgotPasswordRequest(email)
        RetrofitClient.instance.forgotPassword(forgotPasswordRequest)
            .enqueue(object : Callback<ResponseBody> {
                override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        // Успешный ответ от сервера
                        Toast.makeText(context, "Инструкции по сбросу пароля отправлены на вашу почту.", Toast.LENGTH_LONG).show()
                        // Можно добавить навигацию обратно на экран входа или показать сообщение
                        findNavController().popBackStack() // Вернуться на предыдущий экран (LoginFragment)
                    } else {
                        // Ошибка сервера
                        val errorBody = response.errorBody()?.string() ?: "Неизвестная ошибка сервера"
                        Toast.makeText(context, "Ошибка: ${response.code()} - $errorBody", Toast.LENGTH_LONG).show()
                        Log.e("ForgetPassword", "API Error: ${response.code()} - $errorBody")
                    }
                }

                override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Ошибка сети: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("ForgetPassword", "Network failure", t)
                }
            })
    }

    private fun isValidEmail(email: String): Boolean {
        return Patterns.EMAIL_ADDRESS.matcher(email).matches()
    }

    private fun setLoading(isLoading: Boolean) {
        binding.progressBar.isVisible = isLoading
        binding.sendButton.isEnabled = !isLoading
        binding.emailEditText.isEnabled = !isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\LoginFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.util.Patterns
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentLoginBinding
import com.example.finalproject.models.responce.AuthResponse
import com.example.finalproject.models.request.LoginRequest
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class LoginFragment : Fragment() {

    private var _binding: FragmentLoginBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentLoginBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.loginButton.setOnClickListener {
            handleLogin()
        }

        binding.signUpTextView.setOnClickListener {
            findNavController().navigate(R.id.action_login_to_registration)
        }
    }

    private fun handleLogin() {
        val email = binding.emailEditText.text.toString().trim()
        val password = binding.passwordEditText.text.toString().trim()

        if (!isValidEmail(email)) {
            binding.emailTextInputLayout.error = getString(R.string.error_invalid_email)
            return
        } else {
            binding.emailTextInputLayout.error = null
        }

        if (password.isEmpty()) {
            binding.passwordTextInputLayout.error = getString(R.string.error_empty_password)
            return
        } else {
            binding.passwordTextInputLayout.error = null
        }

        binding.loginButton.isEnabled = false

        val loginRequest = LoginRequest(email, password)
        RetrofitClient.instance.loginUser(loginRequest)
            .enqueue(object : Callback<AuthResponse> {
                override fun onResponse(call: Call<AuthResponse>, response: Response<AuthResponse>) {
                    binding.loginButton.isEnabled = true

                    if (response.isSuccessful) {
                        val authResponse = response.body()
                        if (authResponse != null) {
                            AuthTokenProvider.saveToken(authResponse.token)
                            AuthTokenProvider.saveUser(authResponse.user)

                            Toast.makeText(context, "Вход успешен! Добро пожаловать, ${authResponse.user.displayName ?: authResponse.user.username}", Toast.LENGTH_LONG).show()

                            try {
                                findNavController().navigate(R.id.action_login_to_homeFragment)
                            } catch (e: IllegalArgumentException) {
                                Toast.makeText(context, "Ошибка навигации: ${e.localizedMessage}", Toast.LENGTH_LONG).show()
                                Log.e("LoginFragment", "Navigation error", e)
                            }
                        } else {
                            Toast.makeText(context, "Ошибка входа: Пустой ответ от сервера", Toast.LENGTH_LONG).show()
                        }
                    } else {
                        val errorBody = response.errorBody()?.string() ?: "Неизвестная ошибка сервера"
                        Toast.makeText(context, "Ошибка входа: ${response.code()} - $errorBody", Toast.LENGTH_LONG).show()
                        Log.e("LoginFragment", "Login failed: ${response.code()} - $errorBody")
                    }
                }

                override fun onFailure(call: Call<AuthResponse>, t: Throwable) {
                    binding.loginButton.isEnabled = true
                    Toast.makeText(context, "Ошибка сети: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("LoginFragment", "Network error", t)
                }
            })
    }

    private fun isValidEmail(email: String): Boolean {
        return Patterns.EMAIL_ADDRESS.matcher(email).matches()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\RegistrationFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.util.Patterns
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentRegistrationBinding
import com.example.finalproject.models.responce.AuthResponse
import com.example.finalproject.models.request.RegistrationRequest
// import com.example.finalproject.utils.AuthTokenProvider // Не нужен здесь, т.к. после регистрации обычно перенаправляем на логин
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class RegistrationFragment : Fragment() {

    private var _binding: FragmentRegistrationBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentRegistrationBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.registerButton.setOnClickListener {
            handleRegistration()
        }

        binding.loginNowTextView.setOnClickListener {
            // Переход на экран логина, если пользователь уже имеет аккаунт
            findNavController().navigate(R.id.action_registration_to_login)
        }
    }

    private fun handleRegistration() {
        val username = binding.usernameEditText.text.toString().trim()
        val email = binding.emailEditTextRegister.text.toString().trim()
        val displayName = binding.displayNameEditText.text.toString().trim().let { if (it.isEmpty()) null else it }
        val password = binding.passwordEditTextRegister.text.toString() // Не trim, чтобы не обрезать пробелы в пароле
        val confirmPassword = binding.confirmPasswordEditText.text.toString()

        var isValid = true

        // Валидация имени пользователя
        if (username.isEmpty()) {
            binding.usernameTextInputLayout.error = getString(R.string.error_empty_username)
            isValid = false
        } else {
            binding.usernameTextInputLayout.error = null
        }

        // Валидация email
        if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
            binding.emailTextInputLayoutRegister.error = getString(R.string.error_invalid_email)
            isValid = false
        } else {
            binding.emailTextInputLayoutRegister.error = null
        }

        // Валидация пароля
        if (password.isEmpty()) {
            binding.passwordTextInputLayoutRegister.error = getString(R.string.error_empty_password)
            isValid = false
        } else if (password.length < 6) {
            binding.passwordTextInputLayoutRegister.error = getString(R.string.error_password_too_short)
            isValid = false
        } else {
            binding.passwordTextInputLayoutRegister.error = null
        }

        // Валидация подтверждения пароля
        if (confirmPassword.isEmpty()) {
            binding.confirmPasswordTextInputLayout.error = getString(R.string.error_empty_password)
            isValid = false
        } else if (password != confirmPassword) {
            binding.confirmPasswordTextInputLayout.error = getString(R.string.error_passwords_do_not_match)
            isValid = false
        } else {
            binding.confirmPasswordTextInputLayout.error = null
        }

        if (!isValid) return

        setLoading(true)

        val registrationRequest = RegistrationRequest(username, email, password, displayName)

        RetrofitClient.instance.registerUser(registrationRequest)
            .enqueue(object : Callback<AuthResponse> {
                override fun onResponse(call: Call<AuthResponse>, response: Response<AuthResponse>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        // ВАЖНО: Сервер возвращает AuthResponse, но мы не сохраняем токен здесь.
                        // Вместо этого перенаправляем пользователя на экран входа.
                        // Либо, если API спроектировано так, что регистрация сразу логинит,
                        // то нужно сохранить токен и пользователя, как в LoginFragment.
                        // Сейчас предполагаем, что после регистрации нужно залогиниться отдельно.
                        val authResponse = response.body()
                        Log.d("RegistrationFragment", "Registration successful: ${authResponse?.user?.username}")
                        Toast.makeText(context, getString(R.string.registration_successful), Toast.LENGTH_LONG).show()

                        // Переход на экран логина
                        findNavController().navigate(R.id.action_registration_to_login)

                    } else {
                        val errorBody = response.errorBody()?.string() ?: "Неизвестная ошибка сервера"
                        Toast.makeText(context, "${getString(R.string.registration_failed)}: ${response.code()} - $errorBody", Toast.LENGTH_LONG).show()
                        Log.e("RegistrationFragment", "Registration failed: ${response.code()} - $errorBody")
                    }
                }

                override fun onFailure(call: Call<AuthResponse>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Ошибка сети: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("RegistrationFragment", "Network error", t)
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.progressBarRegister.isVisible = isLoading
        binding.registerButton.isEnabled = !isLoading
        binding.usernameEditText.isEnabled = !isLoading
        binding.emailEditTextRegister.isEnabled = !isLoading
        binding.displayNameEditText.isEnabled = !isLoading
        binding.passwordEditTextRegister.isEnabled = !isLoading
        binding.confirmPasswordEditText.isEnabled = !isLoading
    }


    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\UserProfileFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import com.example.finalproject.R

// TODO: Rename parameter arguments, choose names that match
// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
private const val ARG_PARAM1 = "param1"
private const val ARG_PARAM2 = "param2"

/**
 * A simple [androidx.fragment.app.Fragment] subclass.
 * Use the [UserProfileFragment.newInstance] factory method to
 * create an instance of this fragment.
 */
class UserProfileFragment : Fragment() {
    // TODO: Rename and change types of parameters
    private var param1: String? = null
    private var param2: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            param1 = it.getString(ARG_PARAM1)
            param2 = it.getString(ARG_PARAM2)
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_user_profile, container, false)
    }

    companion object {
        /**
         * Use this factory method to create a new instance of
         * this fragment using the provided parameters.
         *
         * @param param1 Parameter 1.
         * @param param2 Parameter 2.
         * @return A new instance of fragment UserProfile.
         */
        // TODO: Rename and change types and number of parameters
        @JvmStatic
        fun newInstance(param1: String, param2: String) =
            UserProfileFragment().apply {
                arguments = Bundle().apply {
                    putString(ARG_PARAM1, param1)
                    putString(ARG_PARAM2, param2)
                }
            }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\CreateCollectionRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class CreateCollectionRequest(
    val title: String,
    val description: String?,
    val coverImageUrl: String?,
    val isPublic: Boolean
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\CreateCommentRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class CreateCommentRequest(
    val commentText: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\ForgotPasswordRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class ForgotPasswordRequest(
    val email: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\LoginRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class LoginRequest(
    val email: String,
    val password: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\RegistrationRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class RegistrationRequest(
    val username: String,
    val email: String,
    val password: String,
    val displayName: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\AuthResponse.kt
###############################################################################

package com.example.finalproject.models.responce

import com.example.finalproject.models.User

data class AuthResponse(
    val token: String,
    val user: User
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\PageableDetails.kt
###############################################################################

package com.example.finalproject.models.responce

import com.google.gson.annotations.SerializedName

data class PageableDetails(
    val pageNumber: Int,
    val pageSize: Int,
    @SerializedName("sort")
    val sortDetails: List<SortProperty>,
    val offset: Long,
    val paged: Boolean,
    val unpaged: Boolean
)


###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\PagedResponse.kt
###############################################################################

package com.example.finalproject.models.responce

import com.google.gson.annotations.SerializedName

data class PagedResponse<T>(
    @SerializedName("content")
    val content: List<T>,

    @SerializedName("pageable")
    val pageable: PageableDetails,

    @SerializedName("last")
    val last: Boolean,

    @SerializedName("totalPages")
    val totalPages: Int,

    @SerializedName("totalElements")
    val totalElements: Int,

    @SerializedName("size")
    val size: Int,

    @SerializedName("number")
    val number: Int,

    @SerializedName("sort")
    val sort: List<SortProperty>,

    @SerializedName("first")
    val first: Boolean,

    @SerializedName("numberOfElements")
    val numberOfElements: Int,

    @SerializedName("empty")
    val empty: Boolean
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\SortProperty.kt
###############################################################################

package com.example.finalproject.models.responce

data class SortProperty(
    val direction: String?,
    val property: String?,
    val ignoreCase: Boolean?,
    val nullHandling: String?,
    val ascending: Boolean?,
    val descending: Boolean?
)


###############################################################################
# SUMMARY
# Total files: 79
# Total size: 151.51 KB
# Processing time: 0.95 seconds
###############################################################################
