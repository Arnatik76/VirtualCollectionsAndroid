# PROJECT CODE COMPILATION
# Generated on 05/21/2025 19:40:10
# Source: C:\Users\Arnat\AndroidStudioProjects\FinalProject


###############################################################################
# FILE: android.txt
###############################################################################

# PROJECT CODE COMPILATION
# Generated on 05/21/2025 00:24:36
# Source: C:\Users\Arnat\AndroidStudioProjects\FinalProject


###############################################################################
# FILE: get_project_code.bat
###############################################################################

@echo off
echo Running code collection script...
powershell.exe -ExecutionPolicy Bypass -File "%~dp0CollectCode.ps1"

###############################################################################
# FILE: gradle.properties
###############################################################################

# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

###############################################################################
# FILE: gradlew.bat
###############################################################################

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


###############################################################################
# FILE: local.properties
###############################################################################

## This file is automatically generated by Android Studio.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
#
# This file should *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
sdk.dir=C\:\\Users\\Arnat\\AppData\\Local\\Android\\Sdk

###############################################################################
# FILE: gradle\wrapper\gradle-wrapper.properties
###############################################################################

#Tue May 06 12:25:58 QYZT 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists


###############################################################################
# FILE: app\src\main\AndroidManifest.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.FinalProject"
        android:usesCleartextTraffic="true"
        tools:targetApi="31">
    <activity
        android:name=".MainActivity"
        android:exported="true">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />

            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
    </activity>
</application>

<uses-permission android:name="android.permission.INTERNET" />
    </manifest>

###############################################################################
# FILE: app\src\main\res\drawable\bg_tag_chip.xml
###############################################################################

<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="#1A000000"/>
    <corners android:radius="12dp"/>
    <stroke android:width="1dp" android:color="?attr/colorPrimary"/>
</shape>

###############################################################################
# FILE: app\src\main\res\drawable\ic_add_24.xml
###############################################################################

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
    
</vector>


###############################################################################
# FILE: app\src\main\res\drawable\ic_edit_24.xml
###############################################################################

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M3,17.25V21h3.75L17.81,9.94l-3.75,-3.75L3,17.25zM20.71,7.04c0.39,-0.39 0.39,-1.02 0,-1.41l-2.34,-2.34c-0.39,-0.39 -1.02,-0.39 -1.41,0l-1.83,1.83 3.75,3.75 1.83,-1.83z"/>
    
</vector>


###############################################################################
# FILE: app\src\main\res\drawable\ic_image_placeholder_24.xml
###############################################################################

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M21,19V5c0,-1.1 -0.9,-2 -2,-2H5c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2zM8.5,13.5l2.5,3.01L14.5,12l4.5,6H5l3.5,-4.5z"/>
    
</vector>


###############################################################################
# FILE: app\src\main\res\drawable\ic_launcher_background.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


###############################################################################
# FILE: app\src\main\res\drawable\ic_launcher_foreground.xml
###############################################################################

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

###############################################################################
# FILE: app\src\main\res\drawable\ic_logout_24.xml
###############################################################################

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M17,7l-1.41,1.41L18.17,11H8v2h10.17l-2.58,2.58L17,17l5,-5zM4,5h8V3H4c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h8v-2H4V5z"/>
    
</vector>


###############################################################################
# FILE: app\src\main\res\layout\activity_main.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <androidx.fragment.app.FragmentContainerView
        android:id="@+id/nav_host_fragment"
        android:name="androidx.navigation.fragment.NavHostFragment"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:defaultNavHost="true"
        app:layout_constraintBottom_toTopOf="@+id/bottom_navigation_view"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:navGraph="@navigation/nav_graph" />

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottom_navigation_view"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:menu="@menu/bottom_nav_menu"
        android:visibility="gone" />

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_add_item.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        tools:context=".fragments.collection.AddItemFragment">

        <TextView
            android:id="@+id/add_item_header_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Создать и добавить элемент"
            android:textAppearance="?attr/textAppearanceHeadline5"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:layout_marginTop="16dp"/>

        <ImageView
            android:id="@+id/new_media_item_thumbnail_preview"
            android:layout_width="100dp"
            android:layout_height="150dp"
            android:layout_marginTop="16dp"
            tools:srcCompat="@drawable/ic_image_placeholder_24"
            android:scaleType="centerCrop"
            android:contentDescription="@string/media_item_thumbnail_desc"
            app:layout_constraintTop_toBottomOf="@id/add_item_header_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/title_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/new_media_item_thumbnail_preview"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_title_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/title_new_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textCapSentences"/>
        </com.google.android.material.textfield.TextInputLayout>

        <TextView
            android:id="@+id/content_type_spinner_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Тип контента*:"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/title_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"/>

        <Spinner
            android:id="@+id/content_type_spinner"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:minHeight="48dp"
            style="@style/Widget.AppCompat.Spinner.Underlined"
            app:layout_constraintTop_toBottomOf="@id/content_type_spinner_label"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent" />

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/creator_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/content_type_spinner"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_creator_edit">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/creator_new_media_text_field"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="textPersonName|textCapWords"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/description_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/creator_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_description_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/description_new_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine|textCapSentences"
                android:minLines="3"
                android:gravity="top"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/thumbnail_url_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/description_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_thumbnail_url_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/thumbnail_url_new_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/external_url_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/thumbnail_url_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_external_url_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/external_url_new_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/release_date_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/external_url_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_release_date_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/release_date_new_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="date"/>
        </com.google.android.material.textfield.TextInputLayout>


        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/item_notes_text_input_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            app:layout_constraintTop_toBottomOf="@id/release_date_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_item_notes">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/item_notes_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine|textCapSentences"
                android:minLines="2"
                android:gravity="top"/>
        </com.google.android.material.textfield.TextInputLayout>

        <Button
            android:id="@+id/add_item_button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="32dp"
            android:text="@string/button_add_item"
            app:layout_constraintTop_toBottomOf="@id/item_notes_text_input_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:paddingVertical="12dp"/>

        <ProgressBar
            android:id="@+id/add_item_progress_bar"
            style="?android:attr/progressBarStyle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</ScrollView>

###############################################################################
# FILE: app\src\main\res\layout\fragment_collection_details.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true"
    tools:context=".fragments.collection.CollectionDetailsFragment">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingBottom="16dp">

        <ImageView
            android:id="@+id/collection_detail_cover_image"
            android:layout_width="0dp"
            android:layout_height="250dp"
            android:scaleType="centerCrop"
            android:contentDescription="@string/collection_cover_image_desc"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:srcCompat="@drawable/ic_launcher_background" />

        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/fab_like_collection"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginEnd="16dp"
            android:src="@drawable/ic_like_outline_24"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_cover_image"
            app:layout_constraintBottom_toBottomOf="@id/collection_detail_cover_image"
            app:layout_constraintEnd_toEndOf="parent"
            app:tint="@color/white"
            android:contentDescription="@string/like_button_desc"/>

        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/fab_add_item_to_collection"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginEnd="16dp"
            android:layout_marginBottom="16dp"
            app:layout_constraintBottom_toTopOf="@+id/comment_input_layout"
            app:layout_constraintEnd_toEndOf="parent"
            app:srcCompat="@drawable/ic_add_24"
            android:contentDescription="Add item to collection"
            app:backgroundTint="?attr/colorSecondary"
            app:tint="@color/white"
            tools:visibility="visible"/>

        <TextView
            android:id="@+id/collection_detail_title"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="16dp"
            android:layout_marginEnd="16dp"
            android:textAppearance="?attr/textAppearanceHeadline5"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_cover_image"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toStartOf="@id/fab_like_collection"
            tools:text="Название очень длинной коллекции" />

        <TextView
            android:id="@+id/collection_detail_author"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceSubtitle1"
            android:textColor="?attr/colorPrimary"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_title"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            app:layout_constraintEnd_toEndOf="@id/collection_detail_title"
            tools:text="Автор: username123" />

        <TextView
            android:id="@+id/collection_detail_description"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:textAppearance="?attr/textAppearanceBody1"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_author"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            app:layout_constraintEnd_toEndOf="@id/collection_detail_title"
            tools:text="Очень длинное и подробное описание коллекции, которое может занимать несколько строк и содержать много интересной информации." />

        <LinearLayout
            android:id="@+id/collection_detail_stats_layout"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="12dp"
            android:gravity="start|center_vertical"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_description"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            app:layout_constraintEnd_toEndOf="@id/collection_detail_title">

            <ImageView
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_like_filled_24"
                app:tint="?attr/colorControlNormal"
                android:layout_marginEnd="4dp"/>
            <TextView
                android:id="@+id/collection_detail_likes_count"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginEnd="16dp"
                tools:text="1.2K" />

            <ImageView
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_views_24"
                app:tint="?attr/colorControlNormal"
                android:layout_marginEnd="4dp"/>
            <TextView
                android:id="@+id/collection_detail_views_count"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginEnd="16dp"
                tools:text="10.5K" />

            <ImageView
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_comment_24"
                app:tint="?attr/colorControlNormal"
                android:layout_marginEnd="4dp"/>
            <TextView
                android:id="@+id/collection_detail_comments_count"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="15" />
        </LinearLayout>

        <View
            android:id="@+id/divider1"
            android:layout_width="0dp"
            android:layout_height="1dp"
            android:background="?android:attr/listDivider"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_stats_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <TextView
            android:id="@+id/items_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/collection_items_title"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/divider1"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title" />

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/collection_items_recycler_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:nestedScrollingEnabled="false"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            app:layout_constraintTop_toBottomOf="@id/items_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:listitem="@layout/item_collection_item_entry"
            tools:itemCount="3"/>

        <View
            android:id="@+id/divider2"
            android:layout_width="0dp"
            android:layout_height="1dp"
            android:background="?android:attr/listDivider"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/collection_items_recycler_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <TextView
            android:id="@+id/collaborators_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/collaborators_title"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:layout_marginTop="16dp"
            android:visibility="gone"
            app:layout_constraintTop_toBottomOf="@id/divider2"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            tools:visibility="visible"/>

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/collaborators_recycler_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:nestedScrollingEnabled="false"
            android:visibility="gone"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            android:orientation="horizontal"
            app:layout_constraintTop_toBottomOf="@id/collaborators_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:listitem="@layout/item_collaborator"
            tools:itemCount="2"
            tools:visibility="visible"/>

        <View
            android:id="@+id/divider3"
            android:layout_width="0dp"
            android:layout_height="1dp"
            android:background="?android:attr/listDivider"
            android:layout_marginTop="16dp"
            android:visibility="gone"
            app:layout_constraintTop_toBottomOf="@id/collaborators_recycler_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

        <TextView
            android:id="@+id/comments_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/comments_title"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/divider3"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title" />

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/comments_recycler_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:nestedScrollingEnabled="false"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            app:layout_constraintTop_toBottomOf="@id/comments_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:listitem="@layout/item_comment"
            tools:itemCount="2"/>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/comment_input_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:layout_marginStart="16dp"
            android:layout_marginEnd="16dp"
            app:layout_constraintTop_toBottomOf="@id/comments_recycler_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/add_comment_hint">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/comment_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine"
                android:maxLines="5"/>
        </com.google.android.material.textfield.TextInputLayout>

        <Button
            android:id="@+id/post_comment_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:text="@string/post_comment_button"
            app:layout_constraintTop_toBottomOf="@id/comment_input_layout"
            app:layout_constraintEnd_toEndOf="@id/comment_input_layout" />


        <ProgressBar
            android:id="@+id/collection_detail_progress_bar"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</androidx.core.widget.NestedScrollView>

###############################################################################
# FILE: app\src\main\res\layout\fragment_create_collection.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        tools:context=".fragments.collection.EditCollectionFragment">

        <TextView
            android:id="@+id/create_collection_header_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/create_collection_title_toolbar"
            android:textAppearance="?attr/textAppearanceHeadline5"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:layout_marginTop="16dp"/>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/title_text_input_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            app:layout_constraintTop_toBottomOf="@id/create_collection_header_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_collection_title">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/title_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textCapSentences"
                android:maxLines="1"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/description_text_input_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/title_text_input_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_collection_description">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/description_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine|textCapSentences"
                android:minLines="3"
                android:gravity="top"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/cover_url_text_input_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/description_text_input_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_collection_cover_url">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/cover_url_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.switchmaterial.SwitchMaterial
            android:id="@+id/is_public_switch"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="@string/label_is_public"
            android:checked="true"
            app:layout_constraintTop_toBottomOf="@id/cover_url_text_input_layout"
            app:layout_constraintStart_toStartOf="parent"/>

        <Button
            android:id="@+id/create_collection_button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="32dp"
            android:text="@string/button_create_collection"
            app:layout_constraintTop_toBottomOf="@id/is_public_switch"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:paddingVertical="12dp"/>

        <ProgressBar
            android:id="@+id/create_collection_progress_bar"
            style="?android:attr/progressBarStyle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</ScrollView>

###############################################################################
# FILE: app\src\main\res\layout\fragment_edit_media_item.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        tools:context=".fragments.mediaitem.EditMediaItemFragment">

        <TextView
            android:id="@+id/edit_media_item_header_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/edit_media_item_toolbar_title"
            android:textAppearance="?attr/textAppearanceHeadline5"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:layout_marginTop="16dp"/>

        <ImageView
            android:id="@+id/edit_media_item_thumbnail_preview"
            android:layout_width="100dp"
            android:layout_height="150dp"
            android:layout_marginTop="16dp"
            tools:srcCompat="@drawable/ic_image_placeholder_24"
            android:scaleType="centerCrop"
            android:contentDescription="@string/media_item_thumbnail_desc"
            app:layout_constraintTop_toBottomOf="@id/edit_media_item_header_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/title_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/edit_media_item_thumbnail_preview"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_title_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/title_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textCapSentences"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/creator_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/title_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_creator_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/creator_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textPersonName|textCapWords"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/description_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/creator_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_description_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/description_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine|textCapSentences"
                android:minLines="3"
                android:gravity="top"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/thumbnail_url_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/description_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_thumbnail_url_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/thumbnail_url_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/external_url_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/thumbnail_url_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_external_url_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/external_url_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/release_date_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/external_url_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_release_date_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/release_date_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="date"/>
        </com.google.android.material.textfield.TextInputLayout>

        <!-- TODO: Add UI for selecting ContentType and Tags if needed -->

        <Button
            android:id="@+id/save_media_item_button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="32dp"
            android:text="@string/button_save_media_item_changes"
            app:layout_constraintTop_toBottomOf="@id/release_date_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:paddingVertical="12dp"/>

        <ProgressBar
            android:id="@+id/edit_media_item_progress_bar"
            style="?android:attr/progressBarStyle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</ScrollView>

###############################################################################
# FILE: app\src\main\res\layout\fragment_edit_profile.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        tools:context=".fragments.user.EditProfileFragment">

        <TextView
            android:id="@+id/edit_profile_header_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/edit_profile_toolbar_title"
            android:textAppearance="?attr/textAppearanceHeadline5"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:layout_marginTop="16dp"/>

        <ImageView
            android:id="@+id/edit_profile_avatar_preview"
            android:layout_width="100dp"
            android:layout_height="100dp"
            android:layout_marginTop="16dp"
            tools:srcCompat="@drawable/ic_profile_24"
            android:scaleType="centerCrop"
            android:contentDescription="@string/user_avatar_desc"
            app:layout_constraintTop_toBottomOf="@id/edit_profile_header_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/display_name_edit_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/edit_profile_avatar_preview"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_display_name_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/display_name_edit_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textPersonName|textCapWords"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/bio_edit_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/display_name_edit_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_bio_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/bio_edit_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine|textCapSentences"
                android:minLines="3"
                android:gravity="top"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/avatar_url_edit_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/bio_edit_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_avatar_url_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/avatar_url_edit_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <Button
            android:id="@+id/save_profile_button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="32dp"
            android:text="@string/button_save_profile_changes"
            app:layout_constraintTop_toBottomOf="@id/avatar_url_edit_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:paddingVertical="12dp"/>

        <ProgressBar
            android:id="@+id/edit_profile_progress_bar"
            style="?android:attr/progressBarStyle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</ScrollView>

###############################################################################
# FILE: app\src\main\res\layout\fragment_forgot_password.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".fragments.user.ForgotPasswordFragment">

    <TextView
        android:id="@+id/titleTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Восстановление пароля"
        android:textSize="24sp"
        android:textStyle="bold"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="32dp"/>

    <TextView
        android:id="@+id/instructionTextView"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Введите адрес электронной почты, связанный с вашим аккаунтом, и мы отправим вам инструкции по сбросу пароля."
        android:textSize="16sp"
        android:textAlignment="center"
        app:layout_constraintTop_toBottomOf="@id/titleTextView"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="16dp"/>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/emailTextInputLayout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        app:layout_constraintTop_toBottomOf="@id/instructionTextView"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:hint="@string/hint_email">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/emailEditText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="textEmailAddress" />
    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/sendButton"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Отправить"
        app:layout_constraintTop_toBottomOf="@id/emailTextInputLayout"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="24dp"
        android:paddingTop="12dp"
        android:paddingBottom="12dp"/>

    <ProgressBar
        android:id="@+id/progressBar"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_home.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.collection.HomeFragment">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/collections_recycler_view"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:listitem="@layout/item_collection_card"
        android:clipToPadding="false"
        android:paddingBottom="8dp"/>

    <ProgressBar
        android:id="@+id/home_progress_bar"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

    <TextView
        android:id="@+id/empty_view_text"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/no_collections_found"
        android:textSize="18sp"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_login.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".fragments.user.LoginFragment">

    <ImageView
        android:id="@+id/login_logo"
        android:layout_width="120dp"
        android:layout_height="120dp"
        android:layout_marginTop="64dp"
        android:contentDescription="@string/login_logo_description"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:srcCompat="@android:drawable/ic_lock_lock" />

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/email_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/login_logo">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/email_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_email"
            android:inputType="textEmailAddress" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/password_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/email_text_input_layout"
        app:passwordToggleEnabled="true">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/password_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_password"
            android:inputType="textPassword" />
    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/login_button"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:text="@string/login_button_text"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/password_text_input_layout" />

<!--    <TextView-->
<!--        android:id="@+id/forgot_password_text_view"-->
<!--        android:layout_width="wrap_content"-->
<!--        android:layout_height="wrap_content"-->
<!--        android:layout_marginTop="16dp"-->
<!--        android:text="@string/forgot_password_text"-->
<!--        android:textColor="?attr/colorPrimary"-->
<!--        app:layout_constraintEnd_toEndOf="parent"-->
<!--        app:layout_constraintTop_toBottomOf="@+id/login_button" />-->

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        android:layout_marginBottom="32dp">

        <TextView
            android:id="@+id/no_account_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/no_account_text" />

        <TextView
            android:id="@+id/sign_up_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="4dp"
            android:text="@string/sign_up_text"
            android:textColor="?attr/colorPrimary"
            android:textStyle="bold" />
    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_media_item_details.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.mediaitem.MediaItemDetailsFragment">

    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/app_bar_layout_media_details"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar">

        <com.google.android.material.appbar.CollapsingToolbarLayout
            android:id="@+id/collapsing_toolbar_layout_media_details"
            android:layout_width="match_parent"
            android:layout_height="250dp"
            app:contentScrim="?attr/colorPrimary"
            app:layout_scrollFlags="scroll|exitUntilCollapsed"
            app:titleEnabled="false">

            <ImageView
                android:id="@+id/media_item_detail_thumbnail"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:scaleType="centerCrop"
                android:contentDescription="@string/media_item_thumbnail_desc"
                tools:srcCompat="@drawable/ic_image_placeholder_24"
                app:layout_collapseMode="parallax"/>

            <androidx.appcompat.widget.Toolbar
                android:id="@+id/toolbar_media_details"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:layout_collapseMode="pin"
                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>

        </com.google.android.material.appbar.CollapsingToolbarLayout>
    </com.google.android.material.appbar.AppBarLayout>

    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

            <TextView
                android:id="@+id/media_item_detail_title_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="Очень длинное название Медиа Элемента"
                android:textAppearance="?attr/textAppearanceHeadline5" />

            <TextView
                android:id="@+id/media_item_detail_creator_label"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_media_item_creator"
                android:textAppearance="?attr/textAppearanceCaption"
                android:layout_marginTop="8dp"/>

            <TextView
                android:id="@+id/media_item_detail_creator_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="Имя Создателя"
                android:textAppearance="?attr/textAppearanceSubtitle1"
                android:textColor="?attr/colorPrimary"/>

            <TextView
                android:id="@+id/media_item_detail_type_label"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_media_item_type"
                android:textAppearance="?attr/textAppearanceCaption"
                android:layout_marginTop="8dp"/>
            <TextView
                android:id="@+id/media_item_detail_type_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="Фильм"
                android:textAppearance="?attr/textAppearanceBody1"/>

            <TextView
                android:id="@+id/media_item_detail_description_label"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_media_item_description"
                android:textAppearance="?attr/textAppearanceSubtitle2"
                android:layout_marginTop="16dp"/>
            <TextView
                android:id="@+id/media_item_detail_description_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                tools:text="Очень длинное и подробное описание медиа-элемента, которое может занимать несколько строк и содержать много интересной информации об этом элементе."
                android:textAppearance="?attr/textAppearanceBody2"
                android:layout_marginTop="4dp"/>

            <com.google.android.material.chip.ChipGroup
                android:id="@+id/media_item_detail_tags_chip_group"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:visibility="gone"
                tools:visibility="visible"/>

            <TextView
                android:id="@+id/media_item_detail_release_date_label"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_media_item_release_date"
                android:textAppearance="?attr/textAppearanceCaption"
                android:layout_marginTop="12dp"/>
            <TextView
                android:id="@+id/media_item_detail_release_date_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="2023-05-20"
                android:textAppearance="?attr/textAppearanceBody2"/>

            <TextView
                android:id="@+id/media_item_detail_added_at_label"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_media_item_added_at"
                android:textAppearance="?attr/textAppearanceCaption"
                android:layout_marginTop="8dp"/>
            <TextView
                android:id="@+id/media_item_detail_added_at_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="2024-01-15 10:00"
                android:textAppearance="?attr/textAppearanceBody2"/>

            <Button
                android:id="@+id/button_open_external_url"
                style="@style/Widget.MaterialComponents.Button.TextButton"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/button_open_external_url"
                android:layout_marginTop="16dp"
                android:visibility="gone"
                tools:visibility="visible"/>

        </LinearLayout>
    </androidx.core.widget.NestedScrollView>

    <ProgressBar
        android:id="@+id/media_item_detail_progress_bar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        android:visibility="gone"
        tools:visibility="visible"/>

    <TextView
        android:id="@+id/media_item_detail_error_text"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/error_loading_media_item_details"
        android:layout_gravity="center"
        android:visibility="gone"
        tools:visibility="visible"
        android:textColor="?attr/colorError"/>

    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:id="@+id/fab_edit_media_item"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom|end"
        android:layout_margin="16dp"
        app:srcCompat="@drawable/ic_edit_24"
        android:contentDescription="@string/button_edit_media_item"
        android:visibility="gone"
        tools:visibility="visible"/>

</androidx.coordinatorlayout.widget.CoordinatorLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_media_item_search.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.mediaitem.MediaItemSearchFragment">

    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/app_bar_layout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toTopOf="parent">

        <androidx.appcompat.widget.Toolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:title="Поиск медиа-элементов"/>
    </com.google.android.material.appbar.AppBarLayout>


    <androidx.appcompat.widget.SearchView
        android:id="@+id/media_item_search_view"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:iconifiedByDefault="false"
        app:queryHint="Введите название для поиска..."
        app:layout_constraintTop_toBottomOf="@id/app_bar_layout"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_margin="8dp"/>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/search_results_recycler_view"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toBottomOf="@id/media_item_search_view"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:listitem="@layout/item_media_item_selectable"
        android:paddingBottom="8dp"
        android:clipToPadding="false"/>

    <ProgressBar
        android:id="@+id/search_progress_bar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/media_item_search_view"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

    <TextView
        android:id="@+id/search_empty_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Ничего не найдено. Попробуйте другой запрос."
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/media_item_search_view"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_my_collections.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.collection.MyCollectionsFragment">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/my_collections_recycler_view"
            android:layout_width="0dp"
            android:layout_height="0dp"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:listitem="@layout/item_collection_card"
            android:clipToPadding="false"
            android:paddingBottom="80dp"/>

        <ProgressBar
            android:id="@+id/my_collections_progress_bar"
            style="?android:attr/progressBarStyle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

        <TextView
            android:id="@+id/my_collections_empty_view_text"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/no_my_collections_found"
            android:textSize="18sp"
            android:visibility="gone"
            android:gravity="center"
            android:padding="16dp"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>

    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:id="@+id/fab_create_collection"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom|end"
        android:layout_margin="16dp"
        android:contentDescription="@string/create_new_collection_desc"
        app:srcCompat="@drawable/ic_add_24" />

</androidx.coordinatorlayout.widget.CoordinatorLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_registration.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".fragments.user.RegistrationFragment">

    <ImageView
        android:id="@+id/register_logo"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_marginTop="32dp"
        android:contentDescription="@string/login_logo_description"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:srcCompat="@android:drawable/ic_menu_edit" />

    <TextView
        android:id="@+id/register_title_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:text="@string/sign_up_text"
        android:textSize="24sp"
        android:textStyle="bold"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/register_logo" />

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/username_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/register_title_text_view">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/username_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_username"
            android:inputType="textPersonName" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/email_text_input_layout_register"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/username_text_input_layout">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/email_edit_text_register"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_email"
            android:inputType="textEmailAddress" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/display_name_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/email_text_input_layout_register">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/display_name_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_display_name"
            android:inputType="textPersonName" />
    </com.google.android.material.textfield.TextInputLayout>


    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/password_text_input_layout_register"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/display_name_text_input_layout"
        app:passwordToggleEnabled="true">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/password_edit_text_register"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_password"
            android:inputType="textPassword" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/confirm_password_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/password_text_input_layout_register"
        app:passwordToggleEnabled="true">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/confirm_password_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_confirm_password"
            android:inputType="textPassword" />
    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/register_button"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:paddingTop="12dp"
        android:paddingBottom="12dp"
        android:text="@string/register_button_text"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/confirm_password_text_input_layout" />

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        android:layout_marginBottom="32dp">

        <TextView
            android:id="@+id/already_account_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/already_have_account" />

        <TextView
            android:id="@+id/login_now_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="4dp"
            android:text="@string/login_now_text"
            android:textColor="?attr/colorPrimary"
            android:textStyle="bold" />
    </LinearLayout>

    <ProgressBar
        android:id="@+id/progressBarRegister"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:visibility="visible" />

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_user_profile.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true"
    tools:context=".fragments.user.UserProfileFragment">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp">

        <ProgressBar
            android:id="@+id/profile_progress_bar"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

        <TextView
            android:id="@+id/profile_error_text"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:gravity="center"
            android:padding="16dp"
            android:text="@string/error_loading_profile"
            android:textAppearance="?attr/textAppearanceSubtitle1"
            android:textColor="?attr/colorError"
            android:visibility="gone"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            tools:visibility="visible" />

        <androidx.constraintlayout.widget.Group
            android:id="@+id/profile_content_group"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            app:constraint_referenced_ids="profile_avatar_image_view, username_label, username_text_view, display_name_label, display_name_text_view, email_label, email_text_view, bio_label, bio_text_view, joined_label, joined_date_text_view, last_login_label, last_login_date_text_view, edit_profile_button, logout_button"
            android:visibility="visible" />


        <ImageView
            android:id="@+id/profile_avatar_image_view"
            android:layout_width="120dp"
            android:layout_height="120dp"
            android:layout_marginTop="16dp"
            android:contentDescription="@string/user_avatar_desc"
            android:scaleType="centerCrop"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            tools:srcCompat="@drawable/ic_profile_24" /> <!-- Заглушка -->

        <TextView
            android:id="@+id/username_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            android:text="@string/label_username"
            android:textAppearance="?attr/textAppearanceSubtitle2"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/profile_avatar_image_view" />

        <TextView
            android:id="@+id/username_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:textAppearance="?attr/textAppearanceBody1"
            app:layout_constraintBaseline_toBaselineOf="@id/username_label"
            app:layout_constraintStart_toEndOf="@id/username_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="arnat_user" />

        <TextView
            android:id="@+id/display_name_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="12dp"
            android:text="@string/label_display_name"
            android:textAppearance="?attr/textAppearanceSubtitle2"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/username_label" />

        <TextView
            android:id="@+id/display_name_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:textAppearance="?attr/textAppearanceBody1"
            app:layout_constraintBaseline_toBaselineOf="@id/display_name_label"
            app:layout_constraintStart_toEndOf="@id/display_name_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Arnat Developer" />

        <TextView
            android:id="@+id/email_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="12dp"
            android:text="@string/label_email"
            android:textAppearance="?attr/textAppearanceSubtitle2"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/display_name_label" />

        <TextView
            android:id="@+id/email_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:textAppearance="?attr/textAppearanceBody1"
            app:layout_constraintBaseline_toBaselineOf="@id/email_label"
            app:layout_constraintStart_toEndOf="@id/email_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="arnat.dev@example.com" />

        <TextView
            android:id="@+id/bio_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="@string/label_bio"
            android:textAppearance="?attr/textAppearanceSubtitle2"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/email_label" />

        <TextView
            android:id="@+id/bio_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceBody2"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/bio_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Android developer passionate about creating amazing apps. Loves Kotlin and Jetpack Compose." />

        <TextView
            android:id="@+id/joined_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="@string/label_joined_on"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/bio_text_view" />

        <TextView
            android:id="@+id/joined_date_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintBaseline_toBaselineOf="@id/joined_label"
            app:layout_constraintStart_toEndOf="@id/joined_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="01.01.2024" />

        <TextView
            android:id="@+id/last_login_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:text="@string/label_last_login"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/joined_label" />

        <TextView
            android:id="@+id/last_login_date_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintBaseline_toBaselineOf="@id/last_login_label"
            app:layout_constraintStart_toEndOf="@id/last_login_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="20.05.2025 16:58" />


        <com.google.android.material.button.MaterialButton
            android:id="@+id/edit_profile_button"
            style="@style/Widget.MaterialComponents.Button.OutlinedButton"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            android:text="@string/button_edit_profile"
            app:layout_constraintTop_toBottomOf="@id/last_login_label"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/logout_button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="12dp"
            android:layout_marginBottom="16dp"
            android:text="@string/button_logout"
            app:backgroundTint="?attr/colorError"
            app:icon="@drawable/ic_logout_24"
            app:iconTint="@color/white"
            app:layout_constraintTop_toBottomOf="@id/edit_profile_button"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintVertical_bias="0.0"/> <!-- Чтобы кнопка не уезжала слишком вниз если контента мало -->

    </androidx.constraintlayout.widget.ConstraintLayout>
</androidx.core.widget.NestedScrollView>

###############################################################################
# FILE: app\src\main\res\layout\item_collaborator.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:gravity="center_horizontal"
    android:padding="8dp">

    <ImageView
        android:id="@+id/collaborator_avatar"
        android:layout_width="48dp"
        android:layout_height="48dp"
        tools:srcCompat="@drawable/ic_profile_24"
        android:contentDescription="@string/user_avatar_desc"/>

    <TextView
        android:id="@+id/collaborator_name"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="4dp"
        android:textSize="12sp"
        android:maxLines="1"
        android:ellipsize="end"
        tools:text="Collaborator Name"/>
</LinearLayout>

###############################################################################
# FILE: app\src\main\res\layout\item_collection_card.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="16dp"
    android:layout_marginTop="8dp"
    android:layout_marginEnd="16dp"
    android:layout_marginBottom="8dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <ImageView
            android:id="@+id/collection_cover_image_view"
            android:layout_width="0dp"
            android:layout_height="180dp"
            android:scaleType="centerCrop"
            android:contentDescription="@string/collection_cover_image_desc"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:srcCompat="@drawable/ic_launcher_background" /> <!-- Заглушка -->

        <TextView
            android:id="@+id/collection_title_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="12dp"
            android:layout_marginEnd="16dp"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:maxLines="2"
            android:ellipsize="end"
            app:layout_constraintTop_toBottomOf="@id/collection_cover_image_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Очень длинное название коллекции фильмов" />

        <TextView
            android:id="@+id/collection_author_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceBody2"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintTop_toBottomOf="@id/collection_title_text_view"
            app:layout_constraintStart_toStartOf="@id/collection_title_text_view"
            app:layout_constraintEnd_toEndOf="@id/collection_title_text_view"
            tools:text="Автор: username123" />

        <LinearLayout
            android:id="@+id/stats_layout"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="8dp"
            android:layout_marginBottom="12dp"
            android:gravity="start|center_vertical"
            app:layout_constraintTop_toBottomOf="@id/collection_author_text_view"
            app:layout_constraintStart_toStartOf="@id/collection_title_text_view"
            app:layout_constraintEnd_toEndOf="@id/collection_title_text_view"
            app:layout_constraintBottom_toBottomOf="parent">

            <ImageView
                android:id="@+id/likes_icon"
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_like_filled_24"
                app:tint="?attr/colorControlNormal"
                android:contentDescription="@string/likes_icon_desc" />

            <TextView
                android:id="@+id/collection_likes_count_text_view"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="4dp"
                android:layout_marginEnd="16dp"
                android:textAppearance="?attr/textAppearanceCaption"
                tools:text="1.2K" />

            <ImageView
                android:id="@+id/views_icon"
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_views_24"
                app:tint="?attr/colorControlNormal"
                android:contentDescription="@string/views_icon_desc" />

            <TextView
                android:id="@+id/collection_view_count_text_view"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="4dp"
                android:textAppearance="?attr/textAppearanceCaption"
                tools:text="10.5K" />
        </LinearLayout>

    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>

###############################################################################
# FILE: app\src\main\res\layout\item_collection_item_entry.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:cardElevation="2dp"
    app:cardCornerRadius="4dp"
    android:layout_marginStart="16dp"
    android:layout_marginEnd="16dp"
    android:layout_marginTop="4dp"
    android:layout_marginBottom="4dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="12dp">

        <ImageView
            android:id="@+id/item_thumbnail"
            android:layout_width="80dp"
            android:layout_height="100dp"
            android:scaleType="centerCrop"
            android:contentDescription="@string/media_item_thumbnail_desc"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            tools:srcCompat="@drawable/ic_image_placeholder_24"/>

        <TextView
            android:id="@+id/item_title"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="12dp"
            android:textAppearance="?attr/textAppearanceSubtitle1"
            android:maxLines="2"
            android:ellipsize="end"
            app:layout_constraintTop_toTopOf="@id/item_thumbnail"
            app:layout_constraintStart_toEndOf="@id/item_thumbnail"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Название медиа-элемента, которое может быть длинным"/>

        <TextView
            android:id="@+id/item_creator"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceBody2"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintTop_toBottomOf="@id/item_title"
            app:layout_constraintStart_toStartOf="@id/item_title"
            app:layout_constraintEnd_toEndOf="@id/item_title"
            tools:text="Автор/Режиссер: Имя Фамилия"/>

        <TextView
            android:id="@+id/item_type"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:background="@drawable/bg_tag_chip"
            android:paddingStart="8dp"
            android:paddingEnd="8dp"
            android:paddingTop="2dp"
            android:paddingBottom="2dp"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?attr/colorPrimary"
            app:layout_constraintTop_toBottomOf="@id/item_creator"
            app:layout_constraintStart_toStartOf="@id/item_title"
            tools:text="Фильм"/>

        <TextView
            android:id="@+id/item_notes"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:textAppearance="?attr/textAppearanceCaption"
            android:maxLines="3"
            android:ellipsize="end"
            android:visibility="gone"
            tools:visibility="visible"
            app:layout_constraintTop_toBottomOf="@id/item_type"
            app:layout_constraintStart_toStartOf="@id/item_title"
            app:layout_constraintEnd_toEndOf="@id/item_title"
            app:layout_constraintBottom_toBottomOf="parent"
            tools:text="Заметки пользователя к этому элементу: очень интересная деталь..."/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>

###############################################################################
# FILE: app\src\main\res\layout\item_comment.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingStart="16dp"
    android:paddingEnd="16dp"
    android:paddingTop="8dp"
    android:paddingBottom="8dp">

    <ImageView
        android:id="@+id/comment_author_avatar"
        android:layout_width="36dp"
        android:layout_height="36dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:srcCompat="@drawable/ic_profile_24"
        android:contentDescription="@string/user_avatar_desc"/>

    <TextView
        android:id="@+id/comment_author_name"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="8dp"
        android:textStyle="bold"
        app:layout_constraintStart_toEndOf="@id/comment_author_avatar"
        app:layout_constraintTop_toTopOf="@id/comment_author_avatar"
        app:layout_constraintEnd_toStartOf="@id/comment_date"
        tools:text="User Name"/>

    <TextView
        android:id="@+id/comment_text"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintStart_toStartOf="@id/comment_author_name"
        app:layout_constraintTop_toBottomOf="@id/comment_author_name"
        app:layout_constraintEnd_toEndOf="parent"
        tools:text="This is a sample comment text which can be quite long and wrap to multiple lines."/>

    <TextView
        android:id="@+id/comment_date"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="12sp"
        android:textColor="?android:attr/textColorSecondary"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="@id/comment_author_name"
        app:layout_constraintBottom_toBottomOf="@id/comment_author_name"
        tools:text="2h ago"/>
</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\item_media_item_selectable.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="8dp"
    android:layout_marginTop="4dp"
    android:layout_marginEnd="8dp"
    android:layout_marginBottom="4dp"
    app:cardElevation="2dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="12dp">

        <ImageView
            android:id="@+id/media_item_thumbnail"
            android:layout_width="60dp"
            android:layout_height="80dp"
            android:scaleType="centerCrop"
            android:contentDescription="@string/media_item_thumbnail_desc"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            tools:srcCompat="@drawable/ic_image_placeholder_24"/>

        <TextView
            android:id="@+id/media_item_title"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="12dp"
            android:textAppearance="?attr/textAppearanceSubtitle1"
            android:maxLines="2"
            android:ellipsize="end"
            app:layout_constraintTop_toTopOf="@id/media_item_thumbnail"
            app:layout_constraintStart_toEndOf="@id/media_item_thumbnail"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Название очень длинного медиа-элемента"/>

        <TextView
            android:id="@+id/media_item_creator"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceBody2"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintTop_toBottomOf="@id/media_item_title"
            app:layout_constraintStart_toStartOf="@id/media_item_title"
            app:layout_constraintEnd_toEndOf="@id/media_item_title"
            tools:text="Автор/Режиссер"/>

        <TextView
            android:id="@+id/media_item_type"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceCaption"
            app:layout_constraintTop_toBottomOf="@id/media_item_creator"
            app:layout_constraintStart_toStartOf="@id/media_item_title"
            tools:text="Тип элемента"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>

###############################################################################
# FILE: app\src\main\res\menu\bottom_nav_menu.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:id="@+id/homeFragment"
        android:icon="@drawable/ic_home_24"
        android:title="@string/bottom_nav_home" />
    <item
        android:id="@+id/myCollectionsFragment"
        android:icon="@drawable/ic_collections_24"
        android:title="@string/bottom_nav_my_collections" />
    <item
        android:id="@+id/userProfileFragment"
        android:icon="@drawable/ic_profile_24"
        android:title="@string/bottom_nav_profile" />
</menu>

###############################################################################
# FILE: app\src\main\res\mipmap-anydpi\ic_launcher.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

###############################################################################
# FILE: app\src\main\res\mipmap-anydpi\ic_launcher_round.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

###############################################################################
# FILE: app\src\main\res\navigation\nav_graph.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/nav_graph"
    app:startDestination="@id/homeFragment">

    <fragment
        android:id="@+id/login"
        android:name="com.example.finalproject.fragments.user.LoginFragment"
        android:label="fragment_login"
        tools:layout="@layout/fragment_login" >
        <action
            android:id="@+id/action_login_to_registration"
            app:destination="@id/registration" />
        <action
            android:id="@+id/action_login_to_homeFragment"
            app:destination="@id/homeFragment"
            app:popUpTo="@id/login"
            app:popUpToInclusive="true" />
        <action
            android:id="@+id/action_login_to_forgetPasswordFragment"
            app:destination="@id/forgetPasswordFragment" />
    </fragment>

    <fragment
        android:id="@+id/registration"
        android:name="com.example.finalproject.fragments.user.RegistrationFragment"
        android:label="fragment_registration"
        tools:layout="@layout/fragment_registration" >
        <action
            android:id="@+id/action_registration_to_login"
            app:destination="@id/login"
            app:popUpTo="@id/login"
            app:popUpToInclusive="true" />
    </fragment>

    <fragment
        android:id="@+id/userProfileFragment"
        android:name="com.example.finalproject.fragments.user.UserProfileFragment"
        android:label="fragment_user_profile"
        tools:layout="@layout/fragment_user_profile" >
        <action
            android:id="@+id/action_userProfileFragment_to_editProfile"
            app:destination="@id/editProfile" />
        <argument
            android:name="userId"
            app:argType="long"
            android:defaultValue="-1L" />
    </fragment>

    <fragment
        android:id="@+id/editProfile"
        android:name="com.example.finalproject.fragments.user.EditProfileFragment"
        android:label="fragment_edit_profile"
        tools:layout="@layout/fragment_edit_profile" >
        <argument
            android:name="userId"
            app:argType="long" />
    </fragment>

    <fragment
        android:id="@+id/homeFragment"
        android:name="com.example.finalproject.fragments.collection.HomeFragment"
        android:label="fragment_home"
        tools:layout="@layout/fragment_home" >
        <action
            android:id="@+id/action_homeFragment_to_collectionDetailsFragment"
            app:destination="@id/collectionDetailsFragment" />
    </fragment>

    <fragment
        android:id="@+id/myCollectionsFragment"
        android:name="com.example.finalproject.fragments.collection.MyCollectionsFragment"
        android:label="fragment_my_collections"
        tools:layout="@layout/fragment_my_collections" >
        <action
            android:id="@+id/action_myCollectionsFragment_to_createCollectionFragment"
            app:destination="@id/createCollectionFragment" />
        <action
            android:id="@+id/action_myCollectionsFragment_to_collectionDetailsFragment"
            app:destination="@id/collectionDetailsFragment" />
    </fragment>

    <fragment
        android:id="@+id/collectionDetailsFragment"
        android:name="com.example.finalproject.fragments.collection.CollectionDetailsFragment"
        android:label="fragment_collection_details"
        tools:layout="@layout/fragment_collection_details" >
        <argument
            android:name="collectionId"
            app:argType="long" />
        <action
            android:id="@+id/action_collectionDetailsFragment_to_userProfileFragment"
            app:destination="@id/userProfileFragment" />
        <action
            android:id="@+id/action_collectionDetailsFragment_to_mediaItemDetailsFragment"
            app:destination="@id/mediaItemDetailsFragment" />
        <action
            android:id="@+id/action_collectionDetailsFragment_to_addItemFragment"
            app:destination="@id/addItemFragment" />
    </fragment>

    <fragment
        android:id="@+id/createCollectionFragment"
        android:name="com.example.finalproject.fragments.collection.EditCollectionFragment"
        android:label="fragment_create_collection"
        tools:layout="@layout/fragment_create_collection" >
        <argument
            android:name="collectionId"
            app:argType="long"
            android:defaultValue="-1L" />
        <action
            android:id="@+id/action_createCollectionFragment_to_collectionDetailsFragment"
            app:destination="@id/collectionDetailsFragment"
            app:popUpTo="@id/myCollectionsFragment" />
    </fragment>

    <fragment
        android:id="@+id/addItemFragment"
        android:name="com.example.finalproject.fragments.collection.AddItemFragment"
        android:label="fragment_add_item"
        tools:layout="@layout/fragment_add_item" >
        <argument
            android:name="collectionId"
            app:argType="long" />
    </fragment>

    <fragment
        android:id="@+id/mediaItemDetailsFragment"
        android:name="com.example.finalproject.fragments.mediaitem.MediaItemDetailsFragment"
        android:label="fragment_media_item_details"
        tools:layout="@layout/fragment_media_item_details" >
        <argument
            android:name="mediaItemId"
            app:argType="long" />
        <action
            android:id="@+id/action_mediaItemDetailsFragment_to_editMediaItemFragment"
            app:destination="@id/editMediaItemFragment" />
    </fragment>

    <fragment
        android:id="@+id/editMediaItemFragment"
        android:name="com.example.finalproject.fragments.mediaitem.EditMediaItemFragment"
        android:label="fragment_edit_media_item"
        tools:layout="@layout/fragment_edit_media_item" >
        <argument
            android:name="mediaItemId"
            app:argType="long" />
    </fragment>

    <fragment
        android:id="@+id/forgetPasswordFragment"
        android:name="com.example.finalproject.fragments.user.ForgotPasswordFragment"
        android:label="fragment_forget_password"
        tools:layout="@layout/fragment_forgot_password" >
        <action
            android:id="@+id/action_forgetPasswordFragment_to_loginFragment"
            app:destination="@id/login"
            app:popUpTo="@id/login"
            app:popUpToInclusive="true" />
    </fragment>



    <fragment
        android:id="@+id/mediaItemSearchFragment"
        android:name="com.example.finalproject.fragments.mediaitem.MediaItemSearchFragment"
        android:label="fragment_media_item_search"
        tools:layout="@layout/fragment_media_item_search" />
</navigation>

###############################################################################
# FILE: app\src\main\res\values\colors.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="color_liked">#FF0000</color>
</resources>

###############################################################################
# FILE: app\src\main\res\values\strings.xml
###############################################################################

<resources>
    <string name="app_name">FinalProject</string>
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="login_logo_description">Логотип приложения</string>
    <string name="hint_email">Электронная почта</string>
    <string name="hint_password">Пароль</string>
    <string name="login_button_text">Войти</string>
    <string name="forgot_password_text">Забыли пароль?</string>
    <string name="no_account_text">Нет аккаунта?</string>
    <string name="sign_up_text">Зарегистрироваться</string>
    <string name="error_invalid_email">Неверный формат электронной почты</string>
    <string name="error_empty_password">Пароль не может быть пустым</string>
    <string name="action_loginFragment_to_registerFragment">action_loginFragment_to_registerFragment</string>

    <string name="register_button_text">Зарегистрироваться</string>
    <string name="hint_username">Имя пользователя</string>
    <string name="hint_display_name">Отображаемое имя (необязательно)</string>
    <string name="hint_confirm_password">Подтвердите пароль</string>
    <string name="error_empty_username">Имя пользователя не может быть пустым</string>
    <string name="error_password_too_short">Пароль должен содержать не менее 6 символов</string>
    <string name="error_passwords_do_not_match">Пароли не совпадают</string>
    <string name="registration_successful">Регистрация прошла успешно! Пожалуйста, войдите.</string>
    <string name="registration_failed">Ошибка регистрации</string>
    <string name="already_have_account">Уже есть аккаунт?</string>
    <string name="login_now_text">Войти</string>

    <string name="bottom_nav_home">Главная</string>
    <string name="bottom_nav_my_collections">Мои коллекции</string>
    <string name="bottom_nav_profile">Профиль</string>

    <string name="collection_cover_image_desc">Обложка коллекции</string>
    <string name="likes_icon_desc">Иконка лайков</string>
    <string name="views_icon_desc">Иконка просмотров</string>
    <string name="author_prefix">Автор: %1$s</string>
    <string name="unknown_author">Неизвестный автор</string>

    <string name="no_collections_found">Коллекций пока нет.</string>
    <string name="error_loading_collections">Ошибка загрузки коллекций</string>
    <string name="network_error">Сетевая ошибка</string>

    <string name="like_button_desc">Кнопка Лайк</string>
    <string name="collection_items_title">Элементы коллекции</string>
    <string name="collaborators_title">Соавторы</string>
    <string name="comments_title">Комментарии</string>
    <string name="add_comment_hint">Добавить комментарий...</string>
    <string name="post_comment_button">Опубликовать</string>
    <string name="error_loading_collection_details">Ошибка загрузки деталей коллекции</string>
    <string name="comment_posted_successfully">Комментарий опубликован</string>
    <string name="error_posting_comment">Ошибка публикации комментария</string>

    <string name="media_item_thumbnail_desc">Миниатюра элемента</string>
    <string name="user_avatar_desc">User Avatar\n</string>

    <string name="no_my_collections_found">У вас пока нет коллекций. Создайте первую!</string>
    <string name="create_new_collection_desc">Создать новую коллекцию</string>
    <string name="error_loading_my_collections">Ошибка загрузки ваших коллекций</string>
    <string name="please_login_to_see_collections">Пожалуйста, войдите, чтобы увидеть свои коллекции.</string>
    <string name="error_cannot_create_collection">Не удалось перейти к созданию коллекции</string>
    <string name="error_cannot_open_collection_details">Не удалось открыть детали коллекции</string>

    <string name="create_collection_title_toolbar">Создать коллекцию</string>
    <string name="hint_collection_title">Название коллекции*</string>
    <string name="hint_collection_description">Описание (необязательно)</string>
    <string name="hint_collection_cover_url">URL обложки (необязательно)</string>
    <string name="label_is_public">Сделать публичной</string>
    <string name="button_create_collection">Создать</string>
    <string name="error_collection_title_required">Название коллекции обязательно</string>
    <string name="collection_created_successfully">Коллекция успешно создана</string>
    <string name="error_creating_collection">Ошибка при создании коллекции</string>
    <string name="edit_collection_title_toolbar">Редактировать коллекцию</string>
    <string name="button_save_changes">Сохранить изменения</string>

    <string name="add_item_to_collection_toolbar">Добавить элемент в коллекцию</string>
    <string name="hint_media_item_id">ID медиа-элемента*</string>
    <string name="hint_item_notes">Заметки к элементу (необязательно)</string>
    <string name="button_add_item">Добавить элемент</string>
    <string name="error_media_item_id_required">ID медиа-элемента обязателен</string>
    <string name="item_added_successfully">Элемент успешно добавлен</string>
    <string name="error_adding_item">Ошибка при добавлении элемента</string>
    <string name="collection_id_missing">ID коллекции отсутствует</string>

    <string name="user_profile_title">Профиль пользователя</string>
    <string name="label_username">Имя пользователя:</string>
    <string name="label_display_name">Отображаемое имя:</string>
    <string name="label_email">Email:</string>
    <string name="label_bio">О себе:</string>
    <string name="label_joined_on">Присоединился:</string>
    <string name="label_last_login">Последний вход:</string>
    <string name="button_edit_profile">Редактировать профиль</string>
    <string name="button_logout">Выйти из аккаунта</string>
    <string name="confirm_logout_title">Подтверждение</string>
    <string name="confirm_logout_message">Вы уверены, что хотите выйти из аккаунта?</string>
    <string name="action_yes">Да</string>
    <string name="action_no">Нет</string>
    <string name="logged_out_successfully">Вы успешно вышли из аккаунта.</string>
    <string name="error_loading_profile">Ошибка загрузки профиля</string>
    <string name="user_not_found">Пользователь не найден</string>
    <string name="user_not_logged_in">Пользователь не авторизован</string>
    <string name="default_bio">Информация отсутствует.</string>
    <string name="default_display_name">Не указано</string>
    <string name="placeholder_date">дд.мм.гггг</string>

    <string name="edit_profile_toolbar_title">Редактирование профиля</string>
    <string name="hint_display_name_edit">Отображаемое имя</string>
    <string name="hint_bio_edit">О себе</string>
    <string name="hint_avatar_url_edit">URL аватара</string>
    <string name="button_save_profile_changes">Сохранить изменения</string>
    <string name="profile_updated_successfully">Профиль успешно обновлен</string>
    <string name="error_updating_profile">Ошибка при обновлении профиля</string>
    <string name="error_loading_data_for_edit">Ошибка загрузки данных для редактирования</string>

    <string name="media_item_details_title_toolbar">Детали элемента</string>
    <string name="label_media_item_title">Название:</string>
    <string name="label_media_item_creator">Автор/Создатель:</string>
    <string name="label_media_item_type">Тип:</string>
    <string name="label_media_item_description">Описание:</string>
    <string name="label_media_item_release_date">Дата выхода:</string>
    <string name="label_media_item_added_at">Добавлено:</string>
    <string name="label_media_item_external_url">Внешняя ссылка:</string>
    <string name="button_open_external_url">Открыть ссылку</string>
    <string name="button_edit_media_item">Редактировать элемент</string>
    <string name="button_delete_media_item">Удалить элемент</string>
    <string name="confirm_delete_media_item_title">Удалить элемент?</string>
    <string name="confirm_delete_media_item_message">Вы уверены, что хотите удалить этот медиа-элемент? Это действие необратимо.</string>
    <string name="media_item_deleted_successfully">Медиа-элемент удален</string>
    <string name="error_deleting_media_item">Ошибка удаления медиа-элемента</string>
    <string name="error_loading_media_item_details">Ошибка загрузки деталей элемента</string>
    <string name="media_item_not_found">Медиа-элемент не найден</string>
    <string name="no_external_url">Внешняя ссылка отсутствует</string>
    <string name="cannot_open_url">Не удалось открыть ссылку</string>

    <string name="edit_media_item_toolbar_title">Редактировать медиа-элемент</string>
    <string name="hint_media_item_title_edit">Название*</string>
    <string name="hint_media_item_creator_edit">Автор/Создатель</string>
    <string name="hint_media_item_description_edit">Описание</string>
    <string name="hint_media_item_thumbnail_url_edit">URL миниатюры</string>
    <string name="hint_media_item_external_url_edit">Внешняя ссылка (URL)</string>
    <string name="hint_media_item_release_date_edit">Дата выхода (гггг-мм-дд)</string>
    <string name="button_save_media_item_changes">Сохранить изменения</string>
    <string name="media_item_updated_successfully">Медиа-элемент обновлен</string>
    <string name="error_updating_media_item">Ошибка обновления медиа-элемента</string>
    <string name="error_media_item_title_required">Название медиа-элемента обязательно</string>
    <string name="label_media_item_tags">Теги:</string>
</resources>

###############################################################################
# FILE: app\src\main\res\values\themes.xml
###############################################################################

<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.FinalProject" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your light theme here. -->
        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
    </style>

    <style name="Theme.FinalProject" parent="Base.Theme.FinalProject" />
</resources>

###############################################################################
# FILE: app\src\main\res\values-night\themes.xml
###############################################################################

<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.FinalProject" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your dark theme here. -->
        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
    </style>
</resources>

###############################################################################
# FILE: app\src\main\res\xml\backup_rules.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

###############################################################################
# FILE: app\src\main\res\xml\data_extraction_rules.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\MainActivity.kt
###############################################################################

package com.example.finalproject

import android.os.Bundle
import android.view.View
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.navigation.NavController
import androidx.navigation.fragment.NavHostFragment
import androidx.navigation.ui.setupWithNavController
import com.example.finalproject.databinding.ActivityMainBinding
import com.example.finalproject.utils.AuthTokenProvider

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var navController: NavController

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        AuthTokenProvider.initialize(applicationContext)
        binding = ActivityMainBinding.inflate(layoutInflater)

        enableEdgeToEdge()
        setContentView(binding.root)
        ViewCompat.setOnApplyWindowInsetsListener(binding.main) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment
        navController = navHostFragment.navController
        val navGraph = navController.navInflater.inflate(R.navigation.nav_graph)

        if (AuthTokenProvider.isAuthenticated()) {
            navGraph.setStartDestination(R.id.homeFragment)
        } else {
            navGraph.setStartDestination(R.id.login)
        }
        navController.graph = navGraph

        binding.bottomNavigationView.setupWithNavController(navController)

        navController.addOnDestinationChangedListener { _, destination, _ ->
            when (destination.id) {
                R.id.login, R.id.registration, R.id.forgetPasswordFragment -> {
                    binding.bottomNavigationView.visibility = View.GONE
                }
                else -> {
                    binding.bottomNavigationView.visibility = View.VISIBLE
                }
            }
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        return navController.navigateUp() || super.onSupportNavigateUp()
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CollaboratorAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCollaboratorBinding
import com.example.finalproject.models.User // Предполагаем, что collaborators это List<User>

class CollaboratorAdapter(private val onCollaboratorClicked: (User) -> Unit) :
    ListAdapter<User, CollaboratorAdapter.CollaboratorViewHolder>(UserDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CollaboratorViewHolder {
        val binding = ItemCollaboratorBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return CollaboratorViewHolder(binding, onCollaboratorClicked)
    }

    override fun onBindViewHolder(holder: CollaboratorViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class CollaboratorViewHolder(
        private val binding: ItemCollaboratorBinding,
        private val onCollaboratorClicked: (User) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {
        fun bind(user: User) {
            binding.collaboratorName.text = user.displayName ?: user.username
            Glide.with(itemView.context)
                .load(user.avatarUrl)
                .placeholder(R.drawable.ic_profile_24)
                .error(R.drawable.ic_profile_24)
                .circleCrop()
                .into(binding.collaboratorAvatar)
            itemView.setOnClickListener { onCollaboratorClicked(user) }
        }
    }

    // Можно использовать общий UserDiffCallback, если он уже есть
    class UserDiffCallback : DiffUtil.ItemCallback<User>() {
        override fun areItemsTheSame(oldItem: User, newItem: User): Boolean {
            return oldItem.userId == newItem.userId
        }
        override fun areContentsTheSame(oldItem: User, newItem: User): Boolean {
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CollectionAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCollectionCardBinding
import com.example.finalproject.models.Collection

class CollectionAdapter(private val onItemClicked: (Collection) -> Unit) :
    ListAdapter<Collection, CollectionAdapter.CollectionViewHolder>(CollectionDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CollectionViewHolder {
        val binding = ItemCollectionCardBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return CollectionViewHolder(binding, onItemClicked)
    }

    override fun onBindViewHolder(holder: CollectionViewHolder, position: Int) {
        val collection = getItem(position)
        holder.bind(collection)
    }

    class CollectionViewHolder(
        private val binding: ItemCollectionCardBinding,
        private val onItemClicked: (Collection) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(collection: Collection) {
            binding.collectionTitleTextView.text = collection.title

            val authorName = collection.owner?.displayName ?: collection.owner?.username ?: itemView.context.getString(R.string.unknown_author)
            binding.collectionAuthorTextView.text = itemView.context.getString(R.string.author_prefix, authorName)

            binding.collectionLikesCountTextView.text = formatCount(collection.likeCount ?: 0)
            binding.collectionViewCountTextView.text = formatCount(collection.viewCount ?: 0) // viewCount у тебя не nullable

            Glide.with(itemView.context)
                .load(collection.coverImageUrl) // Убедись, что URL полный и рабочий
                .placeholder(R.drawable.ic_launcher_background) // Стандартная заглушка
                .error(R.drawable.ic_image_placeholder_24) // Заглушка при ошибке (создай ее)
                .into(binding.collectionCoverImageView)

            itemView.setOnClickListener {
                onItemClicked(collection)
            }
        }

        // Простая функция для форматирования чисел (1200 -> 1.2K)
        private fun formatCount(count: Int): String {
            return when {
                count >= 1_000_000 -> String.format("%.1fM", count / 1_000_000.0)
                count >= 1_000 -> String.format("%.1fK", count / 1_000.0)
                else -> count.toString()
            }
        }
    }

    class CollectionDiffCallback : DiffUtil.ItemCallback<Collection>() {
        override fun areItemsTheSame(oldItem: Collection, newItem: Collection): Boolean {
            return oldItem.collectionId == newItem.collectionId
        }

        override fun areContentsTheSame(oldItem: Collection, newItem: Collection): Boolean {
            // Сравнивай по нужным полям, если объект Collection может меняться без смены ID
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CollectionItemAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCollectionItemEntryBinding
import com.example.finalproject.models.CollectionItemEntry

class CollectionItemAdapter(private val onItemClicked: (CollectionItemEntry) -> Unit) :
    ListAdapter<CollectionItemEntry, CollectionItemAdapter.ItemViewHolder>(ItemDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemViewHolder {
        val binding = ItemCollectionItemEntryBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return ItemViewHolder(binding, onItemClicked)
    }

    override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class ItemViewHolder(
        private val binding: ItemCollectionItemEntryBinding,
        private val onItemClicked: (CollectionItemEntry) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(entry: CollectionItemEntry) {
            val mediaItem = entry.mediaItem
            binding.itemTitle.text = mediaItem.title
            binding.itemCreator.text = mediaItem.creator ?: itemView.context.getString(R.string.unknown_author) // или другой текст

            mediaItem.contentType?.typeName?.let {
                binding.itemType.text = it
                binding.itemType.visibility = View.VISIBLE
            } ?: run {
                binding.itemType.visibility = View.GONE
            }

            entry.notes?.let {
                binding.itemNotes.text = it
                binding.itemNotes.visibility = View.VISIBLE
            } ?: run {
                binding.itemNotes.visibility = View.GONE
            }

            Glide.with(itemView.context)
                .load(mediaItem.thumbnailUrl)
                .placeholder(R.drawable.ic_image_placeholder_24)
                .error(R.drawable.ic_image_placeholder_24)
                .into(binding.itemThumbnail)

            itemView.setOnClickListener {
                onItemClicked(entry)
            }
        }
    }

    class ItemDiffCallback : DiffUtil.ItemCallback<CollectionItemEntry>() {
        override fun areItemsTheSame(oldItem: CollectionItemEntry, newItem: CollectionItemEntry): Boolean {
            return oldItem.mediaItem.itemId == newItem.mediaItem.itemId && oldItem.collectionId == newItem.collectionId
        }

        override fun areContentsTheSame(oldItem: CollectionItemEntry, newItem: CollectionItemEntry): Boolean {
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CommentAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCommentBinding
import com.example.finalproject.models.CollectionComment

class CommentAdapter(private val onAuthorClicked: (Long?) -> Unit) :
    ListAdapter<CollectionComment, CommentAdapter.CommentViewHolder>(CommentDiffCallback()) {

    // private val dateFormat = SimpleDateFormat("dd MMM yyyy, HH:mm", Locale.getDefault())

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CommentViewHolder {
        val binding = ItemCommentBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return CommentViewHolder(binding, onAuthorClicked)
    }

    override fun onBindViewHolder(holder: CommentViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class CommentViewHolder(
        private val binding: ItemCommentBinding,
        private val onAuthorClicked: (Long?) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {
        fun bind(comment: CollectionComment) {
            binding.commentText.text = comment.commentText
            binding.commentAuthorName.text = comment.user?.displayName ?: comment.user?.username ?: itemView.context.getString(R.string.unknown_author)
            // binding.commentDate.text = comment.createdAt // TODO: Format date properly
            // Простая заглушка для даты
            binding.commentDate.text = " "

            Glide.with(itemView.context)
                .load(comment.user?.avatarUrl)
                .placeholder(R.drawable.ic_profile_24) // Заглушка
                .error(R.drawable.ic_profile_24)
                .circleCrop()
                .into(binding.commentAuthorAvatar)

            binding.commentAuthorAvatar.setOnClickListener { onAuthorClicked(comment.userId) }
            binding.commentAuthorName.setOnClickListener { onAuthorClicked(comment.userId) }
        }
    }

    class CommentDiffCallback : DiffUtil.ItemCallback<CollectionComment>() {
        override fun areItemsTheSame(oldItem: CollectionComment, newItem: CollectionComment): Boolean {
            return oldItem.commentId == newItem.commentId
        }
        override fun areContentsTheSame(oldItem: CollectionComment, newItem: CollectionComment): Boolean {
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\MediaItemAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemMediaItemSelectableBinding
import com.example.finalproject.models.MediaItem

class MediaItemAdapter(private val onItemClicked: (MediaItem) -> Unit) :
    ListAdapter<MediaItem, MediaItemAdapter.MediaItemViewHolder>(MediaItemDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MediaItemViewHolder {
        val binding = ItemMediaItemSelectableBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return MediaItemViewHolder(binding, onItemClicked)
    }

    override fun onBindViewHolder(holder: MediaItemViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class MediaItemViewHolder(
        private val binding: ItemMediaItemSelectableBinding,
        private val onItemClicked: (MediaItem) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(mediaItem: MediaItem) {
            binding.mediaItemTitle.text = mediaItem.title
            binding.mediaItemCreator.text = mediaItem.creator ?: itemView.context.getString(R.string.unknown_author)
            binding.mediaItemType.text = mediaItem.contentType?.typeName ?: "N/A"

            Glide.with(itemView.context)
                .load(mediaItem.thumbnailUrl)
                .placeholder(R.drawable.ic_image_placeholder_24)
                .error(R.drawable.ic_image_placeholder_24)
                .into(binding.mediaItemThumbnail)

            itemView.setOnClickListener {
                onItemClicked(mediaItem)
            }
        }
    }

    class MediaItemDiffCallback : DiffUtil.ItemCallback<MediaItem>() {
        override fun areItemsTheSame(oldItem: MediaItem, newItem: MediaItem): Boolean {
            return oldItem.itemId == newItem.itemId
        }

        override fun areContentsTheSame(oldItem: MediaItem, newItem: MediaItem): Boolean {
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\api\ApiService.kt
###############################################################################

package com.example.finalproject.api

import com.example.finalproject.models.Collection
import com.example.finalproject.models.request.LoginRequest
import com.example.finalproject.models.responce.AuthResponse
import com.example.finalproject.models.CollectionComment
import com.example.finalproject.models.CollectionItemEntry
import com.example.finalproject.models.request.ForgotPasswordRequest
import com.example.finalproject.models.responce.PagedResponse
import com.example.finalproject.models.request.RegistrationRequest
import com.example.finalproject.models.CollectionCollaborator
import com.example.finalproject.models.ContentType
import com.example.finalproject.models.MediaItem
import com.example.finalproject.models.User
import com.example.finalproject.models.request.CreateCollectionRequest
import com.example.finalproject.models.request.CreateCommentRequest
import com.example.finalproject.models.request.AddItemToCollectionRequest
import com.example.finalproject.models.request.CreateMediaItemRequest
import com.example.finalproject.models.request.UpdateMediaItemRequest
import com.example.finalproject.models.request.UpdateProfileRequest
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.http.Body
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.PUT
import retrofit2.http.Path
import retrofit2.http.Query

interface ApiService {
    @POST("vc-collections/collections")
    fun createCollection(
        @Body createCollectionRequest: CreateCollectionRequest
    ): Call<Collection>

    // @PUT("vc-collections/collections/{id}")
    // fun updateCollection(
    //     @Path("id") collectionId: Int,
    //     @Body updateCollectionRequest: CreateCollectionRequest
    // ): Call<Collection>

    @GET("vc-collections/collections/{id}")
    fun getCollectionById(@Path("id") collectionId: Long): Call<Collection>

    @GET("vc-collections/collections/public-feed")
    fun getPublicCollections(
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 10,
        @Query("sort") sort: String = "viewCount,desc"
    ): Call<PagedResponse<Collection>>

    @GET("vc-collections/collections/my")
    fun getMyCollections(
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 10,
        @Query("sort") sort: String = "updatedAt,desc"
    ): Call<PagedResponse<Collection>>

    @GET("vc-collections/collections/{collectionId}/items")
    fun getCollectionItems(
        @Path("collectionId") collectionId: Long,
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 20
    ): Call<PagedResponse<CollectionItemEntry>>

    @POST("vc-collections/collections/{collectionId}/items")
    fun addItemToCollection(
        @Path("collectionId") collectionId: Long,
        @Body addItemRequest: AddItemToCollectionRequest
    ): Call<CollectionItemEntry>

    @GET("vc-collections/collections/{collectionId}/comments")
    fun getCollectionComments(
        @Path("collectionId") collectionId: Long,
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 10
    ): Call<PagedResponse<CollectionComment>>

    @GET("vc-collections/collections/{collectionId}/collaborators")
    fun getCollectionCollaborators(@Path("collectionId") collectionId: Long): Call<List<CollectionCollaborator>>

    @POST("vc-collections/collections/{collectionId}/like")
    fun likeCollection(@Path("collectionId") collectionId: Long): Call<ResponseBody>

    @DELETE("vc-collections/collections/{collectionId}/like")
    fun unlikeCollection(@Path("collectionId") collectionId: Long): Call<ResponseBody>

    @POST("vc-collections/collections/{collectionId}/comments")
    fun addCollectionComment(
        @Path("collectionId") collectionId: Long,
        @Body commentRequest: CreateCommentRequest
    ): Call<CollectionComment>


    @GET("vc-content/media-items/{itemId}")
    fun getMediaItemById(@Path("itemId") itemId: Long): Call<MediaItem>

    @POST("vc-content/media-items")
    fun createMediaItem(@Body mediaItemCreateRequest: CreateMediaItemRequest): Call<MediaItem>

    @PUT("vc-content/media-items/{itemId}")
    fun updateMediaItem(
        @Path("itemId") itemId: Long,
        @Body mediaItemUpdateRequest: UpdateMediaItemRequest
    ): Call<MediaItem>

    @DELETE("vc-content/media-items/{itemId}")
    fun deleteMediaItem(@Path("itemId") itemId: Long): Call<ResponseBody>

    @GET("vc-content/media-items/search")
    fun searchMediaItems(
        @Query("query") query: String,
        @Query("type") type: String? = null,
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 15
    ): Call<PagedResponse<MediaItem>>

    @GET("vc-content/content-types")
    fun getContentTypes(): Call<List<ContentType>>


    @POST("vc-users/auth/login")
    fun loginUser(@Body loginRequest: LoginRequest): Call<AuthResponse>

    @POST("vc-users/auth/forgot-password")
    fun forgotPassword(@Body forgotPasswordRequest: ForgotPasswordRequest): Call<ResponseBody>

    @POST("vc-users/auth/register")
    fun registerUser(@Body registrationRequest: RegistrationRequest): Call<AuthResponse>

    @GET("vc-users/users/{userId}")
    fun getUserProfileById(@Path("userId") userId: Long): Call<User>

    @PUT("vc-users/users/me")
    fun updateMyProfile(@Body updateProfileRequest: UpdateProfileRequest): Call<User>
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\api\AuthInterceptor.kt
###############################################################################

package com.example.finalproject.api

import com.example.finalproject.utils.AuthTokenProvider
import okhttp3.Interceptor
import okhttp3.Response

class AuthInterceptor : Interceptor {
    override fun intercept(chain: Interceptor.Chain): Response {
        val originalRequest = chain.request()
        val token = AuthTokenProvider.getToken()

        val requestBuilder = originalRequest.newBuilder()
            .header("Accept", "application/json")
            .method(originalRequest.method, originalRequest.body)

        if (token != null) {
            requestBuilder.header("Authorization", "Bearer $token")
        }

        val request = requestBuilder.build()
        return chain.proceed(request)
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\api\RetrofitClient.kt
###############################################################################

package com.example.finalproject.api

import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object RetrofitClient {
    private const val BASE_URL = "http://10.0.2.2:8765/"

    private val okHttpClient = OkHttpClient.Builder()
        .addInterceptor(AuthInterceptor())
         .addInterceptor(HttpLoggingInterceptor().apply {
             level = HttpLoggingInterceptor.Level.BODY
         })
        .build()

    val instance: ApiService by lazy {
        val retrofit = Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
        retrofit.create(ApiService::class.java)
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\AchievementType.kt
###############################################################################

package com.example.finalproject.models

data class AchievementType(
    val achievementId: Int,
    val name: String,
    val description: String?,
    val iconUrl: String?,
    val requirement: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\Collection.kt
###############################################################################

package com.example.finalproject.models

data class Collection(
    val collectionId: Long,
    val title: String,
    val description: String?,
    val coverImageUrl: String?,
    val createdAt: String?,
    val updatedAt: String?,
    val isPublic: Boolean,
    val viewCount: Int?,
    val owner: User? = null,
    val items: List<CollectionItemEntry>? = null,
    val collaborators: List<User>? = null,
    val likeCount: Int? = null,
    val commentCount: Int? = null
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionCollaborator.kt
###############################################################################

package com.example.finalproject.models

data class CollectionCollaborator(
    val collectionId: Int,
    val userId: Int,
    val role: String,
    val joinedAt: String, // Или использовать тип Date/Timestamp
    val user: User? = null // Если API будет возвращать детали соавтора
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionComment.kt
###############################################################################

package com.example.finalproject.models

data class CollectionComment(
    val commentId: Int,
    val collectionId: Long,
    val userId: Long?,
    val commentText: String,
    val createdAt: String, // Или использовать тип Date/Timestamp
    val user: User? = null // Детали пользователя, оставившего комментарий
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionItemEntry.kt
###############################################################################

package com.example.finalproject.models

data class CollectionItemEntry(
    val collectionId: Long,
    val itemId: Long,
    val addedByUserId: Int?,
    val addedAt: String,
    val position: Int?,
    val notes: String?,
    val mediaItem: MediaItem,
    val addedByUser: User? = null
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionLike.kt
###############################################################################

package com.example.finalproject.models

data class CollectionLike(
    val userId: Int,
    val collectionId: Int,
    val likedAt: String, // Или использовать тип Date/Timestamp
    val user: User? = null // Детали пользователя, который поставил лайк
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\ContentType.kt
###############################################################################

package com.example.finalproject.models

data class ContentType(
    val typeId: Long,
    val typeName: String,
    val typeIcon: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\MediaItem.kt
###############################################################################

package com.example.finalproject.models

data class MediaItem(
    val itemId: Long,
    val typeId: Long,
    val title: String,
    val creator: String?,
    val description: String?,
    val thumbnailUrl: String?,
    val externalUrl: String?,
    val releaseDate: String?,
    val addedAt: String,
    val contentType: ContentType? = null,
    val tags: List<Tag>? = null
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\PageableDetails.kt
###############################################################################

package com.example.finalproject.models

import com.example.finalproject.models.responce.SortProperty
import com.google.gson.annotations.SerializedName

data class PageableDetails(
    @SerializedName("pageNumber")
    val pageNumber: Int,

    @SerializedName("pageSize")
    val pageSize: Int,

    @SerializedName("sort") // Информация о сортировке, примененной к этому pageable запросу
    val sortDetails: List<SortProperty>,

    @SerializedName("offset")
    val offset: Long,

    @SerializedName("paged")
    val paged: Boolean,

    @SerializedName("unpaged")
    val unpaged: Boolean
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\Tag.kt
###############################################################################

package com.example.finalproject.models

data class Tag(
    val tagId: Long,
    val tagName: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\User.kt
###############################################################################

package com.example.finalproject.models

data class User(
    val userId: Long?,
    val username: String,
    val email: String,
    val displayName: String?,
    val bio: String?,
    val avatarUrl: String?,
    val createdAt: String,
    val lastLogin: String?,
    val isActive: Boolean?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\UserAchievement.kt
###############################################################################

package com.example.finalproject.models

data class UserAchievement(
    val userId: Int,
    val achievementId: Int,
    val achievedAt: String, // Или использовать тип Date/Timestamp
    val achievementDetails: AchievementType? = null // Детали самого достижения
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\UserFollow.kt
###############################################################################

package com.example.finalproject.models

data class UserFollow(
    val followerId: Int,
    val followedId: Int,
    val followedAt: String, // Или использовать тип Date/Timestamp
    val followerDetails: User? = null, // Детали подписчика
    val followedDetails: User? = null  // Детали того, на кого подписаны
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\utils\AuthTokenProvider.kt
###############################################################################

package com.example.finalproject.utils

import android.content.Context
import android.content.SharedPreferences
import com.example.finalproject.models.User
import com.google.gson.Gson
import com.google.gson.JsonSyntaxException

object AuthTokenProvider {

    private const val PREFS_NAME = "auth_prefs"
    private const val KEY_AUTH_TOKEN = "auth_token"
    private const val KEY_CURRENT_USER = "current_user"

    private lateinit var sharedPreferences: SharedPreferences
    private val gson = Gson()

    fun initialize(context: Context) {
        sharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    }

    fun saveToken(token: String?) {
        sharedPreferences.edit().putString(KEY_AUTH_TOKEN, token).apply()
    }

    fun getToken(): String? {
        return sharedPreferences.getString(KEY_AUTH_TOKEN, null)
    }

    fun saveUser(user: User?) {
        val userJson = if (user != null) gson.toJson(user) else null
        sharedPreferences.edit().putString(KEY_CURRENT_USER, userJson).apply()
    }

    fun getCurrentUser(): User? {
        val userJson = sharedPreferences.getString(KEY_CURRENT_USER, null)
        return if (userJson != null) {
            try {
                gson.fromJson(userJson, User::class.java)
            } catch (e: JsonSyntaxException) {
                clearAuthData()
                null
            }
        } else {
            null
        }
    }

    fun clearAuthData() {
        sharedPreferences.edit()
            .remove(KEY_AUTH_TOKEN)
            .remove(KEY_CURRENT_USER)
            .apply()
    }

    fun isAuthenticated(): Boolean {
        return getToken() != null && getCurrentUser() != null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\AddItemFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AdapterView
import android.widget.ArrayAdapter
import android.widget.TextView
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.core.widget.doOnTextChanged
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentAddItemBinding
import com.example.finalproject.models.CollectionItemEntry
import com.example.finalproject.models.ContentType // Импорт модели ContentType
import com.example.finalproject.models.MediaItem
import com.example.finalproject.models.request.AddItemToCollectionRequest
import com.example.finalproject.models.request.CreateMediaItemRequest
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.Locale

class AddItemFragment : Fragment() {

    private var _binding: FragmentAddItemBinding? = null
    private val binding get() = _binding!!

    private val args: AddItemFragmentArgs by navArgs()
    private var collectionId: Long = -1L

    private val releaseDateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.US)
    private var contentTypesList: List<ContentType> = emptyList()
    private var selectedContentTypeId: Long? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        collectionId = args.collectionId
        if (collectionId == -1L) {
            Toast.makeText(context, getString(R.string.collection_id_missing), Toast.LENGTH_LONG).show()
            Log.e("AddItemFragment", "Collection ID is missing.")
            findNavController().popBackStack()
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentAddItemBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        fetchContentTypes() // Загружаем типы контента

        binding.thumbnailUrlNewMediaTextField.doOnTextChanged { text, _, _, _ ->
            Glide.with(this)
                .load(text.toString().trim())
                .placeholder(R.drawable.ic_image_placeholder_24)
                .error(R.drawable.ic_image_placeholder_24)
                .into(binding.newMediaItemThumbnailPreview)
        }

        binding.contentTypeSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                if (position > 0 && contentTypesList.isNotEmpty()) { // Пропускаем prompt "Выберите тип"
                    selectedContentTypeId = contentTypesList[position - 1].typeId
                } else {
                    selectedContentTypeId = null
                }
            }
            override fun onNothingSelected(parent: AdapterView<*>?) {
                selectedContentTypeId = null
            }
        }

        binding.addItemButton.setOnClickListener {
            if (!AuthTokenProvider.isAuthenticated()) {
                Toast.makeText(context, R.string.please_login_to_see_collections, Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            if (collectionId != -1L) {
                handleCreateAndAddItemToCollection()
            } else {
                Toast.makeText(context, getString(R.string.collection_id_missing), Toast.LENGTH_LONG).show()
            }
        }
    }

    private fun fetchContentTypes() {
        setLoading(true) // Можно добавить отдельный ProgressBar для спиннера
        RetrofitClient.instance.getContentTypes().enqueue(object: Callback<List<ContentType>> {
            override fun onResponse(call: Call<List<ContentType>>, response: Response<List<ContentType>>) {
                setLoading(false)
                if (response.isSuccessful) {
                    contentTypesList = response.body() ?: emptyList()
                    setupContentTypeSpinner()
                } else {
                    Toast.makeText(context, "Ошибка загрузки типов контента: ${response.code()}", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<List<ContentType>>, t: Throwable) {
                setLoading(false)
                Toast.makeText(context, "Сетевая ошибка при загрузке типов: ${t.message}", Toast.LENGTH_SHORT).show()
            }
        })
    }

    private fun setupContentTypeSpinner() {
        val typeNames = mutableListOf("Выберите тип*") // Добавляем подсказку
        typeNames.addAll(contentTypesList.map { it.typeName })

        val adapter = ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, typeNames).apply {
            setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        }
        binding.contentTypeSpinner.adapter = adapter
    }


    private fun validateMediaItemFields(): CreateMediaItemRequest? {
        val title = binding.titleNewMediaTextField.text.toString().trim()

        if (title.isEmpty()) {
            binding.titleNewMediaLayout.error = getString(R.string.error_media_item_title_required)
            (binding.titleNewMediaLayout.editText as? TextView)?.error = getString(R.string.error_media_item_title_required) // Для отображения ошибки в Material EditText
            return null
        } else {
            binding.titleNewMediaLayout.error = null
        }

        if (selectedContentTypeId == null) {
            Toast.makeText(context, "Пожалуйста, выберите тип контента", Toast.LENGTH_SHORT).show()
            // Можно подсветить спиннер
            (binding.contentTypeSpinner.selectedView as? TextView)?.error = "Выберите тип"
            return null
        }

        val creator = binding.creatorNewMediaTextField.text.toString().trim().ifEmpty { null }
        val description = binding.descriptionNewMediaTextField.text.toString().trim().ifEmpty { null }
        val thumbnailUrl = binding.thumbnailUrlNewMediaTextField.text.toString().trim().ifEmpty { null }
        val externalUrl = binding.externalUrlNewMediaTextField.text.toString().trim().ifEmpty { null }
        val releaseDateString = binding.releaseDateNewMediaTextField.text.toString().trim().ifEmpty { null }

        if (releaseDateString != null) {
            try {
                releaseDateFormat.isLenient = false
                releaseDateFormat.parse(releaseDateString)
            } catch (e: ParseException) {
                binding.releaseDateNewMediaLayout.error = "Неверный формат даты (гггг-мм-дд)"
                return null
            }
            binding.releaseDateNewMediaLayout.error = null
        }

        return CreateMediaItemRequest(
            title = title,
            typeId = selectedContentTypeId!!,
            creator = creator,
            description = description,
            thumbnailUrl = thumbnailUrl,
            externalUrl = externalUrl,
            releaseDate = releaseDateString
        )
    }


    private fun handleCreateAndAddItemToCollection() {
        val createMediaItemRequest = validateMediaItemFields() ?: return
        val notesForItemCollection = binding.itemNotesEditText.text.toString().trim().ifEmpty { null }

        setLoading(true)

        RetrofitClient.instance.createMediaItem(createMediaItemRequest)
            .enqueue(object : Callback<MediaItem> {
                override fun onResponse(call: Call<MediaItem>, response: Response<MediaItem>) {
                    if (response.isSuccessful) {
                        val createdMediaItem = response.body()
                        if (createdMediaItem != null) {
                            Log.d("AddItemFragment", "MediaItem created: ID ${createdMediaItem.itemId}")
                            addNewlyCreatedItemToCollection(createdMediaItem.itemId, notesForItemCollection)
                        } else {
                            setLoading(false)
                            Toast.makeText(context, "Ошибка создания медиа-элемента: пустой ответ", Toast.LENGTH_LONG).show()
                        }
                    } else {
                        setLoading(false)
                        val errorMsg = response.errorBody()?.string() ?: "Ошибка создания медиа-элемента"
                        Toast.makeText(context, "Ошибка ${response.code()}: $errorMsg", Toast.LENGTH_LONG).show()
                        Log.e("AddItemFragment", "API Error creating MediaItem ${response.code()}: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<MediaItem>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Сетевая ошибка при создании медиа-элемента: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("AddItemFragment", "Network Failure creating MediaItem", t)
                }
            })
    }

    private fun addNewlyCreatedItemToCollection(mediaItemId: Long, notes: String?) {
        val addItemToCollectionRequest = AddItemToCollectionRequest(mediaItemId = mediaItemId, notes = notes)

        RetrofitClient.instance.addItemToCollection(collectionId, addItemToCollectionRequest)
            .enqueue(object : Callback<CollectionItemEntry> {
                override fun onResponse(call: Call<CollectionItemEntry>, response: Response<CollectionItemEntry>) {
                    setLoading(false)
                    if (response.isSuccessful && response.code() == 201) {
                        Toast.makeText(context, getString(R.string.item_added_successfully), Toast.LENGTH_SHORT).show()
                        Log.d("AddItemFragment", "Item ID $mediaItemId added to collection $collectionId")
                        findNavController().popBackStack()
                    } else {
                        val errorMsg = response.errorBody()?.string() ?: getString(R.string.error_adding_item)
                        Toast.makeText(context, "Ошибка добавления в коллекцию ${response.code()}: $errorMsg", Toast.LENGTH_LONG).show()
                        Log.e("AddItemFragment", "API Error adding item to collection ${response.code()}: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<CollectionItemEntry>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Сетевая ошибка при добавлении в коллекцию: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("AddItemFragment", "Network Failure adding item to collection", t)
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.addItemProgressBar.isVisible = isLoading
        binding.titleNewMediaTextField.isEnabled = !isLoading
        binding.contentTypeSpinner.isEnabled = !isLoading
        binding.creatorNewMediaTextField.isEnabled = !isLoading
        binding.descriptionNewMediaTextField.isEnabled = !isLoading
        binding.thumbnailUrlNewMediaTextField.isEnabled = !isLoading
        binding.externalUrlNewMediaTextField.isEnabled = !isLoading
        binding.releaseDateNewMediaTextField.isEnabled = !isLoading
        binding.itemNotesEditText.isEnabled = !isLoading
        binding.addItemButton.isEnabled = !isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\CollectionDetailsFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.content.ContextCompat
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import androidx.recyclerview.widget.LinearLayoutManager
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.adapters.CollectionItemAdapter
import com.example.finalproject.adapters.CommentAdapter
import com.example.finalproject.adapters.CollaboratorAdapter
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentCollectionDetailsBinding
import com.example.finalproject.models.Collection
import com.example.finalproject.models.CollectionComment
import com.example.finalproject.models.CollectionItemEntry
import com.example.finalproject.models.request.CreateCommentRequest
import com.example.finalproject.models.responce.PagedResponse
import com.example.finalproject.models.User
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class CollectionDetailsFragment : Fragment() {

    private var _binding: FragmentCollectionDetailsBinding? = null
    private val binding get() = _binding!!

    private val args: CollectionDetailsFragmentArgs by navArgs()

    private lateinit var itemsAdapter: CollectionItemAdapter
    private lateinit var commentsAdapter: CommentAdapter
    private lateinit var collaboratorAdapter: CollaboratorAdapter

    private var currentCollection: Collection? = null
    private var isLikedByCurrentUser: Boolean = false

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentCollectionDetailsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupAdapters()
        fetchCollectionDetails(args.collectionId)

        binding.fabLikeCollection.setOnClickListener {
            handleLikeClicked()
        }
        binding.postCommentButton.setOnClickListener {
            postComment()
        }
        binding.fabAddItemToCollection.setOnClickListener {
            currentCollection?.collectionId?.let { collId ->
                val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToAddItemFragment(collId)
                findNavController().navigate(action)
            }
        }
    }

    private fun setupAdapters() {
        itemsAdapter = CollectionItemAdapter { itemEntry ->
            val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToMediaItemDetailsFragment(itemEntry.mediaItem.itemId)
            findNavController().navigate(action)
        }
        binding.collectionItemsRecyclerView.apply {
            adapter = itemsAdapter
            layoutManager = LinearLayoutManager(context)
            isNestedScrollingEnabled = false
        }

        commentsAdapter = CommentAdapter { userId ->
            userId?.let {
                val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToUserProfileFragment(it.toLong())
                findNavController().navigate(action)
            }
        }
        binding.commentsRecyclerView.apply {
            adapter = commentsAdapter
            layoutManager = LinearLayoutManager(context)
            isNestedScrollingEnabled = false
        }

        collaboratorAdapter = CollaboratorAdapter { user ->
            user.userId?.let { collaboratorUserId ->
                val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToUserProfileFragment(collaboratorUserId)
                findNavController().navigate(action)
            }
        }
        binding.collaboratorsRecyclerView.apply {
            adapter = collaboratorAdapter
            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
            isNestedScrollingEnabled = false
        }
    }

    private fun fetchCollectionDetails(collectionId: Long) {
        setLoading(true)
        RetrofitClient.instance.getCollectionById(collectionId)
            .enqueue(object : Callback<Collection> {
                override fun onResponse(call: Call<Collection>, response: Response<Collection>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { collection ->
                            currentCollection = collection
                            displayCollectionDetails(collection)
                            updateLikeButtonState()
                            fetchAdditionalData(collection)
                        } ?: handleApiError(getString(R.string.error_loading_collection_details) + " (пустой ответ)")
                    } else {
                        handleApiError("Ошибка ${response.code()}: ${response.message()}")
                    }
                }

                override fun onFailure(call: Call<Collection>, t: Throwable) {
                    setLoading(false)
                    handleApiError(getString(R.string.network_error) + ": ${t.localizedMessage}")
                    Log.e("CollectionDetails", "API Failure", t)
                }
            })
    }

    private fun fetchAdditionalData(collection: Collection) {
        if (collection.items.isNullOrEmpty()) {
            fetchItems(collection.collectionId)
        } else {
            itemsAdapter.submitList(collection.items)
        }
        fetchComments(collection.collectionId)

        if (!collection.collaborators.isNullOrEmpty()) {
            binding.collaboratorsTitle.isVisible = true
            binding.collaboratorsRecyclerView.isVisible = true
            binding.divider3.isVisible = true
            collaboratorAdapter.submitList(collection.collaborators)
        } else {
            binding.collaboratorsTitle.isVisible = false
            binding.collaboratorsRecyclerView.isVisible = false
            binding.divider3.isVisible = false
        }
    }


    private fun fetchItems(collectionId: Long) {
        RetrofitClient.instance.getCollectionItems(collectionId)
            .enqueue(object : Callback<PagedResponse<CollectionItemEntry>> {
                override fun onResponse(call: Call<PagedResponse<CollectionItemEntry>>, response: Response<PagedResponse<CollectionItemEntry>>) {
                    if (response.isSuccessful) {
                        response.body()?.content?.let { itemsAdapter.submitList(it) }
                    } else {
                        Log.e("CollectionDetails", "Error fetching items: ${response.code()}")
                    }
                }
                override fun onFailure(call: Call<PagedResponse<CollectionItemEntry>>, t: Throwable) {
                    Log.e("CollectionDetails", "Failure fetching items", t)
                }
            })
    }

    private fun fetchComments(collectionId: Long) {
        RetrofitClient.instance.getCollectionComments(collectionId)
            .enqueue(object : Callback<PagedResponse<CollectionComment>> {
                override fun onResponse(call: Call<PagedResponse<CollectionComment>>, response: Response<PagedResponse<CollectionComment>>) {
                    if (response.isSuccessful) {
                        response.body()?.content?.let { commentsAdapter.submitList(it) }
                    } else {
                        Log.e("CollectionDetails", "Error fetching comments: ${response.code()}")
                    }
                }
                override fun onFailure(call: Call<PagedResponse<CollectionComment>>, t: Throwable) {
                    Log.e("CollectionDetails", "Failure fetching comments", t)
                }
            })
    }


    private fun displayCollectionDetails(collection: Collection) {
        binding.collectionDetailTitle.text = collection.title
        val authorName = collection.owner?.displayName ?: collection.owner?.username ?: getString(R.string.unknown_author)
        binding.collectionDetailAuthor.text = getString(R.string.author_prefix, authorName)
        binding.collectionDetailAuthor.setOnClickListener {
            collection.owner?.userId?.let { userId ->
                Toast.makeText(context, "Открыть профиль автора ID: $userId", Toast.LENGTH_SHORT).show()
                val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToUserProfileFragment(userId)
                findNavController().navigate(action)
            }
        }

        binding.collectionDetailDescription.text = collection.description
        binding.collectionDetailDescription.isVisible = !collection.description.isNullOrEmpty()

        binding.collectionDetailLikesCount.text = formatCount(collection.likeCount ?: 0)
        binding.collectionDetailViewsCount.text = formatCount(collection.viewCount ?: 0)
        binding.collectionDetailCommentsCount.text = (collection.commentCount ?: 0).toString()

        Glide.with(this)
            .load(collection.coverImageUrl)
            .placeholder(R.drawable.ic_launcher_background)
            .error(R.drawable.ic_image_placeholder_24)
            .into(binding.collectionDetailCoverImage)

        collection.items?.let { itemsAdapter.submitList(it) }
    }

    private fun handleLikeClicked() {
        val collectionId = currentCollection?.collectionId ?: return
        setLikeButtonLoading(true)

        val call = if (isLikedByCurrentUser) {
            RetrofitClient.instance.unlikeCollection(collectionId)
        } else {
            RetrofitClient.instance.likeCollection(collectionId)
        }

        call.enqueue(object : Callback<ResponseBody> {
            override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                setLikeButtonLoading(false)
                if (response.isSuccessful) {
                    isLikedByCurrentUser = !isLikedByCurrentUser
                    updateLikeButtonState()
                    val currentLikes = currentCollection?.likeCount ?: 0
                    val newLikes = if (isLikedByCurrentUser) currentLikes + 1 else maxOf(0, currentLikes - 1)
                    binding.collectionDetailLikesCount.text = formatCount(newLikes)
                    currentCollection = currentCollection?.copy(likeCount = newLikes)
                } else {
                    Toast.makeText(context, "Ошибка при ${if(isLikedByCurrentUser) "снятии" else "установке"} лайка", Toast.LENGTH_SHORT).show()
                }
            }
            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                setLikeButtonLoading(false)
                Toast.makeText(context, "Сетевая ошибка при лайке", Toast.LENGTH_SHORT).show()
            }
        })
    }

    private fun postComment() {
        val commentText = binding.commentEditText.text.toString().trim()
        if (commentText.isEmpty()) {
            binding.commentInputLayout.error = "Комментарий не может быть пустым"
            return
        }
        binding.commentInputLayout.error = null
        val collectionId = currentCollection?.collectionId ?: return

        setCommentButtonLoading(true)
        val request = CreateCommentRequest(commentText)
        RetrofitClient.instance.addCollectionComment(collectionId, request)
            .enqueue(object : Callback<CollectionComment>{
                override fun onResponse(call: Call<CollectionComment>, response: Response<CollectionComment>) {
                    setCommentButtonLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { newComment ->
                            val currentComments = commentsAdapter.currentList.toMutableList()
                            currentComments.add(0, newComment)
                            commentsAdapter.submitList(currentComments)
                            binding.commentsRecyclerView.scrollToPosition(0)
                            binding.commentEditText.text = null
                            Toast.makeText(context, getString(R.string.comment_posted_successfully), Toast.LENGTH_SHORT).show()
                            val currentCommentCount = currentCollection?.commentCount ?: 0
                            binding.collectionDetailCommentsCount.text = (currentCommentCount + 1).toString()
                            currentCollection = currentCollection?.copy(commentCount = currentCommentCount + 1)
                        }
                    } else {
                        Toast.makeText(context, getString(R.string.error_posting_comment) + ": ${response.code()}", Toast.LENGTH_SHORT).show()
                    }
                }
                override fun onFailure(call: Call<CollectionComment>, t: Throwable) {
                    setCommentButtonLoading(false)
                    Toast.makeText(context, getString(R.string.network_error), Toast.LENGTH_SHORT).show()
                }
            })
    }

    private fun updateLikeButtonState() {
        if (isLikedByCurrentUser) {
            binding.fabLikeCollection.setImageResource(R.drawable.ic_like_filled_24)
            binding.fabLikeCollection.imageTintList = ContextCompat.getColorStateList(requireContext(), R.color.color_liked)
        } else {
            binding.fabLikeCollection.setImageResource(R.drawable.ic_like_outline_24)
            binding.fabLikeCollection.imageTintList = ContextCompat.getColorStateList(requireContext(), R.color.white)
        }
    }
    private fun setLikeButtonLoading(isLoading: Boolean) {
        binding.fabLikeCollection.isEnabled = !isLoading
    }
    private fun setCommentButtonLoading(isLoading: Boolean) {
        binding.postCommentButton.isEnabled = !isLoading
        binding.commentEditText.isEnabled = !isLoading
    }

    private fun setLoading(isLoading: Boolean) {
        binding.collectionDetailProgressBar.isVisible = isLoading
    }

    private fun handleApiError(errorMessage: String) {
        Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
    }

    private fun formatCount(count: Int): String {
        return when {
            count >= 1_000_000 -> String.format("%.1fM", count / 1_000_000.0)
            count >= 1_000 -> String.format("%.1fK", count / 1_000.0)
            else -> count.toString()
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        binding.collectionItemsRecyclerView.adapter = null
        binding.commentsRecyclerView.adapter = null
        binding.collaboratorsRecyclerView.adapter = null
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\EditCollectionFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentCreateCollectionBinding
import com.example.finalproject.models.Collection
import com.example.finalproject.models.request.CreateCollectionRequest
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class EditCollectionFragment : Fragment() {

    private var _binding: FragmentCreateCollectionBinding? = null
    private val binding get() = _binding!!

    // TODO: Add argument for collectionId if implementing edit mode
    // private val args: EditCollectionFragmentArgs by navArgs()
    // private var isEditMode = false
    // private var existingCollectionId: Int? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentCreateCollectionBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // TODO: Check for edit mode arguments
        // arguments?.let {
        //     existingCollectionId = EditCollectionFragmentArgs.fromBundle(it).collectionId (if -1, then create mode)
        //     if (existingCollectionId != -1 && existingCollectionId != 0) { // Assuming -1 or 0 means not provided for edit
        //         isEditMode = true
        //         setupEditMode()
        //         fetchCollectionDetails(existingCollectionId!!)
        //     } else {
        //         setupCreateMode()
        //     }
        // } ?: setupCreateMode()
        setupCreateMode()

        binding.createCollectionButton.setOnClickListener {
            if (AuthTokenProvider.isAuthenticated()) {
                handleCreateCollection()
            } else {
                Toast.makeText(context, R.string.please_login_to_see_collections, Toast.LENGTH_SHORT).show()
                // Optionally navigate to login
                // findNavController().navigate(R.id.login)
            }
        }
    }

    private fun setupCreateMode() {
        binding.createCollectionHeaderTitle.text = getString(R.string.create_collection_title_toolbar)
        binding.createCollectionButton.text = getString(R.string.button_create_collection)
    }

    // private fun setupEditMode() {
    //     binding.createCollectionHeaderTitle.text = getString(R.string.edit_collection_title_toolbar)
    //     binding.createCollectionButton.text = getString(R.string.button_save_changes)
    // }

    // private fun fetchCollectionDetails(collectionId: Int) {
    //     setLoading(true)
    //
    // }

    private fun handleCreateCollection() {
        val title = binding.titleEditText.text.toString().trim()
        val description = binding.descriptionEditText.text.toString().trim().ifEmpty { null }
        val coverImageUrl = binding.coverUrlEditText.text.toString().trim().ifEmpty { null }
        val isPublic = binding.isPublicSwitch.isChecked

        if (title.isEmpty()) {
            binding.titleTextInputLayout.error = getString(R.string.error_collection_title_required)
            return
        } else {
            binding.titleTextInputLayout.error = null
        }

        setLoading(true)

        val createRequest = CreateCollectionRequest(title, description, coverImageUrl, isPublic)
        RetrofitClient.instance.createCollection(createRequest)
            .enqueue(object : Callback<Collection> {
                override fun onResponse(call: Call<Collection>, response: Response<Collection>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        val newCollection = response.body()
                        Toast.makeText(context, getString(R.string.collection_created_successfully), Toast.LENGTH_SHORT).show()
                        Log.d("EditCollectionFragment", "Collection created: ${newCollection?.title}")
                        findNavController().popBackStack()
                        // newCollection?.collectionId?.let {
                        //     val action = EditCollectionFragmentDirections.actionCreateCollectionFragmentToCollectionDetailsFragment(it)
                        //     findNavController().navigate(action)
                        // }
                    } else {
                        val errorMsg = response.errorBody()?.string() ?: getString(R.string.error_creating_collection)
                        Toast.makeText(context, "${getString(R.string.error_creating_collection)}: ${response.code()} $errorMsg", Toast.LENGTH_LONG).show()
                        Log.e("EditCollectionFragment", "API Error ${response.code()}: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<Collection>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "${getString(R.string.network_error)}: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("EditCollectionFragment", "Network Failure", t)
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.createCollectionProgressBar.isVisible = isLoading
        binding.titleEditText.isEnabled = !isLoading
        binding.descriptionEditText.isEnabled = !isLoading
        binding.coverUrlEditText.isEnabled = !isLoading
        binding.isPublicSwitch.isEnabled = !isLoading
        binding.createCollectionButton.isEnabled = !isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\HomeFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.finalproject.R
import com.example.finalproject.adapters.CollectionAdapter
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentHomeBinding
import com.example.finalproject.models.Collection
import com.example.finalproject.models.responce.PagedResponse
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class HomeFragment : Fragment() {

    private var _binding: FragmentHomeBinding? = null
    private val binding get() = _binding!!

    private lateinit var collectionAdapter: CollectionAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentHomeBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setupRecyclerView()
        fetchPublicCollections()
    }

    private fun setupRecyclerView() {
        collectionAdapter = CollectionAdapter { collection ->
            Toast.makeText(context, "Переход к коллекции: ${collection.title}", Toast.LENGTH_SHORT).show()
            Log.d("HomeFragment", "Clicked collection ID: ${collection.collectionId}")
            val action = HomeFragmentDirections.actionHomeFragmentToCollectionDetailsFragment(collection.collectionId)
            findNavController().navigate(action)
        }
        binding.collectionsRecyclerView.apply {
            adapter = collectionAdapter
            layoutManager = LinearLayoutManager(context)
        }
    }

    private fun fetchPublicCollections() {
        setLoading(true)
        binding.emptyViewText.isVisible = false

        RetrofitClient.instance.getPublicCollections(size = 10)
            .enqueue(object : Callback<PagedResponse<Collection>> {
                override fun onResponse(call: Call<PagedResponse<Collection>>, response: Response<PagedResponse<Collection>>) {
                    if (!isAdded || _binding == null) {
                        return
                    }
                    setLoading(false)
                    if (response.isSuccessful) {
                        val pagedResponse = response.body()
                        if (pagedResponse != null) {
                            val collections = pagedResponse.content
                            if (collections.isNotEmpty()) {
                                collectionAdapter.submitList(collections)
                                binding.collectionsRecyclerView.isVisible = true
                                Log.d("HomeFragment", "Loaded page ${pagedResponse.number + 1} of ${pagedResponse.totalPages}")
                            } else {
                                binding.collectionsRecyclerView.isVisible = false
                                binding.emptyViewText.text = getString(R.string.no_collections_found)
                                binding.emptyViewText.isVisible = true
                            }
                        } else {
                            handleApiError(getString(R.string.error_loading_collections) + " (пустой ответ)")
                        }
                    } else {
                        handleApiError("Ошибка ${response.code()}: ${response.message()}")
                    }
                }

                override fun onFailure(call: Call<PagedResponse<Collection>>, t: Throwable) {
                    if (!isAdded || _binding == null) {
                        return
                    }
                    setLoading(false)
                    handleApiError(getString(R.string.network_error) + ": ${t.localizedMessage}")
                    Log.e("HomeFragment", "API Failure", t)
                }
            })
    }

    private fun handleApiError(errorMessage: String) {
        _binding?.let { b ->
            b.collectionsRecyclerView.isVisible = false
            b.emptyViewText.text = errorMessage
            b.emptyViewText.isVisible = true
        }
        if (isAdded) {
            Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
        }
    }


    private fun setLoading(isLoading: Boolean) {
        _binding?.let { b ->
            b.homeProgressBar.isVisible = isLoading
            val adapterItemCount = b.collectionsRecyclerView.adapter?.itemCount ?: 0
            b.collectionsRecyclerView.isVisible = !isLoading && adapterItemCount > 0
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding?.collectionsRecyclerView?.adapter = null
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\MyCollectionsFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.finalproject.R
import com.example.finalproject.adapters.CollectionAdapter
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentMyCollectionsBinding
import com.example.finalproject.models.Collection
import com.example.finalproject.models.responce.PagedResponse
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class MyCollectionsFragment : Fragment() {

    private var _binding: FragmentMyCollectionsBinding? = null
    private val binding get() = _binding!!

    private lateinit var collectionAdapter: CollectionAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentMyCollectionsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        if (!AuthTokenProvider.isAuthenticated()) {
            showNotAuthenticatedState()
            return
        }

        setupRecyclerView()
        fetchMyCollections()

        binding.fabCreateCollection.setOnClickListener {
            try {
                // Используем ID из nav_graph, так как CreateCollectionFragment не принимает аргументов
                // и у него может не быть сгенерированного action в MyCollectionsFragmentDirections
                // Если action есть, то лучше:
                // findNavController().navigate(MyCollectionsFragmentDirections.actionMyCollectionsFragmentToCreateCollectionFragment())
                findNavController().navigate(R.id.createCollectionFragment)
            } catch (e: Exception) {
                Toast.makeText(context, getString(R.string.error_cannot_create_collection) + ": ${e.localizedMessage}", Toast.LENGTH_SHORT).show()
                Log.e("MyCollectionsFragment", "Navigation to createCollectionFragment failed", e)
            }
        }
    }

    private fun showNotAuthenticatedState() {
        Log.w("MyCollectionsFragment", "User not authenticated. Cannot load collections.")
        binding.myCollectionsEmptyViewText.text = getString(R.string.please_login_to_see_collections)
        binding.myCollectionsEmptyViewText.isVisible = true
        binding.myCollectionsRecyclerView.isVisible = false
        binding.myCollectionsProgressBar.isVisible = false
        binding.fabCreateCollection.isEnabled = false // Деактивируем кнопку создания
        Toast.makeText(context, getString(R.string.please_login_to_see_collections), Toast.LENGTH_LONG).show()
    }

    private fun setupRecyclerView() {
        collectionAdapter = CollectionAdapter { collection ->
            Log.d("MyCollectionsFragment", "Clicked collection ID: ${collection.collectionId}")
            try {
                val action = MyCollectionsFragmentDirections.actionMyCollectionsFragmentToCollectionDetailsFragment(collection.collectionId)
                findNavController().navigate(action)
            } catch (e: Exception) {
                Toast.makeText(context, getString(R.string.error_cannot_open_collection_details) + ": ${e.localizedMessage}", Toast.LENGTH_SHORT).show()
                Log.e("MyCollectionsFragment", "Navigation to CollectionDetailsFragment failed", e)
            }
        }
        binding.myCollectionsRecyclerView.apply {
            adapter = collectionAdapter
            layoutManager = LinearLayoutManager(context)
        }
    }

    private fun fetchMyCollections() {
        setLoading(true)
        binding.myCollectionsEmptyViewText.isVisible = false

        RetrofitClient.instance.getMyCollections(size = 20) // Загружаем до 20 коллекций на страницу
            .enqueue(object : Callback<PagedResponse<Collection>> {
                override fun onResponse(call: Call<PagedResponse<Collection>>, response: Response<PagedResponse<Collection>>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        val pagedResponse = response.body()
                        if (pagedResponse != null) {
                            val collections = pagedResponse.content
                            if (collections.isNotEmpty()) {
                                collectionAdapter.submitList(collections)
                                binding.myCollectionsRecyclerView.isVisible = true
                            } else {
                                binding.myCollectionsRecyclerView.isVisible = false
                                binding.myCollectionsEmptyViewText.text = getString(R.string.no_my_collections_found)
                                binding.myCollectionsEmptyViewText.isVisible = true
                            }
                        } else {
                            handleApiError(getString(R.string.error_loading_my_collections) + " (пустой ответ)")
                        }
                    } else {
                        if (response.code() == 401) { // Unauthorized
                            Toast.makeText(context, "Сессия истекла. Пожалуйста, войдите снова.", Toast.LENGTH_LONG).show()
                            AuthTokenProvider.clearAuthData()
                            // Можно добавить автоматический переход на экран логина
                            // (activity as? MainActivity)?.navController?.navigate(R.id.login)
                            showNotAuthenticatedState() // Показать состояние "не авторизован"
                        } else {
                            handleApiError("Ошибка ${response.code()}: ${response.message()}")
                        }
                    }
                }

                override fun onFailure(call: Call<PagedResponse<Collection>>, t: Throwable) {
                    setLoading(false)
                    handleApiError(getString(R.string.network_error) + ": ${t.localizedMessage}")
                    Log.e("MyCollectionsFragment", "API Failure", t)
                }
            })
    }

    private fun handleApiError(errorMessage: String) {
        Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
        binding.myCollectionsRecyclerView.isVisible = false
        if (binding.myCollectionsEmptyViewText.text.toString() == getString(R.string.no_my_collections_found) ||
            binding.myCollectionsEmptyViewText.text.toString() == getString(R.string.please_login_to_see_collections)) {
            // Не перезаписываем сообщение о пустом списке или необходимости логина, если это была API ошибка
        } else {
            binding.myCollectionsEmptyViewText.text = errorMessage
        }
        binding.myCollectionsEmptyViewText.isVisible = true
    }

    private fun setLoading(isLoading: Boolean) {
        binding.myCollectionsProgressBar.isVisible = isLoading
        if (!isLoading) {
            // Показываем RecyclerView только если есть элементы и загрузка завершена
            binding.myCollectionsRecyclerView.isVisible = collectionAdapter.itemCount > 0
        } else {
            binding.myCollectionsRecyclerView.isVisible = false
        }
        binding.fabCreateCollection.isEnabled = !isLoading
    }

    override fun onResume() {
        super.onResume()
        // Если пользователь мог разлогиниться или залогиниться на другом экране,
        // и мы возвращаемся сюда, стоит проверить аутентификацию и перезагрузить данные.
        if (AuthTokenProvider.isAuthenticated() && collectionAdapter.itemCount == 0) {
            // Если авторизован, но список пуст (например, после возврата с экрана логина)
            fetchMyCollections()
        } else if (!AuthTokenProvider.isAuthenticated()) {
            showNotAuthenticatedState()
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        binding.myCollectionsRecyclerView.adapter = null // Очистка адаптера
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\mediaitem\EditMediaItemFragment.kt
###############################################################################

package com.example.finalproject.fragments.mediaitem

import android.net.ParseException
import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.core.widget.doOnTextChanged
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentEditMediaItemBinding
import com.example.finalproject.models.MediaItem
import com.example.finalproject.models.request.UpdateMediaItemRequest
import com.example.finalproject.utils.AuthTokenProvider // Для проверки прав
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.SimpleDateFormat
import java.util.Locale

class EditMediaItemFragment : Fragment() {

    private var _binding: FragmentEditMediaItemBinding? = null
    private val binding get() = _binding!!

    private val args: EditMediaItemFragmentArgs by navArgs()
    private var mediaItemIdToEdit: Long = -1L
    private var currentMediaItemData: MediaItem? = null

    // Формат для парсинга и отображения даты релиза
    private val releaseDateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.US)


    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentEditMediaItemBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        mediaItemIdToEdit = args.mediaItemId

        if (mediaItemIdToEdit == -1L) {
            Toast.makeText(context, "Ошибка: ID медиа-элемента не передан.", Toast.LENGTH_LONG).show()
            Log.e("EditMediaItemFragment", "MediaItem ID is missing.")
            findNavController().popBackStack()
            return
        }

        // TODO: Более строгая проверка прав на редактирование, если MediaItem не привязан к пользователю напрямую
        if (!AuthTokenProvider.isAuthenticated()) {
            Toast.makeText(context, "Необходимо авторизоваться для редактирования.", Toast.LENGTH_LONG).show()
            findNavController().popBackStack()
            return
        }

        loadMediaItemData()

        binding.saveMediaItemButton.setOnClickListener {
            handleUpdateMediaItem()
        }

        binding.thumbnailUrlEditMediaTextField.doOnTextChanged { text, _, _, _ ->
            Glide.with(this)
                .load(text.toString().trim())
                .placeholder(R.drawable.ic_image_placeholder_24)
                .error(R.drawable.ic_image_placeholder_24)
                .into(binding.editMediaItemThumbnailPreview)
        }
    }

    private fun loadMediaItemData() {
        setLoading(true)
        RetrofitClient.instance.getMediaItemById(mediaItemIdToEdit)
            .enqueue(object : Callback<MediaItem> {
                override fun onResponse(call: Call<MediaItem>, response: Response<MediaItem>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let {
                            currentMediaItemData = it
                            populateFields(it)
                        } ?: run {
                            Toast.makeText(context, getString(R.string.media_item_not_found), Toast.LENGTH_LONG).show()
                            findNavController().popBackStack()
                        }
                    } else {
                        Toast.makeText(context, "${getString(R.string.error_loading_media_item_details)}: ${response.code()}", Toast.LENGTH_LONG).show()
                        Log.e("EditMediaItemFragment", "Error loading media item ${response.code()}: ${response.message()}")
                        findNavController().popBackStack()
                    }
                }

                override fun onFailure(call: Call<MediaItem>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "${getString(R.string.network_error)}: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("EditMediaItemFragment", "Network failure loading media item", t)
                    findNavController().popBackStack()
                }
            })
    }

    private fun populateFields(item: MediaItem) {
        binding.titleEditMediaTextField.setText(item.title)
        binding.creatorEditMediaTextField.setText(item.creator ?: "")
        binding.descriptionEditMediaTextField.setText(item.description ?: "")
        binding.thumbnailUrlEditMediaTextField.setText(item.thumbnailUrl ?: "")
        binding.externalUrlEditMediaTextField.setText(item.externalUrl ?: "")
        binding.releaseDateEditMediaTextField.setText(item.releaseDate ?: "")


        Glide.with(this)
            .load(item.thumbnailUrl)
            .placeholder(R.drawable.ic_image_placeholder_24)
            .error(R.drawable.ic_image_placeholder_24)
            .into(binding.editMediaItemThumbnailPreview)
    }

    private fun handleUpdateMediaItem() {
        val title = binding.titleEditMediaTextField.text.toString().trim()
        if (title.isEmpty()) {
            binding.titleEditMediaLayout.error = getString(R.string.error_media_item_title_required)
            return
        } else {
            binding.titleEditMediaLayout.error = null
        }

        val creator = binding.creatorEditMediaTextField.text.toString().trim().ifEmpty { null }
        val description = binding.descriptionEditMediaTextField.text.toString().trim().ifEmpty { null }
        val thumbnailUrl = binding.thumbnailUrlEditMediaTextField.text.toString().trim().ifEmpty { null }
        val externalUrl = binding.externalUrlEditMediaTextField.text.toString().trim().ifEmpty { null }
        var releaseDateString = binding.releaseDateEditMediaTextField.text.toString().trim().ifEmpty { null }

        // Простая валидация формата даты, если введена
        if (releaseDateString != null) {
            try {
                releaseDateFormat.isLenient = false
                releaseDateFormat.parse(releaseDateString) // Просто проверяем парсинг
            } catch (e: ParseException) {
                binding.releaseDateEditMediaLayout.error = "Неверный формат даты (гггг-мм-дд)"
                return
            }
            binding.releaseDateEditMediaLayout.error = null
        }


        // TODO: Проверка, изменилось ли что-то

        setLoading(true)

        val updateRequest = UpdateMediaItemRequest(
            title = title,
            creator = creator,
            description = description,
            thumbnailUrl = thumbnailUrl,
            externalUrl = externalUrl,
            releaseDate = releaseDateString
        )

        RetrofitClient.instance.updateMediaItem(mediaItemIdToEdit, updateRequest)
            .enqueue(object : Callback<MediaItem> {
                override fun onResponse(call: Call<MediaItem>, response: Response<MediaItem>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { updatedItem ->
                            Toast.makeText(context, getString(R.string.media_item_updated_successfully), Toast.LENGTH_SHORT).show()
                            Log.d("EditMediaItemFragment", "MediaItem updated: ${updatedItem.title}")
                            // Можно передать результат обратно, если MediaItemDetailsFragment должен обновиться
                            // setFragmentResult(...)
                            findNavController().popBackStack()
                        } ?: Toast.makeText(context, getString(R.string.error_updating_media_item) + " (пустой ответ)", Toast.LENGTH_LONG).show()
                    } else {
                        val errorMsg = response.errorBody()?.string() ?: getString(R.string.error_updating_media_item)
                        Toast.makeText(context, "${getString(R.string.error_updating_media_item)}: ${response.code()} $errorMsg", Toast.LENGTH_LONG).show()
                        Log.e("EditMediaItemFragment", "API Error ${response.code()}: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<MediaItem>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "${getString(R.string.network_error)}: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("EditMediaItemFragment", "Network Failure", t)
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.editMediaItemProgressBar.isVisible = isLoading
        binding.titleEditMediaTextField.isEnabled = !isLoading
        binding.creatorEditMediaTextField.isEnabled = !isLoading
        binding.descriptionEditMediaTextField.isEnabled = !isLoading
        binding.thumbnailUrlEditMediaTextField.isEnabled = !isLoading
        binding.externalUrlEditMediaTextField.isEnabled = !isLoading
        binding.releaseDateEditMediaTextField.isEnabled = !isLoading
        binding.saveMediaItemButton.isEnabled = !isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\mediaitem\MediaItemDetailsFragment.kt
###############################################################################

package com.example.finalproject.fragments.mediaitem

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.isVisible
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentMediaItemDetailsBinding
import com.example.finalproject.models.MediaItem
import com.example.finalproject.utils.AuthTokenProvider
import com.google.android.material.chip.Chip
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.Locale
import java.util.TimeZone

class MediaItemDetailsFragment : Fragment() {

    private var _binding: FragmentMediaItemDetailsBinding? = null
    private val binding get() = _binding!!

    private val args: MediaItemDetailsFragmentArgs by navArgs()
    private var currentMediaItem: MediaItem? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentMediaItemDetailsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupToolbar()
        fetchMediaItemDetails(args.mediaItemId)

        binding.fabEditMediaItem.setOnClickListener {
            currentMediaItem?.let {
                // TODO: Проверить права пользователя на редактирование этого MediaItem
                // Например, если есть поле createdByUserId в MediaItem и оно совпадает с AuthTokenProvider.getCurrentUser()?.userId
                // Для простоты, пока разрешаем редактирование, если залогинен.
                // В реальном приложении нужна более строгая проверка прав.
                if (AuthTokenProvider.isAuthenticated()) {
                    val action = MediaItemDetailsFragmentDirections.actionMediaItemDetailsFragmentToEditMediaItemFragment(it.itemId)
                    findNavController().navigate(action)
                } else {
                    Toast.makeText(context, "Только авторизованные пользователи могут редактировать", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    private fun setupToolbar() {
        (activity as? AppCompatActivity)?.setSupportActionBar(binding.toolbarMediaDetails)
        (activity as? AppCompatActivity)?.supportActionBar?.setDisplayHomeAsUpEnabled(true)
        binding.toolbarMediaDetails.setNavigationOnClickListener {
            findNavController().popBackStack()
        }
    }

    private fun fetchMediaItemDetails(itemId: Long) {
        setLoading(true)
        RetrofitClient.instance.getMediaItemById(itemId).enqueue(object : Callback<MediaItem> {
            override fun onResponse(call: Call<MediaItem>, response: Response<MediaItem>) {
                setLoading(false)
                if (response.isSuccessful) {
                    response.body()?.let {
                        currentMediaItem = it
                        displayMediaItemDetails(it)
                    } ?: showError(getString(R.string.media_item_not_found))
                } else {
                    showError("${getString(R.string.error_loading_media_item_details)}: ${response.code()}")
                }
            }

            override fun onFailure(call: Call<MediaItem>, t: Throwable) {
                setLoading(false)
                showError("${getString(R.string.network_error)}: ${t.message}")
                Log.e("MediaItemDetails", "API Failure", t)
            }
        })
    }

    private fun displayMediaItemDetails(item: MediaItem) {
        binding.collapsingToolbarLayoutMediaDetails.title = item.title
        binding.toolbarMediaDetails.title = item.title

        binding.mediaItemDetailTitleText.text = item.title
        binding.mediaItemDetailCreatorText.text = item.creator ?: getString(R.string.unknown_author)
        binding.mediaItemDetailTypeText.text = item.contentType?.typeName ?: "N/A"
        binding.mediaItemDetailDescriptionText.text = item.description ?: "Описание отсутствует."

        binding.mediaItemDetailReleaseDateText.text = formatDate(item.releaseDate, "yyyy-MM-dd") ?: "Не указана"
        binding.mediaItemDetailAddedAtText.text = formatDate(item.addedAt) ?: "Неизвестно"

        Glide.with(this)
            .load(item.thumbnailUrl)
            .placeholder(R.drawable.ic_image_placeholder_24)
            .error(R.drawable.ic_image_placeholder_24)
            .into(binding.mediaItemDetailThumbnail)

        if (!item.externalUrl.isNullOrBlank()) {
            binding.buttonOpenExternalUrl.isVisible = true
            binding.buttonOpenExternalUrl.setOnClickListener {
                try {
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(item.externalUrl))
                    startActivity(intent)
                } catch (e: Exception) {
                    Toast.makeText(context, getString(R.string.cannot_open_url), Toast.LENGTH_SHORT).show()
                }
            }
        } else {
            binding.buttonOpenExternalUrl.isVisible = false
        }

        binding.mediaItemDetailTagsChipGroup.removeAllViews()
        if (!item.tags.isNullOrEmpty()) {
            binding.mediaItemDetailTagsChipGroup.isVisible = true
            item.tags.forEach { tag ->
                val chip = Chip(context)
                chip.text = tag.tagName
                // chip.isClickable = true // Если хотите сделать теги кликабельными для поиска по тегу
                // chip.setOnClickListener { /* TODO: Navigate to search by tag */ }
                binding.mediaItemDetailTagsChipGroup.addView(chip)
            }
        } else {
            binding.mediaItemDetailTagsChipGroup.isVisible = false
        }

        // Показать кнопку редактирования, если есть права (здесь упрощенная проверка)
        // TODO: Реализуйте более надежную проверку прав, если это необходимо (например, на основе createdByUserId)
        binding.fabEditMediaItem.isVisible = AuthTokenProvider.isAuthenticated()
    }

    private fun formatDate(dateString: String?, inputPattern: String = "yyyy-MM-dd'T'HH:mm:ss"): String? {
        if (dateString.isNullOrEmpty()) return null
        val defaultLocale = Locale.getDefault()

        // Список возможных входных форматов, включая те, что могут приходить с OffsetDateTime
        val inputFormats = listOf(
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ", defaultLocale),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ", defaultLocale),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSS", defaultLocale),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", defaultLocale),
            SimpleDateFormat(inputPattern, defaultLocale) // Для дат типа releaseDate
        )
        val outputFormat = SimpleDateFormat("dd MMMM yyyy", defaultLocale) // Более простой формат для отображения

        for (format in inputFormats) {
            if (!dateString.contains("Z") && format.toPattern().endsWith("Z")) {
                // Пропускаем форматы с Z, если в строке нет Z, кроме тех, что явно не содержат смещение
                if(!format.toPattern().contains("'Z'")) continue
            }
            // Даты с сервера могут быть в UTC
            if (format.toPattern().contains("T") && (format.toPattern().endsWith("Z") || dateString.endsWith("Z"))) {
                format.timeZone = TimeZone.getTimeZone("UTC")
            } else if (format.toPattern().contains("T")) { // Если время есть, но нет явного UTC, пробуем как локальное или UTC
                format.timeZone = TimeZone.getTimeZone("UTC") // Пробуем UTC как основной вариант для timestamp
            }


            try {
                val date = format.parse(dateString)
                if (date != null) {
                    outputFormat.timeZone = TimeZone.getDefault() // Форматируем в локальную зону
                    return outputFormat.format(date)
                }
            } catch (e: ParseException) {
                // Log.v("MediaItemDetails", "Date parse failed for $dateString with pattern ${format.toPattern()}")
            }
        }
        Log.w("MediaItemDetails", "Could not parse date: $dateString with known formats.")
        return dateString // Возвращаем исходную строку, если не удалось распарсить
    }


    private fun setLoading(isLoading: Boolean) {
        binding.mediaItemDetailProgressBar.isVisible = isLoading
        binding.mediaItemDetailErrorText.isVisible = false
        // Остальной контент управляется через CollapsingToolbarLayout и NestedScrollView
    }

    private fun showError(message: String) {
        binding.mediaItemDetailErrorText.text = message
        binding.mediaItemDetailErrorText.isVisible = true
        binding.mediaItemDetailProgressBar.isVisible = false
        // Скрыть другие элементы, если нужно
        binding.collapsingToolbarLayoutMediaDetails.isVisible = false
        binding.fabEditMediaItem.isVisible = false
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\mediaitem\MediaItemSearchFragment.kt
###############################################################################

package com.example.finalproject.fragments.mediaitem

import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.appcompat.widget.SearchView
import androidx.core.os.bundleOf
import androidx.core.view.isVisible
import androidx.fragment.app.setFragmentResult
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.finalproject.R
import com.example.finalproject.adapters.MediaItemAdapter
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentMediaItemSearchBinding
import com.example.finalproject.models.MediaItem
import com.example.finalproject.models.responce.PagedResponse
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class MediaItemSearchFragment : Fragment() {

    private var _binding: FragmentMediaItemSearchBinding? = null
    private val binding get() = _binding!!

    private lateinit var mediaItemAdapter: MediaItemAdapter

    companion object {
        const val MEDIA_ITEM_SELECTION_REQUEST_KEY = "mediaItemSelectionRequestKey"
        const val SELECTED_MEDIA_ITEM_ID_KEY = "selectedMediaItemId"
        const val SELECTED_MEDIA_ITEM_TITLE_KEY = "selectedMediaItemTitle" // Опционально
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentMediaItemSearchBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupToolbar()
        setupRecyclerView()
        setupSearchView()
    }

    private fun setupToolbar() {
        binding.toolbar.setNavigationIcon(androidx.appcompat.R.drawable.abc_ic_ab_back_material) // Стандартная иконка назад
        binding.toolbar.setNavigationOnClickListener {
            findNavController().popBackStack()
        }
    }

    private fun setupRecyclerView() {
        mediaItemAdapter = MediaItemAdapter { mediaItem ->
            onMediaItemSelected(mediaItem)
        }
        binding.searchResultsRecyclerView.apply {
            adapter = mediaItemAdapter
            layoutManager = LinearLayoutManager(context)
        }
    }

    private fun onMediaItemSelected(mediaItem: MediaItem) {
        setFragmentResult(MEDIA_ITEM_SELECTION_REQUEST_KEY, bundleOf(
            SELECTED_MEDIA_ITEM_ID_KEY to mediaItem.itemId,
            SELECTED_MEDIA_ITEM_TITLE_KEY to mediaItem.title // Передаем и название для отображения
        ))
        findNavController().popBackStack()
    }

    private fun setupSearchView() {
        binding.mediaItemSearchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
            override fun onQueryTextSubmit(query: String?): Boolean {
                query?.let {
                    if (it.length >= 2) { // Искать, если минимум 2 символа
                        performSearch(it)
                    } else {
                        Toast.makeText(context, "Введите минимум 2 символа для поиска", Toast.LENGTH_SHORT).show()
                    }
                }
                return true
            }

            override fun onQueryTextChange(newText: String?): Boolean {
                // Можно добавить поиск по мере ввода с задержкой (debounce)
                return true
            }
        })
    }

    private fun performSearch(query: String) {
        setLoading(true)
        binding.searchEmptyTextView.isVisible = false
        binding.searchResultsRecyclerView.isVisible = false

        RetrofitClient.instance.searchMediaItems(query = query)
            .enqueue(object : Callback<PagedResponse<MediaItem>> {
                override fun onResponse(
                    call: Call<PagedResponse<MediaItem>>,
                    response: Response<PagedResponse<MediaItem>>
                ) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        val pagedResponse = response.body()
                        val items = pagedResponse?.content
                        if (!items.isNullOrEmpty()) {
                            mediaItemAdapter.submitList(items)
                            binding.searchResultsRecyclerView.isVisible = true
                        } else {
                            binding.searchEmptyTextView.text = "По запросу \"$query\" ничего не найдено."
                            binding.searchEmptyTextView.isVisible = true
                        }
                    } else {
                        Toast.makeText(context, "Ошибка поиска: ${response.code()}", Toast.LENGTH_SHORT).show()
                        Log.e("MediaItemSearch", "API Error: ${response.code()} - ${response.message()}")
                        binding.searchEmptyTextView.text = "Ошибка поиска."
                        binding.searchEmptyTextView.isVisible = true
                    }
                }

                override fun onFailure(call: Call<PagedResponse<MediaItem>>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Сетевая ошибка: ${t.message}", Toast.LENGTH_SHORT).show()
                    Log.e("MediaItemSearch", "Network Failure", t)
                    binding.searchEmptyTextView.text = "Сетевая ошибка."
                    binding.searchEmptyTextView.isVisible = true
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.searchProgressBar.isVisible = isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        binding.searchResultsRecyclerView.adapter = null
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\EditProfileFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.core.widget.doOnTextChanged
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentEditProfileBinding
import com.example.finalproject.models.User
import com.example.finalproject.models.request.UpdateProfileRequest
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class EditProfileFragment : Fragment() {

    private var _binding: FragmentEditProfileBinding? = null
    private val binding get() = _binding!!

    private val args: EditProfileFragmentArgs by navArgs()
    private var userIdToEdit: Long = -1L
    private var currentUserData: User? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentEditProfileBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        userIdToEdit = args.userId

        if (userIdToEdit == -1L || userIdToEdit != AuthTokenProvider.getCurrentUser()?.userId) {
            Toast.makeText(context, "Ошибка: Невозможно редактировать этот профиль.", Toast.LENGTH_LONG).show()
            Log.e("EditProfileFragment", "Attempted to edit profile with invalid userId: $userIdToEdit")
            findNavController().popBackStack()
            return
        }

        loadCurrentProfileData()

        binding.saveProfileButton.setOnClickListener {
            handleUpdateProfile()
        }

        binding.avatarUrlEditTextField.doOnTextChanged { text, _, _, _ ->
            Glide.with(this)
                .load(text.toString())
                .placeholder(R.drawable.ic_profile_24)
                .error(R.drawable.ic_profile_24)
                .circleCrop()
                .into(binding.editProfileAvatarPreview)
        }
    }

    private fun loadCurrentProfileData() {
        setLoading(true)
        currentUserData = AuthTokenProvider.getCurrentUser()

        if (currentUserData == null) {
            setLoading(false)
            Toast.makeText(context, getString(R.string.error_loading_data_for_edit), Toast.LENGTH_LONG).show()
            Log.e("EditProfileFragment", "Could not load current user data from AuthTokenProvider.")
            findNavController().popBackStack()
            return
        }

        populateFields(currentUserData!!)
        setLoading(false)
    }

    private fun populateFields(user: User) {
        binding.displayNameEditTextField.setText(user.displayName ?: "")
        binding.bioEditTextField.setText(user.bio ?: "")
        binding.avatarUrlEditTextField.setText(user.avatarUrl ?: "")

        Glide.with(this)
            .load(user.avatarUrl)
            .placeholder(R.drawable.ic_profile_24)
            .error(R.drawable.ic_profile_24)
            .circleCrop()
            .into(binding.editProfileAvatarPreview)
    }

    private fun handleUpdateProfile() {
        val displayName = binding.displayNameEditTextField.text.toString().trim().ifEmpty { null }
        val bio = binding.bioEditTextField.text.toString().trim().ifEmpty { null }
        val avatarUrl = binding.avatarUrlEditTextField.text.toString().trim().ifEmpty { null }

        if (displayName == currentUserData?.displayName &&
            bio == currentUserData?.bio &&
            avatarUrl == currentUserData?.avatarUrl) {
            Toast.makeText(context, "Нет изменений для сохранения.", Toast.LENGTH_SHORT).show()
            return
        }

        setLoading(true)

        val updateRequest = UpdateProfileRequest(displayName, bio, avatarUrl)

        RetrofitClient.instance.updateMyProfile(updateRequest)
            .enqueue(object : Callback<User> {
                override fun onResponse(call: Call<User>, response: Response<User>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { updatedUser ->
                            AuthTokenProvider.saveUser(updatedUser)
                            Toast.makeText(context, getString(R.string.profile_updated_successfully), Toast.LENGTH_SHORT).show()
                            Log.d("EditProfileFragment", "Profile updated for user: ${updatedUser.username}")
                            findNavController().popBackStack()
                        } ?: run {
                            Toast.makeText(context, getString(R.string.error_updating_profile) + " (пустой ответ)", Toast.LENGTH_LONG).show()
                        }
                    } else {
                        val errorMsg = response.errorBody()?.string() ?: getString(R.string.error_updating_profile)
                        Toast.makeText(context, "${getString(R.string.error_updating_profile)}: ${response.code()} $errorMsg", Toast.LENGTH_LONG).show()
                        Log.e("EditProfileFragment", "API Error ${response.code()}: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<User>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "${getString(R.string.network_error)}: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("EditProfileFragment", "Network Failure", t)
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.editProfileProgressBar.isVisible = isLoading
        binding.displayNameEditTextField.isEnabled = !isLoading
        binding.bioEditTextField.isEnabled = !isLoading
        binding.avatarUrlEditTextField.isEnabled = !isLoading
        binding.saveProfileButton.isEnabled = !isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
        currentUserData = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\ForgotPasswordFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.util.Patterns
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentForgotPasswordBinding
import com.example.finalproject.models.request.ForgotPasswordRequest
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class ForgotPasswordFragment : Fragment() {

    private var _binding: FragmentForgotPasswordBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentForgotPasswordBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.sendButton.setOnClickListener {
            handleForgotPasswordRequest()
        }
    }

    private fun handleForgotPasswordRequest() {
        val email = binding.emailEditText.text.toString().trim()

        if (!isValidEmail(email)) {
            binding.emailTextInputLayout.error = getString(R.string.error_invalid_email)
            return
        } else {
            binding.emailTextInputLayout.error = null
        }

        setLoading(true)

        val forgotPasswordRequest = ForgotPasswordRequest(email)
        RetrofitClient.instance.forgotPassword(forgotPasswordRequest)
            .enqueue(object : Callback<ResponseBody> {
                override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        // Успешный ответ от сервера
                        Toast.makeText(context, "Инструкции по сбросу пароля отправлены на вашу почту.", Toast.LENGTH_LONG).show()
                        // Можно добавить навигацию обратно на экран входа или показать сообщение
                        findNavController().popBackStack() // Вернуться на предыдущий экран (LoginFragment)
                    } else {
                        // Ошибка сервера
                        val errorBody = response.errorBody()?.string() ?: "Неизвестная ошибка сервера"
                        Toast.makeText(context, "Ошибка: ${response.code()} - $errorBody", Toast.LENGTH_LONG).show()
                        Log.e("ForgetPassword", "API Error: ${response.code()} - $errorBody")
                    }
                }

                override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Ошибка сети: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("ForgetPassword", "Network failure", t)
                }
            })
    }

    private fun isValidEmail(email: String): Boolean {
        return Patterns.EMAIL_ADDRESS.matcher(email).matches()
    }

    private fun setLoading(isLoading: Boolean) {
        binding.progressBar.isVisible = isLoading
        binding.sendButton.isEnabled = !isLoading
        binding.emailEditText.isEnabled = !isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\LoginFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.util.Patterns
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentLoginBinding
import com.example.finalproject.models.responce.AuthResponse
import com.example.finalproject.models.request.LoginRequest
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class LoginFragment : Fragment() {

    private var _binding: FragmentLoginBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentLoginBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.loginButton.setOnClickListener {
            handleLogin()
        }

        binding.signUpTextView.setOnClickListener {
            findNavController().navigate(R.id.action_login_to_registration)
        }
    }

    private fun handleLogin() {
        val email = binding.emailEditText.text.toString().trim()
        val password = binding.passwordEditText.text.toString().trim()

        if (!isValidEmail(email)) {
            binding.emailTextInputLayout.error = getString(R.string.error_invalid_email)
            return
        } else {
            binding.emailTextInputLayout.error = null
        }

        if (password.isEmpty()) {
            binding.passwordTextInputLayout.error = getString(R.string.error_empty_password)
            return
        } else {
            binding.passwordTextInputLayout.error = null
        }

        binding.loginButton.isEnabled = false

        val loginRequest = LoginRequest(email, password)
        RetrofitClient.instance.loginUser(loginRequest)
            .enqueue(object : Callback<AuthResponse> {
                override fun onResponse(call: Call<AuthResponse>, response: Response<AuthResponse>) {
                    binding.loginButton.isEnabled = true

                    if (response.isSuccessful) {
                        val authResponse = response.body()
                        if (authResponse != null) {
                            AuthTokenProvider.saveToken(authResponse.token)
                            AuthTokenProvider.saveUser(authResponse.user)

                            Toast.makeText(context, "Вход успешен! Добро пожаловать, ${authResponse.user.displayName ?: authResponse.user.username}", Toast.LENGTH_LONG).show()

                            try {
                                findNavController().navigate(R.id.action_login_to_homeFragment)
                            } catch (e: IllegalArgumentException) {
                                Toast.makeText(context, "Ошибка навигации: ${e.localizedMessage}", Toast.LENGTH_LONG).show()
                                Log.e("LoginFragment", "Navigation error", e)
                            }
                        } else {
                            Toast.makeText(context, "Ошибка входа: Пустой ответ от сервера", Toast.LENGTH_LONG).show()
                        }
                    } else {
                        val errorBody = response.errorBody()?.string() ?: "Неизвестная ошибка сервера"
                        Toast.makeText(context, "Ошибка входа: ${response.code()} - $errorBody", Toast.LENGTH_LONG).show()
                        Log.e("LoginFragment", "Login failed: ${response.code()} - $errorBody")
                    }
                }

                override fun onFailure(call: Call<AuthResponse>, t: Throwable) {
                    binding.loginButton.isEnabled = true
                    Toast.makeText(context, "Ошибка сети: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("LoginFragment", "Network error", t)
                }
            })
    }

    private fun isValidEmail(email: String): Boolean {
        return Patterns.EMAIL_ADDRESS.matcher(email).matches()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\RegistrationFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.util.Patterns
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentRegistrationBinding
import com.example.finalproject.models.responce.AuthResponse
import com.example.finalproject.models.request.RegistrationRequest
// import com.example.finalproject.utils.AuthTokenProvider // Не нужен здесь, т.к. после регистрации обычно перенаправляем на логин
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class RegistrationFragment : Fragment() {

    private var _binding: FragmentRegistrationBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentRegistrationBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.registerButton.setOnClickListener {
            handleRegistration()
        }

        binding.loginNowTextView.setOnClickListener {
            // Переход на экран логина, если пользователь уже имеет аккаунт
            findNavController().navigate(R.id.action_registration_to_login)
        }
    }

    private fun handleRegistration() {
        val username = binding.usernameEditText.text.toString().trim()
        val email = binding.emailEditTextRegister.text.toString().trim()
        val displayName = binding.displayNameEditText.text.toString().trim().let { if (it.isEmpty()) null else it }
        val password = binding.passwordEditTextRegister.text.toString() // Не trim, чтобы не обрезать пробелы в пароле
        val confirmPassword = binding.confirmPasswordEditText.text.toString()

        var isValid = true

        // Валидация имени пользователя
        if (username.isEmpty()) {
            binding.usernameTextInputLayout.error = getString(R.string.error_empty_username)
            isValid = false
        } else {
            binding.usernameTextInputLayout.error = null
        }

        // Валидация email
        if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
            binding.emailTextInputLayoutRegister.error = getString(R.string.error_invalid_email)
            isValid = false
        } else {
            binding.emailTextInputLayoutRegister.error = null
        }

        // Валидация пароля
        if (password.isEmpty()) {
            binding.passwordTextInputLayoutRegister.error = getString(R.string.error_empty_password)
            isValid = false
        } else if (password.length < 6) {
            binding.passwordTextInputLayoutRegister.error = getString(R.string.error_password_too_short)
            isValid = false
        } else {
            binding.passwordTextInputLayoutRegister.error = null
        }

        // Валидация подтверждения пароля
        if (confirmPassword.isEmpty()) {
            binding.confirmPasswordTextInputLayout.error = getString(R.string.error_empty_password)
            isValid = false
        } else if (password != confirmPassword) {
            binding.confirmPasswordTextInputLayout.error = getString(R.string.error_passwords_do_not_match)
            isValid = false
        } else {
            binding.confirmPasswordTextInputLayout.error = null
        }

        if (!isValid) return

        setLoading(true)

        val registrationRequest = RegistrationRequest(username, email, password, displayName)

        RetrofitClient.instance.registerUser(registrationRequest)
            .enqueue(object : Callback<AuthResponse> {
                override fun onResponse(call: Call<AuthResponse>, response: Response<AuthResponse>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        // ВАЖНО: Сервер возвращает AuthResponse, но мы не сохраняем токен здесь.
                        // Вместо этого перенаправляем пользователя на экран входа.
                        // Либо, если API спроектировано так, что регистрация сразу логинит,
                        // то нужно сохранить токен и пользователя, как в LoginFragment.
                        // Сейчас предполагаем, что после регистрации нужно залогиниться отдельно.
                        val authResponse = response.body()
                        Log.d("RegistrationFragment", "Registration successful: ${authResponse?.user?.username}")
                        Toast.makeText(context, getString(R.string.registration_successful), Toast.LENGTH_LONG).show()

                        // Переход на экран логина
                        findNavController().navigate(R.id.action_registration_to_login)

                    } else {
                        val errorBody = response.errorBody()?.string() ?: "Неизвестная ошибка сервера"
                        Toast.makeText(context, "${getString(R.string.registration_failed)}: ${response.code()} - $errorBody", Toast.LENGTH_LONG).show()
                        Log.e("RegistrationFragment", "Registration failed: ${response.code()} - $errorBody")
                    }
                }

                override fun onFailure(call: Call<AuthResponse>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Ошибка сети: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("RegistrationFragment", "Network error", t)
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.progressBarRegister.isVisible = isLoading
        binding.registerButton.isEnabled = !isLoading
        binding.usernameEditText.isEnabled = !isLoading
        binding.emailEditTextRegister.isEnabled = !isLoading
        binding.displayNameEditText.isEnabled = !isLoading
        binding.passwordEditTextRegister.isEnabled = !isLoading
        binding.confirmPasswordEditText.isEnabled = !isLoading
    }


    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\UserProfileFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentUserProfileBinding
import com.example.finalproject.models.User
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.Locale
import java.util.TimeZone

class UserProfileFragment : Fragment() {

    private var _binding: FragmentUserProfileBinding? = null
    private val binding get() = _binding!!

    private val args: UserProfileFragmentArgs by navArgs()
    private var profileUserIdToLoad: Long? = null
    private var currentlyDisplayedUser: User? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentUserProfileBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        profileUserIdToLoad = if (args.userId == -1L) {
            AuthTokenProvider.getCurrentUser()?.userId
        } else {
            args.userId
        }

        loadUserProfileData()

        binding.editProfileButton.setOnClickListener {
            if (isCurrentUserProfileOwner()) {
                currentlyDisplayedUser?.userId?.let { userId ->
                    val action = UserProfileFragmentDirections.actionUserProfileFragmentToEditProfile(userId)
                    findNavController().navigate(action)
                } ?: Toast.makeText(context, "Ошибка: ID пользователя не найден", Toast.LENGTH_SHORT).show()
            }
        }

        binding.logoutButton.setOnClickListener {
            if (isCurrentUserProfileOwner()) {
                showLogoutConfirmationDialog()
            }
        }
    }

    private fun isCurrentUserProfileOwner(): Boolean {
        val loggedInUserId = AuthTokenProvider.getCurrentUser()?.userId
        return loggedInUserId != null && currentlyDisplayedUser?.userId == loggedInUserId
    }

    private fun loadUserProfileData() {
        setLoading(true)
        binding.profileErrorText.isVisible = false
        binding.profileContentGroup.isVisible = false

        if (profileUserIdToLoad == null && args.userId == -1L) {
            val currentUser = AuthTokenProvider.getCurrentUser()
            if (currentUser != null) {
                profileUserIdToLoad = currentUser.userId
                displayProfileData(currentUser)
                setLoading(false)
            } else {
                showError(getString(R.string.user_not_logged_in))
                setLoading(false)
                updateButtonVisibility()
            }
            return
        }

        if (profileUserIdToLoad == null) {
            showError(getString(R.string.user_not_found) + " (ID не указан)")
            setLoading(false)
            updateButtonVisibility()
            return
        }

        RetrofitClient.instance.getUserProfileById(profileUserIdToLoad!!)
            .enqueue(object : Callback<User> {
                override fun onResponse(call: Call<User>, response: Response<User>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { user ->
                            displayProfileData(user)
                        } ?: showError(getString(R.string.user_not_found))
                    } else {
                        showError("${getString(R.string.error_loading_profile)}: ${response.code()} ${response.message()}")
                    }
                }

                override fun onFailure(call: Call<User>, t: Throwable) {
                    setLoading(false)
                    showError("${getString(R.string.network_error)}: ${t.localizedMessage}")
                    Log.e("UserProfileFragment", "Failed to load profile", t)
                }
            })
    }

    private fun displayProfileData(user: User) {
        currentlyDisplayedUser = user

        binding.usernameTextView.text = user.username
        binding.displayNameTextView.text = user.displayName ?: getString(R.string.default_display_name)
        binding.emailTextView.text = user.email
        binding.bioTextView.text = user.bio ?: getString(R.string.default_bio)

        binding.joinedDateTextView.text = formatDate(user.createdAt)
        binding.lastLoginDateTextView.text = user.lastLogin?.let { formatDate(it) } ?: getString(R.string.placeholder_date)

        Glide.with(this)
            .load(user.avatarUrl)
            .placeholder(R.drawable.ic_profile_24)
            .error(R.drawable.ic_profile_24)
            .circleCrop()
            .into(binding.profileAvatarImageView)

        binding.profileContentGroup.isVisible = true
        updateButtonVisibility()
    }

    private fun updateButtonVisibility() {
        val isOwner = isCurrentUserProfileOwner()
        binding.editProfileButton.isVisible = isOwner
        binding.logoutButton.isVisible = isOwner
    }


    private fun showLogoutConfirmationDialog() {
        AlertDialog.Builder(requireContext())
            .setTitle(getString(R.string.confirm_logout_title))
            .setMessage(getString(R.string.confirm_logout_message))
            .setPositiveButton(getString(R.string.action_yes)) { dialog, _ ->
                performLogout()
                dialog.dismiss()
            }
            .setNegativeButton(getString(R.string.action_no)) { dialog, _ ->
                dialog.dismiss()
            }
            .show()
    }

    private fun performLogout() {
        AuthTokenProvider.clearAuthData()
        Toast.makeText(context, getString(R.string.logged_out_successfully), Toast.LENGTH_SHORT).show()
        try {
            findNavController().navigate(R.id.login, null, androidx.navigation.NavOptions.Builder()
                .setPopUpTo(R.id.nav_graph, true)
                .build())
        } catch (e: Exception) {
            Log.e("UserProfileFragment", "Navigation to login after logout failed", e)
        }
    }

    private fun setLoading(isLoading: Boolean) {
        binding.profileProgressBar.isVisible = isLoading
        if (!isLoading) {
            if (!binding.profileErrorText.isVisible) binding.profileContentGroup.isVisible = true
        } else {
            binding.profileContentGroup.isVisible = false
        }
    }

    private fun showError(message: String) {
        binding.profileErrorText.text = message
        binding.profileErrorText.isVisible = true
        binding.profileContentGroup.isVisible = false
        updateButtonVisibility()
    }

    private fun formatDate(dateString: String?): String {
        if (dateString.isNullOrEmpty()) return getString(R.string.placeholder_date)
        val inputFormats = listOf(
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSS", Locale.getDefault()),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ", Locale.getDefault()),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.getDefault()),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.getDefault())
        )
        val outputFormat = SimpleDateFormat("dd MMMM yyyy, HH:mm", Locale.getDefault())

        for (format in inputFormats) {
            if (!dateString.contains("Z") && format.toPattern().endsWith("'Z'")) {
            } else {
                format.timeZone = TimeZone.getTimeZone("UTC")
            }
            try {
                val date = format.parse(dateString)
                if (date != null) {
                    outputFormat.timeZone = TimeZone.getDefault()
                    return outputFormat.format(date)
                }
            } catch (e: ParseException) {
            }
        }
        Log.w("UserProfileFragment", "Could not parse date: $dateString, returning as is.")
        return dateString
    }

    override fun onResume() {
        super.onResume()
        val currentLoggedInUserId = AuthTokenProvider.getCurrentUser()?.userId
        val targetUserIdForDisplay = if (args.userId == -1L) currentLoggedInUserId else args.userId

        if (profileUserIdToLoad != targetUserIdForDisplay || currentlyDisplayedUser == null) {
            profileUserIdToLoad = targetUserIdForDisplay
            loadUserProfileData()
        } else {
            if (isCurrentUserProfileOwner()) {
                AuthTokenProvider.getCurrentUser()?.let {
                    if (it != currentlyDisplayedUser) {
                        displayProfileData(it)
                    }
                }
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
        currentlyDisplayedUser = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\AddItemToCollectionRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class AddItemToCollectionRequest(
    val mediaItemId: Long,
    val notes: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\CreateCollectionRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class CreateCollectionRequest(
    val title: String,
    val description: String?,
    val coverImageUrl: String?,
    val isPublic: Boolean
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\CreateCommentRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class CreateCommentRequest(
    val commentText: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\CreateMediaItemRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class CreateMediaItemRequest(
    val title: String,
    val typeId: Long,
    val creator: String?,
    val description: String?,
    val thumbnailUrl: String?,
    val externalUrl: String?,
    val releaseDate: String?
    // val tags: List<String>?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\ForgotPasswordRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class ForgotPasswordRequest(
    val email: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\LoginRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class LoginRequest(
    val email: String,
    val password: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\RegistrationRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class RegistrationRequest(
    val username: String,
    val email: String,
    val password: String,
    val displayName: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\UpdateMediaItemRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class UpdateMediaItemRequest(
    val title: String,
    val creator: String?,
    val description: String?,
    val thumbnailUrl: String?,
    val externalUrl: String?,
    val releaseDate: String?,
    // val typeId: Long,
    // val tags: List<TagRequest>
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\UpdateProfileRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class UpdateProfileRequest(
    val displayName: String?,
    val bio: String?,
    val avatarUrl: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\AuthResponse.kt
###############################################################################

package com.example.finalproject.models.responce

import com.example.finalproject.models.User

data class AuthResponse(
    val token: String,
    val user: User
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\PageableDetails.kt
###############################################################################

package com.example.finalproject.models.responce

import com.google.gson.annotations.SerializedName

data class PageableDetails(
    val pageNumber: Int,
    val pageSize: Int,
    @SerializedName("sort")
    val sortDetails: List<SortProperty>,
    val offset: Long,
    val paged: Boolean,
    val unpaged: Boolean
)


###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\PagedResponse.kt
###############################################################################

package com.example.finalproject.models.responce

import com.google.gson.annotations.SerializedName

data class PagedResponse<T>(
    @SerializedName("content")
    val content: List<T>,

    @SerializedName("pageable")
    val pageable: PageableDetails,

    @SerializedName("last")
    val last: Boolean,

    @SerializedName("totalPages")
    val totalPages: Int,

    @SerializedName("totalElements")
    val totalElements: Int,

    @SerializedName("size")
    val size: Int,

    @SerializedName("number")
    val number: Int,

    @SerializedName("sort")
    val sort: List<SortProperty>,

    @SerializedName("first")
    val first: Boolean,

    @SerializedName("numberOfElements")
    val numberOfElements: Int,

    @SerializedName("empty")
    val empty: Boolean
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\SortProperty.kt
###############################################################################

package com.example.finalproject.models.responce

data class SortProperty(
    val direction: String?,
    val property: String?,
    val ignoreCase: Boolean?,
    val nullHandling: String?,
    val ascending: Boolean?,
    val descending: Boolean?
)


###############################################################################
# SUMMARY
# Total files: 91
# Total size: 274.48 KB
# Processing time: 1.09 seconds
###############################################################################


###############################################################################
# FILE: get_project_code.bat
###############################################################################

@echo off
echo Running code collection script...
powershell.exe -ExecutionPolicy Bypass -File "%~dp0CollectCode.ps1"

###############################################################################
# FILE: gradle.properties
###############################################################################

# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

###############################################################################
# FILE: gradlew.bat
###############################################################################

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


###############################################################################
# FILE: local.properties
###############################################################################

## This file is automatically generated by Android Studio.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
#
# This file should *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
sdk.dir=C\:\\Users\\Arnat\\AppData\\Local\\Android\\Sdk

###############################################################################
# FILE: gradle\wrapper\gradle-wrapper.properties
###############################################################################

#Tue May 06 12:25:58 QYZT 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists


###############################################################################
# FILE: app\src\main\AndroidManifest.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.FinalProject"
        android:usesCleartextTraffic="true"
        tools:targetApi="31">
    <activity
        android:name=".MainActivity"
        android:exported="true">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />

            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
    </activity>
</application>

<uses-permission android:name="android.permission.INTERNET" />
    </manifest>

###############################################################################
# FILE: app\src\main\res\drawable\bg_tag_chip.xml
###############################################################################

<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="#1A000000"/>
    <corners android:radius="12dp"/>
    <stroke android:width="1dp" android:color="?attr/colorPrimary"/>
</shape>

###############################################################################
# FILE: app\src\main\res\drawable\ic_add_24.xml
###############################################################################

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
    
</vector>


###############################################################################
# FILE: app\src\main\res\drawable\ic_edit_24.xml
###############################################################################

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M3,17.25V21h3.75L17.81,9.94l-3.75,-3.75L3,17.25zM20.71,7.04c0.39,-0.39 0.39,-1.02 0,-1.41l-2.34,-2.34c-0.39,-0.39 -1.02,-0.39 -1.41,0l-1.83,1.83 3.75,3.75 1.83,-1.83z"/>
    
</vector>


###############################################################################
# FILE: app\src\main\res\drawable\ic_image_placeholder_24.xml
###############################################################################

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M21,19V5c0,-1.1 -0.9,-2 -2,-2H5c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2zM8.5,13.5l2.5,3.01L14.5,12l4.5,6H5l3.5,-4.5z"/>
    
</vector>


###############################################################################
# FILE: app\src\main\res\drawable\ic_launcher_background.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


###############################################################################
# FILE: app\src\main\res\drawable\ic_launcher_foreground.xml
###############################################################################

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

###############################################################################
# FILE: app\src\main\res\drawable\ic_logout_24.xml
###############################################################################

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M17,7l-1.41,1.41L18.17,11H8v2h10.17l-2.58,2.58L17,17l5,-5zM4,5h8V3H4c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h8v-2H4V5z"/>
    
</vector>


###############################################################################
# FILE: app\src\main\res\layout\activity_main.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <androidx.fragment.app.FragmentContainerView
        android:id="@+id/nav_host_fragment"
        android:name="androidx.navigation.fragment.NavHostFragment"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:defaultNavHost="true"
        app:layout_constraintBottom_toTopOf="@+id/bottom_navigation_view"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:navGraph="@navigation/nav_graph" />

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottom_navigation_view"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:menu="@menu/bottom_nav_menu"
        android:visibility="gone" />

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_add_item.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        tools:context=".fragments.collection.AddItemFragment">

        <TextView
            android:id="@+id/add_item_header_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Создать и добавить элемент"
            android:textAppearance="?attr/textAppearanceHeadline5"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:layout_marginTop="16dp"/>

        <ImageView
            android:id="@+id/new_media_item_thumbnail_preview"
            android:layout_width="100dp"
            android:layout_height="150dp"
            android:layout_marginTop="16dp"
            tools:srcCompat="@drawable/ic_image_placeholder_24"
            android:scaleType="centerCrop"
            android:contentDescription="@string/media_item_thumbnail_desc"
            app:layout_constraintTop_toBottomOf="@id/add_item_header_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/title_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/new_media_item_thumbnail_preview"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_title_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/title_new_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textCapSentences"/>
        </com.google.android.material.textfield.TextInputLayout>

        <TextView
            android:id="@+id/content_type_spinner_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Тип контента*:"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/title_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"/>

        <Spinner
            android:id="@+id/content_type_spinner"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:minHeight="48dp"
            style="@style/Widget.AppCompat.Spinner.Underlined"
            app:layout_constraintTop_toBottomOf="@id/content_type_spinner_label"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent" />

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/creator_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/content_type_spinner"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_creator_edit">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/creator_new_media_text_field"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="textPersonName|textCapWords"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/description_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/creator_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_description_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/description_new_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine|textCapSentences"
                android:minLines="3"
                android:gravity="top"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/thumbnail_url_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/description_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_thumbnail_url_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/thumbnail_url_new_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/external_url_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/thumbnail_url_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_external_url_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/external_url_new_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/release_date_new_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/external_url_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_release_date_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/release_date_new_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="date"/>
        </com.google.android.material.textfield.TextInputLayout>


        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/item_notes_text_input_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            app:layout_constraintTop_toBottomOf="@id/release_date_new_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_item_notes">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/item_notes_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine|textCapSentences"
                android:minLines="2"
                android:gravity="top"/>
        </com.google.android.material.textfield.TextInputLayout>

        <Button
            android:id="@+id/add_item_button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="32dp"
            android:text="@string/button_add_item"
            app:layout_constraintTop_toBottomOf="@id/item_notes_text_input_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:paddingVertical="12dp"/>

        <ProgressBar
            android:id="@+id/add_item_progress_bar"
            style="?android:attr/progressBarStyle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</ScrollView>

###############################################################################
# FILE: app\src\main\res\layout\fragment_collection_details.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true"
    tools:context=".fragments.collection.CollectionDetailsFragment">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingBottom="16dp">

        <ImageView
            android:id="@+id/collection_detail_cover_image"
            android:layout_width="0dp"
            android:layout_height="250dp"
            android:scaleType="centerCrop"
            android:contentDescription="@string/collection_cover_image_desc"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:srcCompat="@drawable/ic_launcher_background" />

        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/fab_like_collection"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginEnd="16dp"
            android:src="@drawable/ic_like_outline_24"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_cover_image"
            app:layout_constraintBottom_toBottomOf="@id/collection_detail_cover_image"
            app:layout_constraintEnd_toEndOf="parent"
            app:tint="@color/white"
            android:contentDescription="@string/like_button_desc"/>

        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/fab_add_item_to_collection"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginEnd="16dp"
            android:layout_marginBottom="16dp"
            app:layout_constraintBottom_toTopOf="@+id/comment_input_layout"
            app:layout_constraintEnd_toEndOf="parent"
            app:srcCompat="@drawable/ic_add_24"
            android:contentDescription="Add item to collection"
            app:backgroundTint="?attr/colorSecondary"
            app:tint="@color/white"
            tools:visibility="visible"/>

        <TextView
            android:id="@+id/collection_detail_title"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="16dp"
            android:layout_marginEnd="16dp"
            android:textAppearance="?attr/textAppearanceHeadline5"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_cover_image"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toStartOf="@id/fab_like_collection"
            tools:text="Название очень длинной коллекции" />

        <TextView
            android:id="@+id/collection_detail_author"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceSubtitle1"
            android:textColor="?attr/colorPrimary"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_title"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            app:layout_constraintEnd_toEndOf="@id/collection_detail_title"
            tools:text="Автор: username123" />

        <TextView
            android:id="@+id/collection_detail_description"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:textAppearance="?attr/textAppearanceBody1"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_author"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            app:layout_constraintEnd_toEndOf="@id/collection_detail_title"
            tools:text="Очень длинное и подробное описание коллекции, которое может занимать несколько строк и содержать много интересной информации." />

        <LinearLayout
            android:id="@+id/collection_detail_stats_layout"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="12dp"
            android:gravity="start|center_vertical"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_description"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            app:layout_constraintEnd_toEndOf="@id/collection_detail_title">

            <ImageView
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_like_filled_24"
                app:tint="?attr/colorControlNormal"
                android:layout_marginEnd="4dp"/>
            <TextView
                android:id="@+id/collection_detail_likes_count"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginEnd="16dp"
                tools:text="1.2K" />

            <ImageView
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_views_24"
                app:tint="?attr/colorControlNormal"
                android:layout_marginEnd="4dp"/>
            <TextView
                android:id="@+id/collection_detail_views_count"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginEnd="16dp"
                tools:text="10.5K" />

            <ImageView
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_comment_24"
                app:tint="?attr/colorControlNormal"
                android:layout_marginEnd="4dp"/>
            <TextView
                android:id="@+id/collection_detail_comments_count"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="15" />
        </LinearLayout>

        <View
            android:id="@+id/divider1"
            android:layout_width="0dp"
            android:layout_height="1dp"
            android:background="?android:attr/listDivider"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/collection_detail_stats_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <TextView
            android:id="@+id/items_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/collection_items_title"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/divider1"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title" />

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/collection_items_recycler_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:nestedScrollingEnabled="false"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            app:layout_constraintTop_toBottomOf="@id/items_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:listitem="@layout/item_collection_item_entry"
            tools:itemCount="3"/>

        <View
            android:id="@+id/divider2"
            android:layout_width="0dp"
            android:layout_height="1dp"
            android:background="?android:attr/listDivider"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/collection_items_recycler_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <TextView
            android:id="@+id/collaborators_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/collaborators_title"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:layout_marginTop="16dp"
            android:visibility="gone"
            app:layout_constraintTop_toBottomOf="@id/divider2"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title"
            tools:visibility="visible"/>

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/collaborators_recycler_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:nestedScrollingEnabled="false"
            android:visibility="gone"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            android:orientation="horizontal"
            app:layout_constraintTop_toBottomOf="@id/collaborators_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:listitem="@layout/item_collaborator"
            tools:itemCount="2"
            tools:visibility="visible"/>

        <View
            android:id="@+id/divider3"
            android:layout_width="0dp"
            android:layout_height="1dp"
            android:background="?android:attr/listDivider"
            android:layout_marginTop="16dp"
            android:visibility="gone"
            app:layout_constraintTop_toBottomOf="@id/collaborators_recycler_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

        <TextView
            android:id="@+id/comments_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/comments_title"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/divider3"
            app:layout_constraintStart_toStartOf="@id/collection_detail_title" />

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/comments_recycler_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:nestedScrollingEnabled="false"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            app:layout_constraintTop_toBottomOf="@id/comments_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:listitem="@layout/item_comment"
            tools:itemCount="2"/>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/comment_input_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:layout_marginStart="16dp"
            android:layout_marginEnd="16dp"
            app:layout_constraintTop_toBottomOf="@id/comments_recycler_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/add_comment_hint">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/comment_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine"
                android:maxLines="5"/>
        </com.google.android.material.textfield.TextInputLayout>

        <Button
            android:id="@+id/post_comment_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:text="@string/post_comment_button"
            app:layout_constraintTop_toBottomOf="@id/comment_input_layout"
            app:layout_constraintEnd_toEndOf="@id/comment_input_layout" />


        <ProgressBar
            android:id="@+id/collection_detail_progress_bar"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</androidx.core.widget.NestedScrollView>

###############################################################################
# FILE: app\src\main\res\layout\fragment_create_collection.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        tools:context=".fragments.collection.EditCollectionFragment">

        <TextView
            android:id="@+id/create_collection_header_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/create_collection_title_toolbar"
            android:textAppearance="?attr/textAppearanceHeadline5"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:layout_marginTop="16dp"/>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/title_text_input_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            app:layout_constraintTop_toBottomOf="@id/create_collection_header_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_collection_title">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/title_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textCapSentences"
                android:maxLines="1"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/description_text_input_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/title_text_input_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_collection_description">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/description_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine|textCapSentences"
                android:minLines="3"
                android:gravity="top"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/cover_url_text_input_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/description_text_input_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_collection_cover_url">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/cover_url_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.switchmaterial.SwitchMaterial
            android:id="@+id/is_public_switch"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="@string/label_is_public"
            android:checked="true"
            app:layout_constraintTop_toBottomOf="@id/cover_url_text_input_layout"
            app:layout_constraintStart_toStartOf="parent"/>

        <Button
            android:id="@+id/create_collection_button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="32dp"
            android:text="@string/button_create_collection"
            app:layout_constraintTop_toBottomOf="@id/is_public_switch"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:paddingVertical="12dp"/>

        <ProgressBar
            android:id="@+id/create_collection_progress_bar"
            style="?android:attr/progressBarStyle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</ScrollView>

###############################################################################
# FILE: app\src\main\res\layout\fragment_edit_media_item.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        tools:context=".fragments.mediaitem.EditMediaItemFragment">

        <TextView
            android:id="@+id/edit_media_item_header_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/edit_media_item_toolbar_title"
            android:textAppearance="?attr/textAppearanceHeadline5"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:layout_marginTop="16dp"/>

        <ImageView
            android:id="@+id/edit_media_item_thumbnail_preview"
            android:layout_width="100dp"
            android:layout_height="150dp"
            android:layout_marginTop="16dp"
            tools:srcCompat="@drawable/ic_image_placeholder_24"
            android:scaleType="centerCrop"
            android:contentDescription="@string/media_item_thumbnail_desc"
            app:layout_constraintTop_toBottomOf="@id/edit_media_item_header_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/title_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/edit_media_item_thumbnail_preview"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_title_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/title_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textCapSentences"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/creator_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/title_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_creator_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/creator_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textPersonName|textCapWords"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/description_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/creator_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_description_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/description_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine|textCapSentences"
                android:minLines="3"
                android:gravity="top"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/thumbnail_url_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/description_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_thumbnail_url_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/thumbnail_url_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/external_url_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/thumbnail_url_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_external_url_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/external_url_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/release_date_edit_media_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/external_url_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_media_item_release_date_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/release_date_edit_media_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="date"/>
        </com.google.android.material.textfield.TextInputLayout>

        <!-- TODO: Add UI for selecting ContentType and Tags if needed -->

        <Button
            android:id="@+id/save_media_item_button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="32dp"
            android:text="@string/button_save_media_item_changes"
            app:layout_constraintTop_toBottomOf="@id/release_date_edit_media_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:paddingVertical="12dp"/>

        <ProgressBar
            android:id="@+id/edit_media_item_progress_bar"
            style="?android:attr/progressBarStyle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</ScrollView>

###############################################################################
# FILE: app\src\main\res\layout\fragment_edit_profile.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        tools:context=".fragments.user.EditProfileFragment">

        <TextView
            android:id="@+id/edit_profile_header_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/edit_profile_toolbar_title"
            android:textAppearance="?attr/textAppearanceHeadline5"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:layout_marginTop="16dp"/>

        <ImageView
            android:id="@+id/edit_profile_avatar_preview"
            android:layout_width="100dp"
            android:layout_height="100dp"
            android:layout_marginTop="16dp"
            tools:srcCompat="@drawable/ic_profile_24"
            android:scaleType="centerCrop"
            android:contentDescription="@string/user_avatar_desc"
            app:layout_constraintTop_toBottomOf="@id/edit_profile_header_title"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/display_name_edit_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/edit_profile_avatar_preview"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_display_name_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/display_name_edit_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textPersonName|textCapWords"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/bio_edit_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/display_name_edit_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_bio_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/bio_edit_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textMultiLine|textCapSentences"
                android:minLines="3"
                android:gravity="top"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/avatar_url_edit_layout"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:layout_constraintTop_toBottomOf="@id/bio_edit_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:hint="@string/hint_avatar_url_edit">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/avatar_url_edit_text_field"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textUri"/>
        </com.google.android.material.textfield.TextInputLayout>

        <Button
            android:id="@+id/save_profile_button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="32dp"
            android:text="@string/button_save_profile_changes"
            app:layout_constraintTop_toBottomOf="@id/avatar_url_edit_layout"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            android:paddingVertical="12dp"/>

        <ProgressBar
            android:id="@+id/edit_profile_progress_bar"
            style="?android:attr/progressBarStyle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</ScrollView>

###############################################################################
# FILE: app\src\main\res\layout\fragment_forgot_password.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".fragments.user.ForgotPasswordFragment">

    <TextView
        android:id="@+id/titleTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Восстановление пароля"
        android:textSize="24sp"
        android:textStyle="bold"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="32dp"/>

    <TextView
        android:id="@+id/instructionTextView"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Введите адрес электронной почты, связанный с вашим аккаунтом, и мы отправим вам инструкции по сбросу пароля."
        android:textSize="16sp"
        android:textAlignment="center"
        app:layout_constraintTop_toBottomOf="@id/titleTextView"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="16dp"/>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/emailTextInputLayout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        app:layout_constraintTop_toBottomOf="@id/instructionTextView"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:hint="@string/hint_email">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/emailEditText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="textEmailAddress" />
    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/sendButton"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Отправить"
        app:layout_constraintTop_toBottomOf="@id/emailTextInputLayout"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="24dp"
        android:paddingTop="12dp"
        android:paddingBottom="12dp"/>

    <ProgressBar
        android:id="@+id/progressBar"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_home.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.collection.HomeFragment">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/collections_recycler_view"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:listitem="@layout/item_collection_card"
        android:clipToPadding="false"
        android:paddingBottom="8dp"/>

    <ProgressBar
        android:id="@+id/home_progress_bar"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

    <TextView
        android:id="@+id/empty_view_text"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/no_collections_found"
        android:textSize="18sp"
        android:visibility="gone"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_login.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".fragments.user.LoginFragment">

    <ImageView
        android:id="@+id/login_logo"
        android:layout_width="120dp"
        android:layout_height="120dp"
        android:layout_marginTop="64dp"
        android:contentDescription="@string/login_logo_description"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:srcCompat="@android:drawable/ic_lock_lock" />

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/email_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/login_logo">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/email_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_email"
            android:inputType="textEmailAddress" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/password_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/email_text_input_layout"
        app:passwordToggleEnabled="true">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/password_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_password"
            android:inputType="textPassword" />
    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/login_button"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:text="@string/login_button_text"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/password_text_input_layout" />

<!--    <TextView-->
<!--        android:id="@+id/forgot_password_text_view"-->
<!--        android:layout_width="wrap_content"-->
<!--        android:layout_height="wrap_content"-->
<!--        android:layout_marginTop="16dp"-->
<!--        android:text="@string/forgot_password_text"-->
<!--        android:textColor="?attr/colorPrimary"-->
<!--        app:layout_constraintEnd_toEndOf="parent"-->
<!--        app:layout_constraintTop_toBottomOf="@+id/login_button" />-->

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        android:layout_marginBottom="32dp">

        <TextView
            android:id="@+id/no_account_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/no_account_text" />

        <TextView
            android:id="@+id/sign_up_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="4dp"
            android:text="@string/sign_up_text"
            android:textColor="?attr/colorPrimary"
            android:textStyle="bold" />
    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_media_item_details.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.mediaitem.MediaItemDetailsFragment">

    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/app_bar_layout_media_details"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar">

        <com.google.android.material.appbar.CollapsingToolbarLayout
            android:id="@+id/collapsing_toolbar_layout_media_details"
            android:layout_width="match_parent"
            android:layout_height="250dp"
            app:contentScrim="?attr/colorPrimary"
            app:layout_scrollFlags="scroll|exitUntilCollapsed"
            app:titleEnabled="false">

            <ImageView
                android:id="@+id/media_item_detail_thumbnail"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:scaleType="centerCrop"
                android:contentDescription="@string/media_item_thumbnail_desc"
                tools:srcCompat="@drawable/ic_image_placeholder_24"
                app:layout_collapseMode="parallax"/>

            <androidx.appcompat.widget.Toolbar
                android:id="@+id/toolbar_media_details"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:layout_collapseMode="pin"
                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>

        </com.google.android.material.appbar.CollapsingToolbarLayout>
    </com.google.android.material.appbar.AppBarLayout>

    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

            <TextView
                android:id="@+id/media_item_detail_title_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="Очень длинное название Медиа Элемента"
                android:textAppearance="?attr/textAppearanceHeadline5" />

            <TextView
                android:id="@+id/media_item_detail_creator_label"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_media_item_creator"
                android:textAppearance="?attr/textAppearanceCaption"
                android:layout_marginTop="8dp"/>

            <TextView
                android:id="@+id/media_item_detail_creator_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="Имя Создателя"
                android:textAppearance="?attr/textAppearanceSubtitle1"
                android:textColor="?attr/colorPrimary"/>

            <TextView
                android:id="@+id/media_item_detail_type_label"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_media_item_type"
                android:textAppearance="?attr/textAppearanceCaption"
                android:layout_marginTop="8dp"/>
            <TextView
                android:id="@+id/media_item_detail_type_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="Фильм"
                android:textAppearance="?attr/textAppearanceBody1"/>

            <TextView
                android:id="@+id/media_item_detail_description_label"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_media_item_description"
                android:textAppearance="?attr/textAppearanceSubtitle2"
                android:layout_marginTop="16dp"/>
            <TextView
                android:id="@+id/media_item_detail_description_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                tools:text="Очень длинное и подробное описание медиа-элемента, которое может занимать несколько строк и содержать много интересной информации об этом элементе."
                android:textAppearance="?attr/textAppearanceBody2"
                android:layout_marginTop="4dp"/>

            <com.google.android.material.chip.ChipGroup
                android:id="@+id/media_item_detail_tags_chip_group"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:visibility="gone"
                tools:visibility="visible"/>

            <TextView
                android:id="@+id/media_item_detail_release_date_label"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_media_item_release_date"
                android:textAppearance="?attr/textAppearanceCaption"
                android:layout_marginTop="12dp"/>
            <TextView
                android:id="@+id/media_item_detail_release_date_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="2023-05-20"
                android:textAppearance="?attr/textAppearanceBody2"/>

            <TextView
                android:id="@+id/media_item_detail_added_at_label"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_media_item_added_at"
                android:textAppearance="?attr/textAppearanceCaption"
                android:layout_marginTop="8dp"/>
            <TextView
                android:id="@+id/media_item_detail_added_at_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                tools:text="2024-01-15 10:00"
                android:textAppearance="?attr/textAppearanceBody2"/>

            <Button
                android:id="@+id/button_open_external_url"
                style="@style/Widget.MaterialComponents.Button.TextButton"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/button_open_external_url"
                android:layout_marginTop="16dp"
                android:visibility="gone"
                tools:visibility="visible"/>

        </LinearLayout>
    </androidx.core.widget.NestedScrollView>

    <ProgressBar
        android:id="@+id/media_item_detail_progress_bar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        android:visibility="gone"
        tools:visibility="visible"/>

    <TextView
        android:id="@+id/media_item_detail_error_text"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/error_loading_media_item_details"
        android:layout_gravity="center"
        android:visibility="gone"
        tools:visibility="visible"
        android:textColor="?attr/colorError"/>

    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:id="@+id/fab_edit_media_item"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom|end"
        android:layout_margin="16dp"
        app:srcCompat="@drawable/ic_edit_24"
        android:contentDescription="@string/button_edit_media_item"
        android:visibility="gone"
        tools:visibility="visible"/>

</androidx.coordinatorlayout.widget.CoordinatorLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_media_item_search.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.mediaitem.MediaItemSearchFragment">

    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/app_bar_layout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toTopOf="parent">

        <androidx.appcompat.widget.Toolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:title="Поиск медиа-элементов"/>
    </com.google.android.material.appbar.AppBarLayout>


    <androidx.appcompat.widget.SearchView
        android:id="@+id/media_item_search_view"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:iconifiedByDefault="false"
        app:queryHint="Введите название для поиска..."
        app:layout_constraintTop_toBottomOf="@id/app_bar_layout"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_margin="8dp"/>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/search_results_recycler_view"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintTop_toBottomOf="@id/media_item_search_view"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:listitem="@layout/item_media_item_selectable"
        android:paddingBottom="8dp"
        android:clipToPadding="false"/>

    <ProgressBar
        android:id="@+id/search_progress_bar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/media_item_search_view"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

    <TextView
        android:id="@+id/search_empty_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Ничего не найдено. Попробуйте другой запрос."
        android:visibility="gone"
        app:layout_constraintTop_toBottomOf="@id/media_item_search_view"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        tools:visibility="visible"/>

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_my_collections.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.collection.MyCollectionsFragment">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/my_collections_recycler_view"
            android:layout_width="0dp"
            android:layout_height="0dp"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:listitem="@layout/item_collection_card"
            android:clipToPadding="false"
            android:paddingBottom="80dp"/>

        <ProgressBar
            android:id="@+id/my_collections_progress_bar"
            style="?android:attr/progressBarStyle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

        <TextView
            android:id="@+id/my_collections_empty_view_text"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/no_my_collections_found"
            android:textSize="18sp"
            android:visibility="gone"
            android:gravity="center"
            android:padding="16dp"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

    </androidx.constraintlayout.widget.ConstraintLayout>

    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:id="@+id/fab_create_collection"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom|end"
        android:layout_margin="16dp"
        android:contentDescription="@string/create_new_collection_desc"
        app:srcCompat="@drawable/ic_add_24" />

</androidx.coordinatorlayout.widget.CoordinatorLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_registration.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".fragments.user.RegistrationFragment">

    <ImageView
        android:id="@+id/register_logo"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_marginTop="32dp"
        android:contentDescription="@string/login_logo_description"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:srcCompat="@android:drawable/ic_menu_edit" />

    <TextView
        android:id="@+id/register_title_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:text="@string/sign_up_text"
        android:textSize="24sp"
        android:textStyle="bold"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/register_logo" />

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/username_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/register_title_text_view">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/username_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_username"
            android:inputType="textPersonName" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/email_text_input_layout_register"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/username_text_input_layout">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/email_edit_text_register"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_email"
            android:inputType="textEmailAddress" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/display_name_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/email_text_input_layout_register">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/display_name_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_display_name"
            android:inputType="textPersonName" />
    </com.google.android.material.textfield.TextInputLayout>


    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/password_text_input_layout_register"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/display_name_text_input_layout"
        app:passwordToggleEnabled="true">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/password_edit_text_register"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_password"
            android:inputType="textPassword" />
    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/confirm_password_text_input_layout"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/password_text_input_layout_register"
        app:passwordToggleEnabled="true">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/confirm_password_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_confirm_password"
            android:inputType="textPassword" />
    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/register_button"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:paddingTop="12dp"
        android:paddingBottom="12dp"
        android:text="@string/register_button_text"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/confirm_password_text_input_layout" />

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        android:layout_marginBottom="32dp">

        <TextView
            android:id="@+id/already_account_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/already_have_account" />

        <TextView
            android:id="@+id/login_now_text_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="4dp"
            android:text="@string/login_now_text"
            android:textColor="?attr/colorPrimary"
            android:textStyle="bold" />
    </LinearLayout>

    <ProgressBar
        android:id="@+id/progressBarRegister"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:visibility="visible" />

</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\fragment_user_profile.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true"
    tools:context=".fragments.user.UserProfileFragment">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp">

        <ProgressBar
            android:id="@+id/profile_progress_bar"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:visibility="visible"/>

        <TextView
            android:id="@+id/profile_error_text"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:gravity="center"
            android:padding="16dp"
            android:text="@string/error_loading_profile"
            android:textAppearance="?attr/textAppearanceSubtitle1"
            android:textColor="?attr/colorError"
            android:visibility="gone"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            tools:visibility="visible" />

        <androidx.constraintlayout.widget.Group
            android:id="@+id/profile_content_group"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            app:constraint_referenced_ids="profile_avatar_image_view, username_label, username_text_view, display_name_label, display_name_text_view, email_label, email_text_view, bio_label, bio_text_view, joined_label, joined_date_text_view, last_login_label, last_login_date_text_view, edit_profile_button, logout_button"
            android:visibility="visible" />


        <ImageView
            android:id="@+id/profile_avatar_image_view"
            android:layout_width="120dp"
            android:layout_height="120dp"
            android:layout_marginTop="16dp"
            android:contentDescription="@string/user_avatar_desc"
            android:scaleType="centerCrop"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            tools:srcCompat="@drawable/ic_profile_24" /> <!-- Заглушка -->

        <TextView
            android:id="@+id/username_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            android:text="@string/label_username"
            android:textAppearance="?attr/textAppearanceSubtitle2"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/profile_avatar_image_view" />

        <TextView
            android:id="@+id/username_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:textAppearance="?attr/textAppearanceBody1"
            app:layout_constraintBaseline_toBaselineOf="@id/username_label"
            app:layout_constraintStart_toEndOf="@id/username_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="arnat_user" />

        <TextView
            android:id="@+id/display_name_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="12dp"
            android:text="@string/label_display_name"
            android:textAppearance="?attr/textAppearanceSubtitle2"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/username_label" />

        <TextView
            android:id="@+id/display_name_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:textAppearance="?attr/textAppearanceBody1"
            app:layout_constraintBaseline_toBaselineOf="@id/display_name_label"
            app:layout_constraintStart_toEndOf="@id/display_name_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Arnat Developer" />

        <TextView
            android:id="@+id/email_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="12dp"
            android:text="@string/label_email"
            android:textAppearance="?attr/textAppearanceSubtitle2"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/display_name_label" />

        <TextView
            android:id="@+id/email_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:textAppearance="?attr/textAppearanceBody1"
            app:layout_constraintBaseline_toBaselineOf="@id/email_label"
            app:layout_constraintStart_toEndOf="@id/email_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="arnat.dev@example.com" />

        <TextView
            android:id="@+id/bio_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="@string/label_bio"
            android:textAppearance="?attr/textAppearanceSubtitle2"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/email_label" />

        <TextView
            android:id="@+id/bio_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceBody2"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/bio_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Android developer passionate about creating amazing apps. Loves Kotlin and Jetpack Compose." />

        <TextView
            android:id="@+id/joined_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="@string/label_joined_on"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/bio_text_view" />

        <TextView
            android:id="@+id/joined_date_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintBaseline_toBaselineOf="@id/joined_label"
            app:layout_constraintStart_toEndOf="@id/joined_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="01.01.2024" />

        <TextView
            android:id="@+id/last_login_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:text="@string/label_last_login"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/joined_label" />

        <TextView
            android:id="@+id/last_login_date_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintBaseline_toBaselineOf="@id/last_login_label"
            app:layout_constraintStart_toEndOf="@id/last_login_label"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="20.05.2025 16:58" />


        <com.google.android.material.button.MaterialButton
            android:id="@+id/edit_profile_button"
            style="@style/Widget.MaterialComponents.Button.OutlinedButton"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            android:text="@string/button_edit_profile"
            app:layout_constraintTop_toBottomOf="@id/last_login_label"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/logout_button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="12dp"
            android:layout_marginBottom="16dp"
            android:text="@string/button_logout"
            app:backgroundTint="?attr/colorError"
            app:icon="@drawable/ic_logout_24"
            app:iconTint="@color/white"
            app:layout_constraintTop_toBottomOf="@id/edit_profile_button"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintVertical_bias="0.0"/> <!-- Чтобы кнопка не уезжала слишком вниз если контента мало -->

    </androidx.constraintlayout.widget.ConstraintLayout>
</androidx.core.widget.NestedScrollView>

###############################################################################
# FILE: app\src\main\res\layout\item_collaborator.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:gravity="center_horizontal"
    android:padding="8dp">

    <ImageView
        android:id="@+id/collaborator_avatar"
        android:layout_width="48dp"
        android:layout_height="48dp"
        tools:srcCompat="@drawable/ic_profile_24"
        android:contentDescription="@string/user_avatar_desc"/>

    <TextView
        android:id="@+id/collaborator_name"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="4dp"
        android:textSize="12sp"
        android:maxLines="1"
        android:ellipsize="end"
        tools:text="Collaborator Name"/>
</LinearLayout>

###############################################################################
# FILE: app\src\main\res\layout\item_collection_card.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="16dp"
    android:layout_marginTop="8dp"
    android:layout_marginEnd="16dp"
    android:layout_marginBottom="8dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <ImageView
            android:id="@+id/collection_cover_image_view"
            android:layout_width="0dp"
            android:layout_height="180dp"
            android:scaleType="centerCrop"
            android:contentDescription="@string/collection_cover_image_desc"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:srcCompat="@drawable/ic_launcher_background" /> <!-- Заглушка -->

        <TextView
            android:id="@+id/collection_title_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="12dp"
            android:layout_marginEnd="16dp"
            android:textAppearance="?attr/textAppearanceHeadline6"
            android:maxLines="2"
            android:ellipsize="end"
            app:layout_constraintTop_toBottomOf="@id/collection_cover_image_view"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Очень длинное название коллекции фильмов" />

        <TextView
            android:id="@+id/collection_author_text_view"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceBody2"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintTop_toBottomOf="@id/collection_title_text_view"
            app:layout_constraintStart_toStartOf="@id/collection_title_text_view"
            app:layout_constraintEnd_toEndOf="@id/collection_title_text_view"
            tools:text="Автор: username123" />

        <LinearLayout
            android:id="@+id/stats_layout"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="8dp"
            android:layout_marginBottom="12dp"
            android:gravity="start|center_vertical"
            app:layout_constraintTop_toBottomOf="@id/collection_author_text_view"
            app:layout_constraintStart_toStartOf="@id/collection_title_text_view"
            app:layout_constraintEnd_toEndOf="@id/collection_title_text_view"
            app:layout_constraintBottom_toBottomOf="parent">

            <ImageView
                android:id="@+id/likes_icon"
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_like_filled_24"
                app:tint="?attr/colorControlNormal"
                android:contentDescription="@string/likes_icon_desc" />

            <TextView
                android:id="@+id/collection_likes_count_text_view"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="4dp"
                android:layout_marginEnd="16dp"
                android:textAppearance="?attr/textAppearanceCaption"
                tools:text="1.2K" />

            <ImageView
                android:id="@+id/views_icon"
                android:layout_width="18dp"
                android:layout_height="18dp"
                android:src="@drawable/ic_views_24"
                app:tint="?attr/colorControlNormal"
                android:contentDescription="@string/views_icon_desc" />

            <TextView
                android:id="@+id/collection_view_count_text_view"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="4dp"
                android:textAppearance="?attr/textAppearanceCaption"
                tools:text="10.5K" />
        </LinearLayout>

    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>

###############################################################################
# FILE: app\src\main\res\layout\item_collection_item_entry.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:cardElevation="2dp"
    app:cardCornerRadius="4dp"
    android:layout_marginStart="16dp"
    android:layout_marginEnd="16dp"
    android:layout_marginTop="4dp"
    android:layout_marginBottom="4dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="12dp">

        <ImageView
            android:id="@+id/item_thumbnail"
            android:layout_width="80dp"
            android:layout_height="100dp"
            android:scaleType="centerCrop"
            android:contentDescription="@string/media_item_thumbnail_desc"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            tools:srcCompat="@drawable/ic_image_placeholder_24"/>

        <TextView
            android:id="@+id/item_title"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="12dp"
            android:textAppearance="?attr/textAppearanceSubtitle1"
            android:maxLines="2"
            android:ellipsize="end"
            app:layout_constraintTop_toTopOf="@id/item_thumbnail"
            app:layout_constraintStart_toEndOf="@id/item_thumbnail"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Название медиа-элемента, которое может быть длинным"/>

        <TextView
            android:id="@+id/item_creator"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceBody2"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintTop_toBottomOf="@id/item_title"
            app:layout_constraintStart_toStartOf="@id/item_title"
            app:layout_constraintEnd_toEndOf="@id/item_title"
            tools:text="Автор/Режиссер: Имя Фамилия"/>

        <TextView
            android:id="@+id/item_type"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:background="@drawable/bg_tag_chip"
            android:paddingStart="8dp"
            android:paddingEnd="8dp"
            android:paddingTop="2dp"
            android:paddingBottom="2dp"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?attr/colorPrimary"
            app:layout_constraintTop_toBottomOf="@id/item_creator"
            app:layout_constraintStart_toStartOf="@id/item_title"
            tools:text="Фильм"/>

        <TextView
            android:id="@+id/item_notes"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:textAppearance="?attr/textAppearanceCaption"
            android:maxLines="3"
            android:ellipsize="end"
            android:visibility="gone"
            tools:visibility="visible"
            app:layout_constraintTop_toBottomOf="@id/item_type"
            app:layout_constraintStart_toStartOf="@id/item_title"
            app:layout_constraintEnd_toEndOf="@id/item_title"
            app:layout_constraintBottom_toBottomOf="parent"
            tools:text="Заметки пользователя к этому элементу: очень интересная деталь..."/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>

###############################################################################
# FILE: app\src\main\res\layout\item_comment.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingStart="16dp"
    android:paddingEnd="16dp"
    android:paddingTop="8dp"
    android:paddingBottom="8dp">

    <ImageView
        android:id="@+id/comment_author_avatar"
        android:layout_width="36dp"
        android:layout_height="36dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:srcCompat="@drawable/ic_profile_24"
        android:contentDescription="@string/user_avatar_desc"/>

    <TextView
        android:id="@+id/comment_author_name"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="8dp"
        android:textStyle="bold"
        app:layout_constraintStart_toEndOf="@id/comment_author_avatar"
        app:layout_constraintTop_toTopOf="@id/comment_author_avatar"
        app:layout_constraintEnd_toStartOf="@id/comment_date"
        tools:text="User Name"/>

    <TextView
        android:id="@+id/comment_text"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintStart_toStartOf="@id/comment_author_name"
        app:layout_constraintTop_toBottomOf="@id/comment_author_name"
        app:layout_constraintEnd_toEndOf="parent"
        tools:text="This is a sample comment text which can be quite long and wrap to multiple lines."/>

    <TextView
        android:id="@+id/comment_date"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="12sp"
        android:textColor="?android:attr/textColorSecondary"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="@id/comment_author_name"
        app:layout_constraintBottom_toBottomOf="@id/comment_author_name"
        tools:text="2h ago"/>
</androidx.constraintlayout.widget.ConstraintLayout>

###############################################################################
# FILE: app\src\main\res\layout\item_media_item_selectable.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="8dp"
    android:layout_marginTop="4dp"
    android:layout_marginEnd="8dp"
    android:layout_marginBottom="4dp"
    app:cardElevation="2dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="12dp">

        <ImageView
            android:id="@+id/media_item_thumbnail"
            android:layout_width="60dp"
            android:layout_height="80dp"
            android:scaleType="centerCrop"
            android:contentDescription="@string/media_item_thumbnail_desc"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            tools:srcCompat="@drawable/ic_image_placeholder_24"/>

        <TextView
            android:id="@+id/media_item_title"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="12dp"
            android:textAppearance="?attr/textAppearanceSubtitle1"
            android:maxLines="2"
            android:ellipsize="end"
            app:layout_constraintTop_toTopOf="@id/media_item_thumbnail"
            app:layout_constraintStart_toEndOf="@id/media_item_thumbnail"
            app:layout_constraintEnd_toEndOf="parent"
            tools:text="Название очень длинного медиа-элемента"/>

        <TextView
            android:id="@+id/media_item_creator"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceBody2"
            android:textColor="?android:attr/textColorSecondary"
            app:layout_constraintTop_toBottomOf="@id/media_item_title"
            app:layout_constraintStart_toStartOf="@id/media_item_title"
            app:layout_constraintEnd_toEndOf="@id/media_item_title"
            tools:text="Автор/Режиссер"/>

        <TextView
            android:id="@+id/media_item_type"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceCaption"
            app:layout_constraintTop_toBottomOf="@id/media_item_creator"
            app:layout_constraintStart_toStartOf="@id/media_item_title"
            tools:text="Тип элемента"/>

    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.card.MaterialCardView>

###############################################################################
# FILE: app\src\main\res\menu\bottom_nav_menu.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:id="@+id/homeFragment"
        android:icon="@drawable/ic_home_24"
        android:title="@string/bottom_nav_home" />
    <item
        android:id="@+id/myCollectionsFragment"
        android:icon="@drawable/ic_collections_24"
        android:title="@string/bottom_nav_my_collections" />
    <item
        android:id="@+id/userProfileFragment"
        android:icon="@drawable/ic_profile_24"
        android:title="@string/bottom_nav_profile" />
</menu>

###############################################################################
# FILE: app\src\main\res\mipmap-anydpi\ic_launcher.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

###############################################################################
# FILE: app\src\main\res\mipmap-anydpi\ic_launcher_round.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

###############################################################################
# FILE: app\src\main\res\navigation\nav_graph.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/nav_graph"
    app:startDestination="@id/homeFragment">

    <fragment
        android:id="@+id/login"
        android:name="com.example.finalproject.fragments.user.LoginFragment"
        android:label="fragment_login"
        tools:layout="@layout/fragment_login" >
        <action
            android:id="@+id/action_login_to_registration"
            app:destination="@id/registration" />
        <action
            android:id="@+id/action_login_to_homeFragment"
            app:destination="@id/homeFragment"
            app:popUpTo="@id/login"
            app:popUpToInclusive="true" />
        <action
            android:id="@+id/action_login_to_forgetPasswordFragment"
            app:destination="@id/forgetPasswordFragment" />
    </fragment>

    <fragment
        android:id="@+id/registration"
        android:name="com.example.finalproject.fragments.user.RegistrationFragment"
        android:label="fragment_registration"
        tools:layout="@layout/fragment_registration" >
        <action
            android:id="@+id/action_registration_to_login"
            app:destination="@id/login"
            app:popUpTo="@id/login"
            app:popUpToInclusive="true" />
    </fragment>

    <fragment
        android:id="@+id/userProfileFragment"
        android:name="com.example.finalproject.fragments.user.UserProfileFragment"
        android:label="fragment_user_profile"
        tools:layout="@layout/fragment_user_profile" >
        <action
            android:id="@+id/action_userProfileFragment_to_editProfile"
            app:destination="@id/editProfile" />
        <argument
            android:name="userId"
            app:argType="long"
            android:defaultValue="-1L" />
    </fragment>

    <fragment
        android:id="@+id/editProfile"
        android:name="com.example.finalproject.fragments.user.EditProfileFragment"
        android:label="fragment_edit_profile"
        tools:layout="@layout/fragment_edit_profile" >
        <argument
            android:name="userId"
            app:argType="long" />
    </fragment>

    <fragment
        android:id="@+id/homeFragment"
        android:name="com.example.finalproject.fragments.collection.HomeFragment"
        android:label="fragment_home"
        tools:layout="@layout/fragment_home" >
        <action
            android:id="@+id/action_homeFragment_to_collectionDetailsFragment"
            app:destination="@id/collectionDetailsFragment" />
    </fragment>

    <fragment
        android:id="@+id/myCollectionsFragment"
        android:name="com.example.finalproject.fragments.collection.MyCollectionsFragment"
        android:label="fragment_my_collections"
        tools:layout="@layout/fragment_my_collections" >
        <action
            android:id="@+id/action_myCollectionsFragment_to_createCollectionFragment"
            app:destination="@id/createCollectionFragment" />
        <action
            android:id="@+id/action_myCollectionsFragment_to_collectionDetailsFragment"
            app:destination="@id/collectionDetailsFragment" />
    </fragment>

    <fragment
        android:id="@+id/collectionDetailsFragment"
        android:name="com.example.finalproject.fragments.collection.CollectionDetailsFragment"
        android:label="fragment_collection_details"
        tools:layout="@layout/fragment_collection_details" >
        <argument
            android:name="collectionId"
            app:argType="long" />
        <action
            android:id="@+id/action_collectionDetailsFragment_to_userProfileFragment"
            app:destination="@id/userProfileFragment" />
        <action
            android:id="@+id/action_collectionDetailsFragment_to_mediaItemDetailsFragment"
            app:destination="@id/mediaItemDetailsFragment" />
        <action
            android:id="@+id/action_collectionDetailsFragment_to_addItemFragment"
            app:destination="@id/addItemFragment" />
    </fragment>

    <fragment
        android:id="@+id/createCollectionFragment"
        android:name="com.example.finalproject.fragments.collection.EditCollectionFragment"
        android:label="fragment_create_collection"
        tools:layout="@layout/fragment_create_collection" >
        <argument
            android:name="collectionId"
            app:argType="long"
            android:defaultValue="-1L" />
        <action
            android:id="@+id/action_createCollectionFragment_to_collectionDetailsFragment"
            app:destination="@id/collectionDetailsFragment"
            app:popUpTo="@id/myCollectionsFragment" />
    </fragment>

    <fragment
        android:id="@+id/addItemFragment"
        android:name="com.example.finalproject.fragments.collection.AddItemFragment"
        android:label="fragment_add_item"
        tools:layout="@layout/fragment_add_item" >
        <argument
            android:name="collectionId"
            app:argType="long" />
    </fragment>

    <fragment
        android:id="@+id/mediaItemDetailsFragment"
        android:name="com.example.finalproject.fragments.mediaitem.MediaItemDetailsFragment"
        android:label="fragment_media_item_details"
        tools:layout="@layout/fragment_media_item_details" >
        <argument
            android:name="mediaItemId"
            app:argType="long" />
        <action
            android:id="@+id/action_mediaItemDetailsFragment_to_editMediaItemFragment"
            app:destination="@id/editMediaItemFragment" />
    </fragment>

    <fragment
        android:id="@+id/editMediaItemFragment"
        android:name="com.example.finalproject.fragments.mediaitem.EditMediaItemFragment"
        android:label="fragment_edit_media_item"
        tools:layout="@layout/fragment_edit_media_item" >
        <argument
            android:name="mediaItemId"
            app:argType="long" />
    </fragment>

    <fragment
        android:id="@+id/forgetPasswordFragment"
        android:name="com.example.finalproject.fragments.user.ForgotPasswordFragment"
        android:label="fragment_forget_password"
        tools:layout="@layout/fragment_forgot_password" >
        <action
            android:id="@+id/action_forgetPasswordFragment_to_loginFragment"
            app:destination="@id/login"
            app:popUpTo="@id/login"
            app:popUpToInclusive="true" />
    </fragment>



    <fragment
        android:id="@+id/mediaItemSearchFragment"
        android:name="com.example.finalproject.fragments.mediaitem.MediaItemSearchFragment"
        android:label="fragment_media_item_search"
        tools:layout="@layout/fragment_media_item_search" />
</navigation>

###############################################################################
# FILE: app\src\main\res\values\colors.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="color_liked">#FF0000</color>
</resources>

###############################################################################
# FILE: app\src\main\res\values\strings.xml
###############################################################################

<resources>
    <string name="app_name">FinalProject</string>
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="login_logo_description">Логотип приложения</string>
    <string name="hint_email">Электронная почта</string>
    <string name="hint_password">Пароль</string>
    <string name="login_button_text">Войти</string>
    <string name="forgot_password_text">Забыли пароль?</string>
    <string name="no_account_text">Нет аккаунта?</string>
    <string name="sign_up_text">Зарегистрироваться</string>
    <string name="error_invalid_email">Неверный формат электронной почты</string>
    <string name="error_empty_password">Пароль не может быть пустым</string>
    <string name="action_loginFragment_to_registerFragment">action_loginFragment_to_registerFragment</string>

    <string name="register_button_text">Зарегистрироваться</string>
    <string name="hint_username">Имя пользователя</string>
    <string name="hint_display_name">Отображаемое имя (необязательно)</string>
    <string name="hint_confirm_password">Подтвердите пароль</string>
    <string name="error_empty_username">Имя пользователя не может быть пустым</string>
    <string name="error_password_too_short">Пароль должен содержать не менее 6 символов</string>
    <string name="error_passwords_do_not_match">Пароли не совпадают</string>
    <string name="registration_successful">Регистрация прошла успешно! Пожалуйста, войдите.</string>
    <string name="registration_failed">Ошибка регистрации</string>
    <string name="already_have_account">Уже есть аккаунт?</string>
    <string name="login_now_text">Войти</string>

    <string name="bottom_nav_home">Главная</string>
    <string name="bottom_nav_my_collections">Мои коллекции</string>
    <string name="bottom_nav_profile">Профиль</string>

    <string name="collection_cover_image_desc">Обложка коллекции</string>
    <string name="likes_icon_desc">Иконка лайков</string>
    <string name="views_icon_desc">Иконка просмотров</string>
    <string name="author_prefix">Автор: %1$s</string>
    <string name="unknown_author">Неизвестный автор</string>

    <string name="no_collections_found">Коллекций пока нет.</string>
    <string name="error_loading_collections">Ошибка загрузки коллекций</string>
    <string name="network_error">Сетевая ошибка</string>

    <string name="like_button_desc">Кнопка Лайк</string>
    <string name="collection_items_title">Элементы коллекции</string>
    <string name="collaborators_title">Соавторы</string>
    <string name="comments_title">Комментарии</string>
    <string name="add_comment_hint">Добавить комментарий...</string>
    <string name="post_comment_button">Опубликовать</string>
    <string name="error_loading_collection_details">Ошибка загрузки деталей коллекции</string>
    <string name="comment_posted_successfully">Комментарий опубликован</string>
    <string name="error_posting_comment">Ошибка публикации комментария</string>

    <string name="media_item_thumbnail_desc">Миниатюра элемента</string>
    <string name="user_avatar_desc">User Avatar\n</string>

    <string name="no_my_collections_found">У вас пока нет коллекций. Создайте первую!</string>
    <string name="create_new_collection_desc">Создать новую коллекцию</string>
    <string name="error_loading_my_collections">Ошибка загрузки ваших коллекций</string>
    <string name="please_login_to_see_collections">Пожалуйста, войдите, чтобы увидеть свои коллекции.</string>
    <string name="error_cannot_create_collection">Не удалось перейти к созданию коллекции</string>
    <string name="error_cannot_open_collection_details">Не удалось открыть детали коллекции</string>

    <string name="create_collection_title_toolbar">Создать коллекцию</string>
    <string name="hint_collection_title">Название коллекции*</string>
    <string name="hint_collection_description">Описание (необязательно)</string>
    <string name="hint_collection_cover_url">URL обложки (необязательно)</string>
    <string name="label_is_public">Сделать публичной</string>
    <string name="button_create_collection">Создать</string>
    <string name="error_collection_title_required">Название коллекции обязательно</string>
    <string name="collection_created_successfully">Коллекция успешно создана</string>
    <string name="error_creating_collection">Ошибка при создании коллекции</string>
    <string name="edit_collection_title_toolbar">Редактировать коллекцию</string>
    <string name="button_save_changes">Сохранить изменения</string>

    <string name="add_item_to_collection_toolbar">Добавить элемент в коллекцию</string>
    <string name="hint_media_item_id">ID медиа-элемента*</string>
    <string name="hint_item_notes">Заметки к элементу (необязательно)</string>
    <string name="button_add_item">Добавить элемент</string>
    <string name="error_media_item_id_required">ID медиа-элемента обязателен</string>
    <string name="item_added_successfully">Элемент успешно добавлен</string>
    <string name="error_adding_item">Ошибка при добавлении элемента</string>
    <string name="collection_id_missing">ID коллекции отсутствует</string>

    <string name="user_profile_title">Профиль пользователя</string>
    <string name="label_username">Имя пользователя:</string>
    <string name="label_display_name">Отображаемое имя:</string>
    <string name="label_email">Email:</string>
    <string name="label_bio">О себе:</string>
    <string name="label_joined_on">Присоединился:</string>
    <string name="label_last_login">Последний вход:</string>
    <string name="button_edit_profile">Редактировать профиль</string>
    <string name="button_logout">Выйти из аккаунта</string>
    <string name="confirm_logout_title">Подтверждение</string>
    <string name="confirm_logout_message">Вы уверены, что хотите выйти из аккаунта?</string>
    <string name="action_yes">Да</string>
    <string name="action_no">Нет</string>
    <string name="logged_out_successfully">Вы успешно вышли из аккаунта.</string>
    <string name="error_loading_profile">Ошибка загрузки профиля</string>
    <string name="user_not_found">Пользователь не найден</string>
    <string name="user_not_logged_in">Пользователь не авторизован</string>
    <string name="default_bio">Информация отсутствует.</string>
    <string name="default_display_name">Не указано</string>
    <string name="placeholder_date">дд.мм.гггг</string>

    <string name="edit_profile_toolbar_title">Редактирование профиля</string>
    <string name="hint_display_name_edit">Отображаемое имя</string>
    <string name="hint_bio_edit">О себе</string>
    <string name="hint_avatar_url_edit">URL аватара</string>
    <string name="button_save_profile_changes">Сохранить изменения</string>
    <string name="profile_updated_successfully">Профиль успешно обновлен</string>
    <string name="error_updating_profile">Ошибка при обновлении профиля</string>
    <string name="error_loading_data_for_edit">Ошибка загрузки данных для редактирования</string>

    <string name="media_item_details_title_toolbar">Детали элемента</string>
    <string name="label_media_item_title">Название:</string>
    <string name="label_media_item_creator">Автор/Создатель:</string>
    <string name="label_media_item_type">Тип:</string>
    <string name="label_media_item_description">Описание:</string>
    <string name="label_media_item_release_date">Дата выхода:</string>
    <string name="label_media_item_added_at">Добавлено:</string>
    <string name="label_media_item_external_url">Внешняя ссылка:</string>
    <string name="button_open_external_url">Открыть ссылку</string>
    <string name="button_edit_media_item">Редактировать элемент</string>
    <string name="button_delete_media_item">Удалить элемент</string>
    <string name="confirm_delete_media_item_title">Удалить элемент?</string>
    <string name="confirm_delete_media_item_message">Вы уверены, что хотите удалить этот медиа-элемент? Это действие необратимо.</string>
    <string name="media_item_deleted_successfully">Медиа-элемент удален</string>
    <string name="error_deleting_media_item">Ошибка удаления медиа-элемента</string>
    <string name="error_loading_media_item_details">Ошибка загрузки деталей элемента</string>
    <string name="media_item_not_found">Медиа-элемент не найден</string>
    <string name="no_external_url">Внешняя ссылка отсутствует</string>
    <string name="cannot_open_url">Не удалось открыть ссылку</string>

    <string name="edit_media_item_toolbar_title">Редактировать медиа-элемент</string>
    <string name="hint_media_item_title_edit">Название*</string>
    <string name="hint_media_item_creator_edit">Автор/Создатель</string>
    <string name="hint_media_item_description_edit">Описание</string>
    <string name="hint_media_item_thumbnail_url_edit">URL миниатюры</string>
    <string name="hint_media_item_external_url_edit">Внешняя ссылка (URL)</string>
    <string name="hint_media_item_release_date_edit">Дата выхода (гггг-мм-дд)</string>
    <string name="button_save_media_item_changes">Сохранить изменения</string>
    <string name="media_item_updated_successfully">Медиа-элемент обновлен</string>
    <string name="error_updating_media_item">Ошибка обновления медиа-элемента</string>
    <string name="error_media_item_title_required">Название медиа-элемента обязательно</string>
    <string name="label_media_item_tags">Теги:</string>
</resources>

###############################################################################
# FILE: app\src\main\res\values\themes.xml
###############################################################################

<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.FinalProject" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your light theme here. -->
        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
    </style>

    <style name="Theme.FinalProject" parent="Base.Theme.FinalProject" />
</resources>

###############################################################################
# FILE: app\src\main\res\values-night\themes.xml
###############################################################################

<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.FinalProject" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your dark theme here. -->
        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
    </style>
</resources>

###############################################################################
# FILE: app\src\main\res\xml\backup_rules.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

###############################################################################
# FILE: app\src\main\res\xml\data_extraction_rules.xml
###############################################################################

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\MainActivity.kt
###############################################################################

package com.example.finalproject

import android.os.Bundle
import android.view.View
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.navigation.NavController
import androidx.navigation.fragment.NavHostFragment
import androidx.navigation.ui.setupWithNavController
import com.example.finalproject.databinding.ActivityMainBinding
import com.example.finalproject.utils.AuthTokenProvider

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var navController: NavController

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        AuthTokenProvider.initialize(applicationContext)
        binding = ActivityMainBinding.inflate(layoutInflater)

        enableEdgeToEdge()
        setContentView(binding.root)
        ViewCompat.setOnApplyWindowInsetsListener(binding.main) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment
        navController = navHostFragment.navController
        val navGraph = navController.navInflater.inflate(R.navigation.nav_graph)

        if (AuthTokenProvider.isAuthenticated()) {
            navGraph.setStartDestination(R.id.homeFragment)
        } else {
            navGraph.setStartDestination(R.id.login)
        }
        navController.graph = navGraph

        binding.bottomNavigationView.setupWithNavController(navController)

        navController.addOnDestinationChangedListener { _, destination, _ ->
            when (destination.id) {
                R.id.login, R.id.registration, R.id.forgetPasswordFragment -> {
                    binding.bottomNavigationView.visibility = View.GONE
                }
                else -> {
                    binding.bottomNavigationView.visibility = View.VISIBLE
                }
            }
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        return navController.navigateUp() || super.onSupportNavigateUp()
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CollaboratorAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCollaboratorBinding
import com.example.finalproject.models.User // Предполагаем, что collaborators это List<User>

class CollaboratorAdapter(private val onCollaboratorClicked: (User) -> Unit) :
    ListAdapter<User, CollaboratorAdapter.CollaboratorViewHolder>(UserDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CollaboratorViewHolder {
        val binding = ItemCollaboratorBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return CollaboratorViewHolder(binding, onCollaboratorClicked)
    }

    override fun onBindViewHolder(holder: CollaboratorViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class CollaboratorViewHolder(
        private val binding: ItemCollaboratorBinding,
        private val onCollaboratorClicked: (User) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {
        fun bind(user: User) {
            binding.collaboratorName.text = user.displayName ?: user.username
            Glide.with(itemView.context)
                .load(user.avatarUrl)
                .placeholder(R.drawable.ic_profile_24)
                .error(R.drawable.ic_profile_24)
                .circleCrop()
                .into(binding.collaboratorAvatar)
            itemView.setOnClickListener { onCollaboratorClicked(user) }
        }
    }

    // Можно использовать общий UserDiffCallback, если он уже есть
    class UserDiffCallback : DiffUtil.ItemCallback<User>() {
        override fun areItemsTheSame(oldItem: User, newItem: User): Boolean {
            return oldItem.userId == newItem.userId
        }
        override fun areContentsTheSame(oldItem: User, newItem: User): Boolean {
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CollectionAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCollectionCardBinding
import com.example.finalproject.models.Collection

class CollectionAdapter(private val onItemClicked: (Collection) -> Unit) :
    ListAdapter<Collection, CollectionAdapter.CollectionViewHolder>(CollectionDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CollectionViewHolder {
        val binding = ItemCollectionCardBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return CollectionViewHolder(binding, onItemClicked)
    }

    override fun onBindViewHolder(holder: CollectionViewHolder, position: Int) {
        val collection = getItem(position)
        holder.bind(collection)
    }

    class CollectionViewHolder(
        private val binding: ItemCollectionCardBinding,
        private val onItemClicked: (Collection) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(collection: Collection) {
            binding.collectionTitleTextView.text = collection.title

            val authorName = collection.owner?.displayName ?: collection.owner?.username ?: itemView.context.getString(R.string.unknown_author)
            binding.collectionAuthorTextView.text = itemView.context.getString(R.string.author_prefix, authorName)

            binding.collectionLikesCountTextView.text = formatCount(collection.likeCount ?: 0)
            binding.collectionViewCountTextView.text = formatCount(collection.viewCount ?: 0) // viewCount у тебя не nullable

            Glide.with(itemView.context)
                .load(collection.coverImageUrl) // Убедись, что URL полный и рабочий
                .placeholder(R.drawable.ic_launcher_background) // Стандартная заглушка
                .error(R.drawable.ic_image_placeholder_24) // Заглушка при ошибке (создай ее)
                .into(binding.collectionCoverImageView)

            itemView.setOnClickListener {
                onItemClicked(collection)
            }
        }

        // Простая функция для форматирования чисел (1200 -> 1.2K)
        private fun formatCount(count: Int): String {
            return when {
                count >= 1_000_000 -> String.format("%.1fM", count / 1_000_000.0)
                count >= 1_000 -> String.format("%.1fK", count / 1_000.0)
                else -> count.toString()
            }
        }
    }

    class CollectionDiffCallback : DiffUtil.ItemCallback<Collection>() {
        override fun areItemsTheSame(oldItem: Collection, newItem: Collection): Boolean {
            return oldItem.collectionId == newItem.collectionId
        }

        override fun areContentsTheSame(oldItem: Collection, newItem: Collection): Boolean {
            // Сравнивай по нужным полям, если объект Collection может меняться без смены ID
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CollectionItemAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCollectionItemEntryBinding
import com.example.finalproject.models.CollectionItemEntry

class CollectionItemAdapter(private val onItemClicked: (CollectionItemEntry) -> Unit) :
    ListAdapter<CollectionItemEntry, CollectionItemAdapter.ItemViewHolder>(ItemDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemViewHolder {
        val binding = ItemCollectionItemEntryBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return ItemViewHolder(binding, onItemClicked)
    }

    override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class ItemViewHolder(
        private val binding: ItemCollectionItemEntryBinding,
        private val onItemClicked: (CollectionItemEntry) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(entry: CollectionItemEntry) {
            val mediaItem = entry.mediaItem
            binding.itemTitle.text = mediaItem.title
            binding.itemCreator.text = mediaItem.creator ?: itemView.context.getString(R.string.unknown_author) // или другой текст

            mediaItem.contentType?.typeName?.let {
                binding.itemType.text = it
                binding.itemType.visibility = View.VISIBLE
            } ?: run {
                binding.itemType.visibility = View.GONE
            }

            entry.notes?.let {
                binding.itemNotes.text = it
                binding.itemNotes.visibility = View.VISIBLE
            } ?: run {
                binding.itemNotes.visibility = View.GONE
            }

            Glide.with(itemView.context)
                .load(mediaItem.thumbnailUrl)
                .placeholder(R.drawable.ic_image_placeholder_24)
                .error(R.drawable.ic_image_placeholder_24)
                .into(binding.itemThumbnail)

            itemView.setOnClickListener {
                onItemClicked(entry)
            }
        }
    }

    class ItemDiffCallback : DiffUtil.ItemCallback<CollectionItemEntry>() {
        override fun areItemsTheSame(oldItem: CollectionItemEntry, newItem: CollectionItemEntry): Boolean {
            return oldItem.mediaItem.itemId == newItem.mediaItem.itemId && oldItem.collectionId == newItem.collectionId
        }

        override fun areContentsTheSame(oldItem: CollectionItemEntry, newItem: CollectionItemEntry): Boolean {
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\CommentAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemCommentBinding
import com.example.finalproject.models.CollectionComment

class CommentAdapter(private val onAuthorClicked: (Long?) -> Unit) :
    ListAdapter<CollectionComment, CommentAdapter.CommentViewHolder>(CommentDiffCallback()) {

    // private val dateFormat = SimpleDateFormat("dd MMM yyyy, HH:mm", Locale.getDefault())

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CommentViewHolder {
        val binding = ItemCommentBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return CommentViewHolder(binding, onAuthorClicked)
    }

    override fun onBindViewHolder(holder: CommentViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class CommentViewHolder(
        private val binding: ItemCommentBinding,
        private val onAuthorClicked: (Long?) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {
        fun bind(comment: CollectionComment) {
            binding.commentText.text = comment.commentText
            binding.commentAuthorName.text = comment.user?.displayName ?: comment.user?.username ?: itemView.context.getString(R.string.unknown_author)
            // binding.commentDate.text = comment.createdAt // TODO: Format date properly
            // Простая заглушка для даты
            binding.commentDate.text = " "

            Glide.with(itemView.context)
                .load(comment.user?.avatarUrl)
                .placeholder(R.drawable.ic_profile_24) // Заглушка
                .error(R.drawable.ic_profile_24)
                .circleCrop()
                .into(binding.commentAuthorAvatar)

            binding.commentAuthorAvatar.setOnClickListener { onAuthorClicked(comment.userId) }
            binding.commentAuthorName.setOnClickListener { onAuthorClicked(comment.userId) }
        }
    }

    class CommentDiffCallback : DiffUtil.ItemCallback<CollectionComment>() {
        override fun areItemsTheSame(oldItem: CollectionComment, newItem: CollectionComment): Boolean {
            return oldItem.commentId == newItem.commentId
        }
        override fun areContentsTheSame(oldItem: CollectionComment, newItem: CollectionComment): Boolean {
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\adapters\MediaItemAdapter.kt
###############################################################################

package com.example.finalproject.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.databinding.ItemMediaItemSelectableBinding
import com.example.finalproject.models.MediaItem

class MediaItemAdapter(private val onItemClicked: (MediaItem) -> Unit) :
    ListAdapter<MediaItem, MediaItemAdapter.MediaItemViewHolder>(MediaItemDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MediaItemViewHolder {
        val binding = ItemMediaItemSelectableBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return MediaItemViewHolder(binding, onItemClicked)
    }

    override fun onBindViewHolder(holder: MediaItemViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class MediaItemViewHolder(
        private val binding: ItemMediaItemSelectableBinding,
        private val onItemClicked: (MediaItem) -> Unit
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(mediaItem: MediaItem) {
            binding.mediaItemTitle.text = mediaItem.title
            binding.mediaItemCreator.text = mediaItem.creator ?: itemView.context.getString(R.string.unknown_author)
            binding.mediaItemType.text = mediaItem.contentType?.typeName ?: "N/A"

            Glide.with(itemView.context)
                .load(mediaItem.thumbnailUrl)
                .placeholder(R.drawable.ic_image_placeholder_24)
                .error(R.drawable.ic_image_placeholder_24)
                .into(binding.mediaItemThumbnail)

            itemView.setOnClickListener {
                onItemClicked(mediaItem)
            }
        }
    }

    class MediaItemDiffCallback : DiffUtil.ItemCallback<MediaItem>() {
        override fun areItemsTheSame(oldItem: MediaItem, newItem: MediaItem): Boolean {
            return oldItem.itemId == newItem.itemId
        }

        override fun areContentsTheSame(oldItem: MediaItem, newItem: MediaItem): Boolean {
            return oldItem == newItem
        }
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\api\ApiService.kt
###############################################################################

package com.example.finalproject.api

import com.example.finalproject.models.Collection
import com.example.finalproject.models.request.LoginRequest
import com.example.finalproject.models.responce.AuthResponse
import com.example.finalproject.models.CollectionComment
import com.example.finalproject.models.CollectionItemEntry
import com.example.finalproject.models.request.ForgotPasswordRequest
import com.example.finalproject.models.responce.PagedResponse
import com.example.finalproject.models.request.RegistrationRequest
import com.example.finalproject.models.CollectionCollaborator
import com.example.finalproject.models.ContentType
import com.example.finalproject.models.MediaItem
import com.example.finalproject.models.User
import com.example.finalproject.models.request.CreateCollectionRequest
import com.example.finalproject.models.request.CreateCommentRequest
import com.example.finalproject.models.request.AddItemToCollectionRequest
import com.example.finalproject.models.request.CreateMediaItemRequest
import com.example.finalproject.models.request.UpdateMediaItemRequest
import com.example.finalproject.models.request.UpdateProfileRequest
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.http.Body
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.PUT
import retrofit2.http.Path
import retrofit2.http.Query

interface ApiService {
    @POST("vc-collections/collections")
    fun createCollection(
        @Body createCollectionRequest: CreateCollectionRequest
    ): Call<Collection>

    // @PUT("vc-collections/collections/{id}")
    // fun updateCollection(
    //     @Path("id") collectionId: Int,
    //     @Body updateCollectionRequest: CreateCollectionRequest
    // ): Call<Collection>

    @GET("vc-collections/collections/{id}")
    fun getCollectionById(@Path("id") collectionId: Long): Call<Collection>

    @GET("vc-collections/collections/public-feed")
    fun getPublicCollections(
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 10,
        @Query("sort") sort: String = "viewCount,desc"
    ): Call<PagedResponse<Collection>>

    @GET("vc-collections/collections/my")
    fun getMyCollections(
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 10,
        @Query("sort") sort: String = "updatedAt,desc"
    ): Call<PagedResponse<Collection>>

    @GET("vc-collections/collections/{collectionId}/items")
    fun getCollectionItems(
        @Path("collectionId") collectionId: Long,
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 20
    ): Call<PagedResponse<CollectionItemEntry>>

    @POST("vc-collections/collections/{collectionId}/items")
    fun addItemToCollection(
        @Path("collectionId") collectionId: Long,
        @Body addItemRequest: AddItemToCollectionRequest
    ): Call<CollectionItemEntry>

    @GET("vc-collections/collections/{collectionId}/comments")
    fun getCollectionComments(
        @Path("collectionId") collectionId: Long,
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 10
    ): Call<PagedResponse<CollectionComment>>

    @GET("vc-collections/collections/{collectionId}/collaborators")
    fun getCollectionCollaborators(@Path("collectionId") collectionId: Long): Call<List<CollectionCollaborator>>

    @POST("vc-collections/collections/{collectionId}/like")
    fun likeCollection(@Path("collectionId") collectionId: Long): Call<ResponseBody>

    @DELETE("vc-collections/collections/{collectionId}/like")
    fun unlikeCollection(@Path("collectionId") collectionId: Long): Call<ResponseBody>

    @POST("vc-collections/collections/{collectionId}/comments")
    fun addCollectionComment(
        @Path("collectionId") collectionId: Long,
        @Body commentRequest: CreateCommentRequest
    ): Call<CollectionComment>


    @GET("vc-content/media-items/{itemId}")
    fun getMediaItemById(@Path("itemId") itemId: Long): Call<MediaItem>

    @POST("vc-content/media-items")
    fun createMediaItem(@Body mediaItemCreateRequest: CreateMediaItemRequest): Call<MediaItem>

    @PUT("vc-content/media-items/{itemId}")
    fun updateMediaItem(
        @Path("itemId") itemId: Long,
        @Body mediaItemUpdateRequest: UpdateMediaItemRequest
    ): Call<MediaItem>

    @DELETE("vc-content/media-items/{itemId}")
    fun deleteMediaItem(@Path("itemId") itemId: Long): Call<ResponseBody>

    @GET("vc-content/media-items/search")
    fun searchMediaItems(
        @Query("query") query: String,
        @Query("type") type: String? = null,
        @Query("page") page: Int = 0,
        @Query("size") size: Int = 15
    ): Call<PagedResponse<MediaItem>>

    @GET("vc-content/content-types")
    fun getContentTypes(): Call<List<ContentType>>


    @POST("vc-users/auth/login")
    fun loginUser(@Body loginRequest: LoginRequest): Call<AuthResponse>

    @POST("vc-users/auth/forgot-password")
    fun forgotPassword(@Body forgotPasswordRequest: ForgotPasswordRequest): Call<ResponseBody>

    @POST("vc-users/auth/register")
    fun registerUser(@Body registrationRequest: RegistrationRequest): Call<AuthResponse>

    @GET("vc-users/users/{userId}")
    fun getUserProfileById(@Path("userId") userId: Long): Call<User>

    @PUT("vc-users/users/me")
    fun updateMyProfile(@Body updateProfileRequest: UpdateProfileRequest): Call<User>
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\api\AuthInterceptor.kt
###############################################################################

package com.example.finalproject.api

import com.example.finalproject.utils.AuthTokenProvider
import okhttp3.Interceptor
import okhttp3.Response

class AuthInterceptor : Interceptor {
    override fun intercept(chain: Interceptor.Chain): Response {
        val originalRequest = chain.request()
        val token = AuthTokenProvider.getToken()

        val requestBuilder = originalRequest.newBuilder()
            .header("Accept", "application/json")
            .method(originalRequest.method, originalRequest.body)

        if (token != null) {
            requestBuilder.header("Authorization", "Bearer $token")
        }

        val request = requestBuilder.build()
        return chain.proceed(request)
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\api\RetrofitClient.kt
###############################################################################

package com.example.finalproject.api

import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object RetrofitClient {
    private const val BASE_URL = "http://10.0.2.2:8765/"

    private val okHttpClient = OkHttpClient.Builder()
        .addInterceptor(AuthInterceptor())
         .addInterceptor(HttpLoggingInterceptor().apply {
             level = HttpLoggingInterceptor.Level.BODY
         })
        .build()

    val instance: ApiService by lazy {
        val retrofit = Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
        retrofit.create(ApiService::class.java)
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\AchievementType.kt
###############################################################################

package com.example.finalproject.models

data class AchievementType(
    val achievementId: Int,
    val name: String,
    val description: String?,
    val iconUrl: String?,
    val requirement: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\Collection.kt
###############################################################################

package com.example.finalproject.models

data class Collection(
    val collectionId: Long,
    val title: String,
    val description: String?,
    val coverImageUrl: String?,
    val createdAt: String?,
    val updatedAt: String?,
    val isPublic: Boolean,
    val viewCount: Int?,
    val owner: User? = null,
    val items: List<CollectionItemEntry>? = null,
    val collaborators: List<User>? = null,
    val likeCount: Int? = null,
    val commentCount: Int? = null
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionCollaborator.kt
###############################################################################

package com.example.finalproject.models

data class CollectionCollaborator(
    val collectionId: Int,
    val userId: Int,
    val role: String,
    val joinedAt: String, // Или использовать тип Date/Timestamp
    val user: User? = null // Если API будет возвращать детали соавтора
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionComment.kt
###############################################################################

package com.example.finalproject.models

data class CollectionComment(
    val commentId: Int,
    val collectionId: Long,
    val userId: Long?,
    val commentText: String,
    val createdAt: String, // Или использовать тип Date/Timestamp
    val user: User? = null // Детали пользователя, оставившего комментарий
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionItemEntry.kt
###############################################################################

package com.example.finalproject.models

data class CollectionItemEntry(
    val collectionId: Long,
    val itemId: Long,
    val addedByUserId: Int?,
    val addedAt: String,
    val position: Int?,
    val notes: String?,
    val mediaItem: MediaItem,
    val addedByUser: User? = null
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\CollectionLike.kt
###############################################################################

package com.example.finalproject.models

data class CollectionLike(
    val userId: Int,
    val collectionId: Int,
    val likedAt: String, // Или использовать тип Date/Timestamp
    val user: User? = null // Детали пользователя, который поставил лайк
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\ContentType.kt
###############################################################################

package com.example.finalproject.models

data class ContentType(
    val typeId: Long,
    val typeName: String,
    val typeIcon: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\MediaItem.kt
###############################################################################

package com.example.finalproject.models

data class MediaItem(
    val itemId: Long,
    val typeId: Long,
    val title: String,
    val creator: String?,
    val description: String?,
    val thumbnailUrl: String?,
    val externalUrl: String?,
    val releaseDate: String?,
    val addedAt: String,
    val contentType: ContentType? = null,
    val tags: List<Tag>? = null
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\PageableDetails.kt
###############################################################################

package com.example.finalproject.models

import com.example.finalproject.models.responce.SortProperty
import com.google.gson.annotations.SerializedName

data class PageableDetails(
    @SerializedName("pageNumber")
    val pageNumber: Int,

    @SerializedName("pageSize")
    val pageSize: Int,

    @SerializedName("sort") // Информация о сортировке, примененной к этому pageable запросу
    val sortDetails: List<SortProperty>,

    @SerializedName("offset")
    val offset: Long,

    @SerializedName("paged")
    val paged: Boolean,

    @SerializedName("unpaged")
    val unpaged: Boolean
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\Tag.kt
###############################################################################

package com.example.finalproject.models

data class Tag(
    val tagId: Long,
    val tagName: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\User.kt
###############################################################################

package com.example.finalproject.models

data class User(
    val userId: Long?,
    val username: String,
    val email: String,
    val displayName: String?,
    val bio: String?,
    val avatarUrl: String?,
    val createdAt: String,
    val lastLogin: String?,
    val isActive: Boolean?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\UserAchievement.kt
###############################################################################

package com.example.finalproject.models

data class UserAchievement(
    val userId: Int,
    val achievementId: Int,
    val achievedAt: String, // Или использовать тип Date/Timestamp
    val achievementDetails: AchievementType? = null // Детали самого достижения
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\UserFollow.kt
###############################################################################

package com.example.finalproject.models

data class UserFollow(
    val followerId: Int,
    val followedId: Int,
    val followedAt: String, // Или использовать тип Date/Timestamp
    val followerDetails: User? = null, // Детали подписчика
    val followedDetails: User? = null  // Детали того, на кого подписаны
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\utils\AuthTokenProvider.kt
###############################################################################

package com.example.finalproject.utils

import android.content.Context
import android.content.SharedPreferences
import com.example.finalproject.models.User
import com.google.gson.Gson
import com.google.gson.JsonSyntaxException

object AuthTokenProvider {

    private const val PREFS_NAME = "auth_prefs"
    private const val KEY_AUTH_TOKEN = "auth_token"
    private const val KEY_CURRENT_USER = "current_user"

    private lateinit var sharedPreferences: SharedPreferences
    private val gson = Gson()

    fun initialize(context: Context) {
        sharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    }

    fun saveToken(token: String?) {
        sharedPreferences.edit().putString(KEY_AUTH_TOKEN, token).apply()
    }

    fun getToken(): String? {
        return sharedPreferences.getString(KEY_AUTH_TOKEN, null)
    }

    fun saveUser(user: User?) {
        val userJson = if (user != null) gson.toJson(user) else null
        sharedPreferences.edit().putString(KEY_CURRENT_USER, userJson).apply()
    }

    fun getCurrentUser(): User? {
        val userJson = sharedPreferences.getString(KEY_CURRENT_USER, null)
        return if (userJson != null) {
            try {
                gson.fromJson(userJson, User::class.java)
            } catch (e: JsonSyntaxException) {
                clearAuthData()
                null
            }
        } else {
            null
        }
    }

    fun clearAuthData() {
        sharedPreferences.edit()
            .remove(KEY_AUTH_TOKEN)
            .remove(KEY_CURRENT_USER)
            .apply()
    }

    fun isAuthenticated(): Boolean {
        return getToken() != null && getCurrentUser() != null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\AddItemFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AdapterView
import android.widget.ArrayAdapter
import android.widget.TextView
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.core.widget.doOnTextChanged
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentAddItemBinding
import com.example.finalproject.models.CollectionItemEntry
import com.example.finalproject.models.ContentType // Импорт модели ContentType
import com.example.finalproject.models.MediaItem
import com.example.finalproject.models.request.AddItemToCollectionRequest
import com.example.finalproject.models.request.CreateMediaItemRequest
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.Locale

class AddItemFragment : Fragment() {

    private var _binding: FragmentAddItemBinding? = null
    private val binding get() = _binding!!

    private val args: AddItemFragmentArgs by navArgs()
    private var collectionId: Long = -1L

    private val releaseDateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.US)
    private var contentTypesList: List<ContentType> = emptyList()
    private var selectedContentTypeId: Long? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        collectionId = args.collectionId
        if (collectionId == -1L) {
            Toast.makeText(context, getString(R.string.collection_id_missing), Toast.LENGTH_LONG).show()
            Log.e("AddItemFragment", "Collection ID is missing.")
            findNavController().popBackStack()
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentAddItemBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        fetchContentTypes() // Загружаем типы контента

        binding.thumbnailUrlNewMediaTextField.doOnTextChanged { text, _, _, _ ->
            Glide.with(this)
                .load(text.toString().trim())
                .placeholder(R.drawable.ic_image_placeholder_24)
                .error(R.drawable.ic_image_placeholder_24)
                .into(binding.newMediaItemThumbnailPreview)
        }

        binding.contentTypeSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                if (position > 0 && contentTypesList.isNotEmpty()) { // Пропускаем prompt "Выберите тип"
                    selectedContentTypeId = contentTypesList[position - 1].typeId
                } else {
                    selectedContentTypeId = null
                }
            }
            override fun onNothingSelected(parent: AdapterView<*>?) {
                selectedContentTypeId = null
            }
        }

        binding.addItemButton.setOnClickListener {
            if (!AuthTokenProvider.isAuthenticated()) {
                Toast.makeText(context, R.string.please_login_to_see_collections, Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            if (collectionId != -1L) {
                handleCreateAndAddItemToCollection()
            } else {
                Toast.makeText(context, getString(R.string.collection_id_missing), Toast.LENGTH_LONG).show()
            }
        }
    }

    private fun fetchContentTypes() {
        setLoading(true) // Можно добавить отдельный ProgressBar для спиннера
        RetrofitClient.instance.getContentTypes().enqueue(object: Callback<List<ContentType>> {
            override fun onResponse(call: Call<List<ContentType>>, response: Response<List<ContentType>>) {
                setLoading(false)
                if (response.isSuccessful) {
                    contentTypesList = response.body() ?: emptyList()
                    setupContentTypeSpinner()
                } else {
                    Toast.makeText(context, "Ошибка загрузки типов контента: ${response.code()}", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<List<ContentType>>, t: Throwable) {
                setLoading(false)
                Toast.makeText(context, "Сетевая ошибка при загрузке типов: ${t.message}", Toast.LENGTH_SHORT).show()
            }
        })
    }

    private fun setupContentTypeSpinner() {
        val typeNames = mutableListOf("Выберите тип*") // Добавляем подсказку
        typeNames.addAll(contentTypesList.map { it.typeName })

        val adapter = ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, typeNames).apply {
            setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        }
        binding.contentTypeSpinner.adapter = adapter
    }


    private fun validateMediaItemFields(): CreateMediaItemRequest? {
        val title = binding.titleNewMediaTextField.text.toString().trim()

        if (title.isEmpty()) {
            binding.titleNewMediaLayout.error = getString(R.string.error_media_item_title_required)
            (binding.titleNewMediaLayout.editText as? TextView)?.error = getString(R.string.error_media_item_title_required) // Для отображения ошибки в Material EditText
            return null
        } else {
            binding.titleNewMediaLayout.error = null
        }

        if (selectedContentTypeId == null) {
            Toast.makeText(context, "Пожалуйста, выберите тип контента", Toast.LENGTH_SHORT).show()
            // Можно подсветить спиннер
            (binding.contentTypeSpinner.selectedView as? TextView)?.error = "Выберите тип"
            return null
        }

        val creator = binding.creatorNewMediaTextField.text.toString().trim().ifEmpty { null }
        val description = binding.descriptionNewMediaTextField.text.toString().trim().ifEmpty { null }
        val thumbnailUrl = binding.thumbnailUrlNewMediaTextField.text.toString().trim().ifEmpty { null }
        val externalUrl = binding.externalUrlNewMediaTextField.text.toString().trim().ifEmpty { null }
        val releaseDateString = binding.releaseDateNewMediaTextField.text.toString().trim().ifEmpty { null }

        if (releaseDateString != null) {
            try {
                releaseDateFormat.isLenient = false
                releaseDateFormat.parse(releaseDateString)
            } catch (e: ParseException) {
                binding.releaseDateNewMediaLayout.error = "Неверный формат даты (гггг-мм-дд)"
                return null
            }
            binding.releaseDateNewMediaLayout.error = null
        }

        return CreateMediaItemRequest(
            title = title,
            typeId = selectedContentTypeId!!,
            creator = creator,
            description = description,
            thumbnailUrl = thumbnailUrl,
            externalUrl = externalUrl,
            releaseDate = releaseDateString
        )
    }


    private fun handleCreateAndAddItemToCollection() {
        val createMediaItemRequest = validateMediaItemFields() ?: return
        val notesForItemCollection = binding.itemNotesEditText.text.toString().trim().ifEmpty { null }

        setLoading(true)

        RetrofitClient.instance.createMediaItem(createMediaItemRequest)
            .enqueue(object : Callback<MediaItem> {
                override fun onResponse(call: Call<MediaItem>, response: Response<MediaItem>) {
                    if (response.isSuccessful) {
                        val createdMediaItem = response.body()
                        if (createdMediaItem != null) {
                            Log.d("AddItemFragment", "MediaItem created: ID ${createdMediaItem.itemId}")
                            addNewlyCreatedItemToCollection(createdMediaItem.itemId, notesForItemCollection)
                        } else {
                            setLoading(false)
                            Toast.makeText(context, "Ошибка создания медиа-элемента: пустой ответ", Toast.LENGTH_LONG).show()
                        }
                    } else {
                        setLoading(false)
                        val errorMsg = response.errorBody()?.string() ?: "Ошибка создания медиа-элемента"
                        Toast.makeText(context, "Ошибка ${response.code()}: $errorMsg", Toast.LENGTH_LONG).show()
                        Log.e("AddItemFragment", "API Error creating MediaItem ${response.code()}: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<MediaItem>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Сетевая ошибка при создании медиа-элемента: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("AddItemFragment", "Network Failure creating MediaItem", t)
                }
            })
    }

    private fun addNewlyCreatedItemToCollection(mediaItemId: Long, notes: String?) {
        val addItemToCollectionRequest = AddItemToCollectionRequest(mediaItemId = mediaItemId, notes = notes)

        RetrofitClient.instance.addItemToCollection(collectionId, addItemToCollectionRequest)
            .enqueue(object : Callback<CollectionItemEntry> {
                override fun onResponse(call: Call<CollectionItemEntry>, response: Response<CollectionItemEntry>) {
                    setLoading(false)
                    if (response.isSuccessful && response.code() == 201) {
                        Toast.makeText(context, getString(R.string.item_added_successfully), Toast.LENGTH_SHORT).show()
                        Log.d("AddItemFragment", "Item ID $mediaItemId added to collection $collectionId")
                        findNavController().popBackStack()
                    } else {
                        val errorMsg = response.errorBody()?.string() ?: getString(R.string.error_adding_item)
                        Toast.makeText(context, "Ошибка добавления в коллекцию ${response.code()}: $errorMsg", Toast.LENGTH_LONG).show()
                        Log.e("AddItemFragment", "API Error adding item to collection ${response.code()}: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<CollectionItemEntry>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Сетевая ошибка при добавлении в коллекцию: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("AddItemFragment", "Network Failure adding item to collection", t)
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.addItemProgressBar.isVisible = isLoading
        binding.titleNewMediaTextField.isEnabled = !isLoading
        binding.contentTypeSpinner.isEnabled = !isLoading
        binding.creatorNewMediaTextField.isEnabled = !isLoading
        binding.descriptionNewMediaTextField.isEnabled = !isLoading
        binding.thumbnailUrlNewMediaTextField.isEnabled = !isLoading
        binding.externalUrlNewMediaTextField.isEnabled = !isLoading
        binding.releaseDateNewMediaTextField.isEnabled = !isLoading
        binding.itemNotesEditText.isEnabled = !isLoading
        binding.addItemButton.isEnabled = !isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\CollectionDetailsFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.content.ContextCompat
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import androidx.recyclerview.widget.LinearLayoutManager
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.adapters.CollectionItemAdapter
import com.example.finalproject.adapters.CommentAdapter
import com.example.finalproject.adapters.CollaboratorAdapter
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentCollectionDetailsBinding
import com.example.finalproject.models.Collection
import com.example.finalproject.models.CollectionComment
import com.example.finalproject.models.CollectionItemEntry
import com.example.finalproject.models.request.CreateCommentRequest
import com.example.finalproject.models.responce.PagedResponse
import com.example.finalproject.models.User
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class CollectionDetailsFragment : Fragment() {

    private var _binding: FragmentCollectionDetailsBinding? = null
    private val binding get() = _binding!!

    private val args: CollectionDetailsFragmentArgs by navArgs()

    private lateinit var itemsAdapter: CollectionItemAdapter
    private lateinit var commentsAdapter: CommentAdapter
    private lateinit var collaboratorAdapter: CollaboratorAdapter

    private var currentCollection: Collection? = null
    private var isLikedByCurrentUser: Boolean = false

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentCollectionDetailsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupAdapters()
        fetchCollectionDetails(args.collectionId)

        binding.fabLikeCollection.setOnClickListener {
            handleLikeClicked()
        }
        binding.postCommentButton.setOnClickListener {
            postComment()
        }
        binding.fabAddItemToCollection.setOnClickListener {
            currentCollection?.collectionId?.let { collId ->
                val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToAddItemFragment(collId)
                findNavController().navigate(action)
            }
        }
    }

    private fun setupAdapters() {
        itemsAdapter = CollectionItemAdapter { itemEntry ->
            val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToMediaItemDetailsFragment(itemEntry.mediaItem.itemId)
            findNavController().navigate(action)
        }
        binding.collectionItemsRecyclerView.apply {
            adapter = itemsAdapter
            layoutManager = LinearLayoutManager(context)
            isNestedScrollingEnabled = false
        }

        commentsAdapter = CommentAdapter { userId ->
            userId?.let {
                val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToUserProfileFragment(it.toLong())
                findNavController().navigate(action)
            }
        }
        binding.commentsRecyclerView.apply {
            adapter = commentsAdapter
            layoutManager = LinearLayoutManager(context)
            isNestedScrollingEnabled = false
        }

        collaboratorAdapter = CollaboratorAdapter { user ->
            user.userId?.let { collaboratorUserId ->
                val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToUserProfileFragment(collaboratorUserId)
                findNavController().navigate(action)
            }
        }
        binding.collaboratorsRecyclerView.apply {
            adapter = collaboratorAdapter
            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
            isNestedScrollingEnabled = false
        }
    }

    private fun fetchCollectionDetails(collectionId: Long) {
        setLoading(true)
        RetrofitClient.instance.getCollectionById(collectionId)
            .enqueue(object : Callback<Collection> {
                override fun onResponse(call: Call<Collection>, response: Response<Collection>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { collection ->
                            currentCollection = collection
                            displayCollectionDetails(collection)
                            updateLikeButtonState()
                            fetchAdditionalData(collection)
                        } ?: handleApiError(getString(R.string.error_loading_collection_details) + " (пустой ответ)")
                    } else {
                        handleApiError("Ошибка ${response.code()}: ${response.message()}")
                    }
                }

                override fun onFailure(call: Call<Collection>, t: Throwable) {
                    setLoading(false)
                    handleApiError(getString(R.string.network_error) + ": ${t.localizedMessage}")
                    Log.e("CollectionDetails", "API Failure", t)
                }
            })
    }

    private fun fetchAdditionalData(collection: Collection) {
        if (collection.items.isNullOrEmpty()) {
            fetchItems(collection.collectionId)
        } else {
            itemsAdapter.submitList(collection.items)
        }
        fetchComments(collection.collectionId)

        if (!collection.collaborators.isNullOrEmpty()) {
            binding.collaboratorsTitle.isVisible = true
            binding.collaboratorsRecyclerView.isVisible = true
            binding.divider3.isVisible = true
            collaboratorAdapter.submitList(collection.collaborators)
        } else {
            binding.collaboratorsTitle.isVisible = false
            binding.collaboratorsRecyclerView.isVisible = false
            binding.divider3.isVisible = false
        }
    }


    private fun fetchItems(collectionId: Long) {
        RetrofitClient.instance.getCollectionItems(collectionId)
            .enqueue(object : Callback<PagedResponse<CollectionItemEntry>> {
                override fun onResponse(call: Call<PagedResponse<CollectionItemEntry>>, response: Response<PagedResponse<CollectionItemEntry>>) {
                    if (response.isSuccessful) {
                        response.body()?.content?.let { itemsAdapter.submitList(it) }
                    } else {
                        Log.e("CollectionDetails", "Error fetching items: ${response.code()}")
                    }
                }
                override fun onFailure(call: Call<PagedResponse<CollectionItemEntry>>, t: Throwable) {
                    Log.e("CollectionDetails", "Failure fetching items", t)
                }
            })
    }

    private fun fetchComments(collectionId: Long) {
        RetrofitClient.instance.getCollectionComments(collectionId)
            .enqueue(object : Callback<PagedResponse<CollectionComment>> {
                override fun onResponse(call: Call<PagedResponse<CollectionComment>>, response: Response<PagedResponse<CollectionComment>>) {
                    if (response.isSuccessful) {
                        response.body()?.content?.let { commentsAdapter.submitList(it) }
                    } else {
                        Log.e("CollectionDetails", "Error fetching comments: ${response.code()}")
                    }
                }
                override fun onFailure(call: Call<PagedResponse<CollectionComment>>, t: Throwable) {
                    Log.e("CollectionDetails", "Failure fetching comments", t)
                }
            })
    }


    private fun displayCollectionDetails(collection: Collection) {
        binding.collectionDetailTitle.text = collection.title
        val authorName = collection.owner?.displayName ?: collection.owner?.username ?: getString(R.string.unknown_author)
        binding.collectionDetailAuthor.text = getString(R.string.author_prefix, authorName)
        binding.collectionDetailAuthor.setOnClickListener {
            collection.owner?.userId?.let { userId ->
                Toast.makeText(context, "Открыть профиль автора ID: $userId", Toast.LENGTH_SHORT).show()
                val action = CollectionDetailsFragmentDirections.actionCollectionDetailsFragmentToUserProfileFragment(userId)
                findNavController().navigate(action)
            }
        }

        binding.collectionDetailDescription.text = collection.description
        binding.collectionDetailDescription.isVisible = !collection.description.isNullOrEmpty()

        binding.collectionDetailLikesCount.text = formatCount(collection.likeCount ?: 0)
        binding.collectionDetailViewsCount.text = formatCount(collection.viewCount ?: 0)
        binding.collectionDetailCommentsCount.text = (collection.commentCount ?: 0).toString()

        Glide.with(this)
            .load(collection.coverImageUrl)
            .placeholder(R.drawable.ic_launcher_background)
            .error(R.drawable.ic_image_placeholder_24)
            .into(binding.collectionDetailCoverImage)

        collection.items?.let { itemsAdapter.submitList(it) }
    }

    private fun handleLikeClicked() {
        val collectionId = currentCollection?.collectionId ?: return
        setLikeButtonLoading(true)

        val call = if (isLikedByCurrentUser) {
            RetrofitClient.instance.unlikeCollection(collectionId)
        } else {
            RetrofitClient.instance.likeCollection(collectionId)
        }

        call.enqueue(object : Callback<ResponseBody> {
            override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                setLikeButtonLoading(false)
                if (response.isSuccessful) {
                    isLikedByCurrentUser = !isLikedByCurrentUser
                    updateLikeButtonState()
                    val currentLikes = currentCollection?.likeCount ?: 0
                    val newLikes = if (isLikedByCurrentUser) currentLikes + 1 else maxOf(0, currentLikes - 1)
                    binding.collectionDetailLikesCount.text = formatCount(newLikes)
                    currentCollection = currentCollection?.copy(likeCount = newLikes)
                } else {
                    Toast.makeText(context, "Ошибка при ${if(isLikedByCurrentUser) "снятии" else "установке"} лайка", Toast.LENGTH_SHORT).show()
                }
            }
            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                setLikeButtonLoading(false)
                Toast.makeText(context, "Сетевая ошибка при лайке", Toast.LENGTH_SHORT).show()
            }
        })
    }

    private fun postComment() {
        val commentText = binding.commentEditText.text.toString().trim()
        if (commentText.isEmpty()) {
            binding.commentInputLayout.error = "Комментарий не может быть пустым"
            return
        }
        binding.commentInputLayout.error = null
        val collectionId = currentCollection?.collectionId ?: return

        setCommentButtonLoading(true)
        val request = CreateCommentRequest(commentText)
        RetrofitClient.instance.addCollectionComment(collectionId, request)
            .enqueue(object : Callback<CollectionComment>{
                override fun onResponse(call: Call<CollectionComment>, response: Response<CollectionComment>) {
                    setCommentButtonLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { newComment ->
                            val currentComments = commentsAdapter.currentList.toMutableList()
                            currentComments.add(0, newComment)
                            commentsAdapter.submitList(currentComments)
                            binding.commentsRecyclerView.scrollToPosition(0)
                            binding.commentEditText.text = null
                            Toast.makeText(context, getString(R.string.comment_posted_successfully), Toast.LENGTH_SHORT).show()
                            val currentCommentCount = currentCollection?.commentCount ?: 0
                            binding.collectionDetailCommentsCount.text = (currentCommentCount + 1).toString()
                            currentCollection = currentCollection?.copy(commentCount = currentCommentCount + 1)
                        }
                    } else {
                        Toast.makeText(context, getString(R.string.error_posting_comment) + ": ${response.code()}", Toast.LENGTH_SHORT).show()
                    }
                }
                override fun onFailure(call: Call<CollectionComment>, t: Throwable) {
                    setCommentButtonLoading(false)
                    Toast.makeText(context, getString(R.string.network_error), Toast.LENGTH_SHORT).show()
                }
            })
    }

    private fun updateLikeButtonState() {
        if (isLikedByCurrentUser) {
            binding.fabLikeCollection.setImageResource(R.drawable.ic_like_filled_24)
            binding.fabLikeCollection.imageTintList = ContextCompat.getColorStateList(requireContext(), R.color.color_liked)
        } else {
            binding.fabLikeCollection.setImageResource(R.drawable.ic_like_outline_24)
            binding.fabLikeCollection.imageTintList = ContextCompat.getColorStateList(requireContext(), R.color.white)
        }
    }
    private fun setLikeButtonLoading(isLoading: Boolean) {
        binding.fabLikeCollection.isEnabled = !isLoading
    }
    private fun setCommentButtonLoading(isLoading: Boolean) {
        binding.postCommentButton.isEnabled = !isLoading
        binding.commentEditText.isEnabled = !isLoading
    }

    private fun setLoading(isLoading: Boolean) {
        binding.collectionDetailProgressBar.isVisible = isLoading
    }

    private fun handleApiError(errorMessage: String) {
        Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
    }

    private fun formatCount(count: Int): String {
        return when {
            count >= 1_000_000 -> String.format("%.1fM", count / 1_000_000.0)
            count >= 1_000 -> String.format("%.1fK", count / 1_000.0)
            else -> count.toString()
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        binding.collectionItemsRecyclerView.adapter = null
        binding.commentsRecyclerView.adapter = null
        binding.collaboratorsRecyclerView.adapter = null
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\EditCollectionFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentCreateCollectionBinding
import com.example.finalproject.models.Collection
import com.example.finalproject.models.request.CreateCollectionRequest
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class EditCollectionFragment : Fragment() {

    private var _binding: FragmentCreateCollectionBinding? = null
    private val binding get() = _binding!!

    // TODO: Add argument for collectionId if implementing edit mode
    // private val args: EditCollectionFragmentArgs by navArgs()
    // private var isEditMode = false
    // private var existingCollectionId: Int? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentCreateCollectionBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // TODO: Check for edit mode arguments
        // arguments?.let {
        //     existingCollectionId = EditCollectionFragmentArgs.fromBundle(it).collectionId (if -1, then create mode)
        //     if (existingCollectionId != -1 && existingCollectionId != 0) { // Assuming -1 or 0 means not provided for edit
        //         isEditMode = true
        //         setupEditMode()
        //         fetchCollectionDetails(existingCollectionId!!)
        //     } else {
        //         setupCreateMode()
        //     }
        // } ?: setupCreateMode()
        setupCreateMode()

        binding.createCollectionButton.setOnClickListener {
            if (AuthTokenProvider.isAuthenticated()) {
                handleCreateCollection()
            } else {
                Toast.makeText(context, R.string.please_login_to_see_collections, Toast.LENGTH_SHORT).show()
                // Optionally navigate to login
                // findNavController().navigate(R.id.login)
            }
        }
    }

    private fun setupCreateMode() {
        binding.createCollectionHeaderTitle.text = getString(R.string.create_collection_title_toolbar)
        binding.createCollectionButton.text = getString(R.string.button_create_collection)
    }

    // private fun setupEditMode() {
    //     binding.createCollectionHeaderTitle.text = getString(R.string.edit_collection_title_toolbar)
    //     binding.createCollectionButton.text = getString(R.string.button_save_changes)
    // }

    // private fun fetchCollectionDetails(collectionId: Int) {
    //     setLoading(true)
    //
    // }

    private fun handleCreateCollection() {
        val title = binding.titleEditText.text.toString().trim()
        val description = binding.descriptionEditText.text.toString().trim().ifEmpty { null }
        val coverImageUrl = binding.coverUrlEditText.text.toString().trim().ifEmpty { null }
        val isPublic = binding.isPublicSwitch.isChecked

        if (title.isEmpty()) {
            binding.titleTextInputLayout.error = getString(R.string.error_collection_title_required)
            return
        } else {
            binding.titleTextInputLayout.error = null
        }

        setLoading(true)

        val createRequest = CreateCollectionRequest(title, description, coverImageUrl, isPublic)
        RetrofitClient.instance.createCollection(createRequest)
            .enqueue(object : Callback<Collection> {
                override fun onResponse(call: Call<Collection>, response: Response<Collection>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        val newCollection = response.body()
                        Toast.makeText(context, getString(R.string.collection_created_successfully), Toast.LENGTH_SHORT).show()
                        Log.d("EditCollectionFragment", "Collection created: ${newCollection?.title}")
                        findNavController().popBackStack()
                        // newCollection?.collectionId?.let {
                        //     val action = EditCollectionFragmentDirections.actionCreateCollectionFragmentToCollectionDetailsFragment(it)
                        //     findNavController().navigate(action)
                        // }
                    } else {
                        val errorMsg = response.errorBody()?.string() ?: getString(R.string.error_creating_collection)
                        Toast.makeText(context, "${getString(R.string.error_creating_collection)}: ${response.code()} $errorMsg", Toast.LENGTH_LONG).show()
                        Log.e("EditCollectionFragment", "API Error ${response.code()}: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<Collection>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "${getString(R.string.network_error)}: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("EditCollectionFragment", "Network Failure", t)
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.createCollectionProgressBar.isVisible = isLoading
        binding.titleEditText.isEnabled = !isLoading
        binding.descriptionEditText.isEnabled = !isLoading
        binding.coverUrlEditText.isEnabled = !isLoading
        binding.isPublicSwitch.isEnabled = !isLoading
        binding.createCollectionButton.isEnabled = !isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\HomeFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.finalproject.R
import com.example.finalproject.adapters.CollectionAdapter
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentHomeBinding
import com.example.finalproject.models.Collection
import com.example.finalproject.models.responce.PagedResponse
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class HomeFragment : Fragment() {

    private var _binding: FragmentHomeBinding? = null
    private val binding get() = _binding!!

    private lateinit var collectionAdapter: CollectionAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentHomeBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setupRecyclerView()
        fetchPublicCollections()
    }

    private fun setupRecyclerView() {
        collectionAdapter = CollectionAdapter { collection ->
            Toast.makeText(context, "Переход к коллекции: ${collection.title}", Toast.LENGTH_SHORT).show()
            Log.d("HomeFragment", "Clicked collection ID: ${collection.collectionId}")
            val action = HomeFragmentDirections.actionHomeFragmentToCollectionDetailsFragment(collection.collectionId)
            findNavController().navigate(action)
        }
        binding.collectionsRecyclerView.apply {
            adapter = collectionAdapter
            layoutManager = LinearLayoutManager(context)
        }
    }

    private fun fetchPublicCollections() {
        setLoading(true)
        binding.emptyViewText.isVisible = false

        RetrofitClient.instance.getPublicCollections(size = 10)
            .enqueue(object : Callback<PagedResponse<Collection>> {
                override fun onResponse(call: Call<PagedResponse<Collection>>, response: Response<PagedResponse<Collection>>) {
                    if (!isAdded || _binding == null) {
                        return
                    }
                    setLoading(false)
                    if (response.isSuccessful) {
                        val pagedResponse = response.body()
                        if (pagedResponse != null) {
                            val collections = pagedResponse.content
                            if (collections.isNotEmpty()) {
                                collectionAdapter.submitList(collections)
                                binding.collectionsRecyclerView.isVisible = true
                                Log.d("HomeFragment", "Loaded page ${pagedResponse.number + 1} of ${pagedResponse.totalPages}")
                            } else {
                                binding.collectionsRecyclerView.isVisible = false
                                binding.emptyViewText.text = getString(R.string.no_collections_found)
                                binding.emptyViewText.isVisible = true
                            }
                        } else {
                            handleApiError(getString(R.string.error_loading_collections) + " (пустой ответ)")
                        }
                    } else {
                        handleApiError("Ошибка ${response.code()}: ${response.message()}")
                    }
                }

                override fun onFailure(call: Call<PagedResponse<Collection>>, t: Throwable) {
                    if (!isAdded || _binding == null) {
                        return
                    }
                    setLoading(false)
                    handleApiError(getString(R.string.network_error) + ": ${t.localizedMessage}")
                    Log.e("HomeFragment", "API Failure", t)
                }
            })
    }

    private fun handleApiError(errorMessage: String) {
        _binding?.let { b ->
            b.collectionsRecyclerView.isVisible = false
            b.emptyViewText.text = errorMessage
            b.emptyViewText.isVisible = true
        }
        if (isAdded) {
            Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
        }
    }


    private fun setLoading(isLoading: Boolean) {
        _binding?.let { b ->
            b.homeProgressBar.isVisible = isLoading
            val adapterItemCount = b.collectionsRecyclerView.adapter?.itemCount ?: 0
            b.collectionsRecyclerView.isVisible = !isLoading && adapterItemCount > 0
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding?.collectionsRecyclerView?.adapter = null
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\collection\MyCollectionsFragment.kt
###############################################################################

package com.example.finalproject.fragments.collection

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.finalproject.R
import com.example.finalproject.adapters.CollectionAdapter
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentMyCollectionsBinding
import com.example.finalproject.models.Collection
import com.example.finalproject.models.responce.PagedResponse
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class MyCollectionsFragment : Fragment() {

    private var _binding: FragmentMyCollectionsBinding? = null
    private val binding get() = _binding!!

    private lateinit var collectionAdapter: CollectionAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentMyCollectionsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        if (!AuthTokenProvider.isAuthenticated()) {
            showNotAuthenticatedState()
            return
        }

        setupRecyclerView()
        fetchMyCollections()

        binding.fabCreateCollection.setOnClickListener {
            try {
                // Используем ID из nav_graph, так как CreateCollectionFragment не принимает аргументов
                // и у него может не быть сгенерированного action в MyCollectionsFragmentDirections
                // Если action есть, то лучше:
                // findNavController().navigate(MyCollectionsFragmentDirections.actionMyCollectionsFragmentToCreateCollectionFragment())
                findNavController().navigate(R.id.createCollectionFragment)
            } catch (e: Exception) {
                Toast.makeText(context, getString(R.string.error_cannot_create_collection) + ": ${e.localizedMessage}", Toast.LENGTH_SHORT).show()
                Log.e("MyCollectionsFragment", "Navigation to createCollectionFragment failed", e)
            }
        }
    }

    private fun showNotAuthenticatedState() {
        Log.w("MyCollectionsFragment", "User not authenticated. Cannot load collections.")
        binding.myCollectionsEmptyViewText.text = getString(R.string.please_login_to_see_collections)
        binding.myCollectionsEmptyViewText.isVisible = true
        binding.myCollectionsRecyclerView.isVisible = false
        binding.myCollectionsProgressBar.isVisible = false
        binding.fabCreateCollection.isEnabled = false // Деактивируем кнопку создания
        Toast.makeText(context, getString(R.string.please_login_to_see_collections), Toast.LENGTH_LONG).show()
    }

    private fun setupRecyclerView() {
        collectionAdapter = CollectionAdapter { collection ->
            Log.d("MyCollectionsFragment", "Clicked collection ID: ${collection.collectionId}")
            try {
                val action = MyCollectionsFragmentDirections.actionMyCollectionsFragmentToCollectionDetailsFragment(collection.collectionId)
                findNavController().navigate(action)
            } catch (e: Exception) {
                Toast.makeText(context, getString(R.string.error_cannot_open_collection_details) + ": ${e.localizedMessage}", Toast.LENGTH_SHORT).show()
                Log.e("MyCollectionsFragment", "Navigation to CollectionDetailsFragment failed", e)
            }
        }
        binding.myCollectionsRecyclerView.apply {
            adapter = collectionAdapter
            layoutManager = LinearLayoutManager(context)
        }
    }

    private fun fetchMyCollections() {
        setLoading(true)
        binding.myCollectionsEmptyViewText.isVisible = false

        RetrofitClient.instance.getMyCollections(size = 20) // Загружаем до 20 коллекций на страницу
            .enqueue(object : Callback<PagedResponse<Collection>> {
                override fun onResponse(call: Call<PagedResponse<Collection>>, response: Response<PagedResponse<Collection>>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        val pagedResponse = response.body()
                        if (pagedResponse != null) {
                            val collections = pagedResponse.content
                            if (collections.isNotEmpty()) {
                                collectionAdapter.submitList(collections)
                                binding.myCollectionsRecyclerView.isVisible = true
                            } else {
                                binding.myCollectionsRecyclerView.isVisible = false
                                binding.myCollectionsEmptyViewText.text = getString(R.string.no_my_collections_found)
                                binding.myCollectionsEmptyViewText.isVisible = true
                            }
                        } else {
                            handleApiError(getString(R.string.error_loading_my_collections) + " (пустой ответ)")
                        }
                    } else {
                        if (response.code() == 401) { // Unauthorized
                            Toast.makeText(context, "Сессия истекла. Пожалуйста, войдите снова.", Toast.LENGTH_LONG).show()
                            AuthTokenProvider.clearAuthData()
                            // Можно добавить автоматический переход на экран логина
                            // (activity as? MainActivity)?.navController?.navigate(R.id.login)
                            showNotAuthenticatedState() // Показать состояние "не авторизован"
                        } else {
                            handleApiError("Ошибка ${response.code()}: ${response.message()}")
                        }
                    }
                }

                override fun onFailure(call: Call<PagedResponse<Collection>>, t: Throwable) {
                    setLoading(false)
                    handleApiError(getString(R.string.network_error) + ": ${t.localizedMessage}")
                    Log.e("MyCollectionsFragment", "API Failure", t)
                }
            })
    }

    private fun handleApiError(errorMessage: String) {
        Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
        binding.myCollectionsRecyclerView.isVisible = false
        if (binding.myCollectionsEmptyViewText.text.toString() == getString(R.string.no_my_collections_found) ||
            binding.myCollectionsEmptyViewText.text.toString() == getString(R.string.please_login_to_see_collections)) {
            // Не перезаписываем сообщение о пустом списке или необходимости логина, если это была API ошибка
        } else {
            binding.myCollectionsEmptyViewText.text = errorMessage
        }
        binding.myCollectionsEmptyViewText.isVisible = true
    }

    private fun setLoading(isLoading: Boolean) {
        binding.myCollectionsProgressBar.isVisible = isLoading
        if (!isLoading) {
            // Показываем RecyclerView только если есть элементы и загрузка завершена
            binding.myCollectionsRecyclerView.isVisible = collectionAdapter.itemCount > 0
        } else {
            binding.myCollectionsRecyclerView.isVisible = false
        }
        binding.fabCreateCollection.isEnabled = !isLoading
    }

    override fun onResume() {
        super.onResume()
        // Если пользователь мог разлогиниться или залогиниться на другом экране,
        // и мы возвращаемся сюда, стоит проверить аутентификацию и перезагрузить данные.
        if (AuthTokenProvider.isAuthenticated() && collectionAdapter.itemCount == 0) {
            // Если авторизован, но список пуст (например, после возврата с экрана логина)
            fetchMyCollections()
        } else if (!AuthTokenProvider.isAuthenticated()) {
            showNotAuthenticatedState()
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        binding.myCollectionsRecyclerView.adapter = null // Очистка адаптера
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\mediaitem\EditMediaItemFragment.kt
###############################################################################

package com.example.finalproject.fragments.mediaitem

import android.net.ParseException
import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.core.widget.doOnTextChanged
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentEditMediaItemBinding
import com.example.finalproject.models.MediaItem
import com.example.finalproject.models.request.UpdateMediaItemRequest
import com.example.finalproject.utils.AuthTokenProvider // Для проверки прав
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.SimpleDateFormat
import java.util.Locale

class EditMediaItemFragment : Fragment() {

    private var _binding: FragmentEditMediaItemBinding? = null
    private val binding get() = _binding!!

    private val args: EditMediaItemFragmentArgs by navArgs()
    private var mediaItemIdToEdit: Long = -1L
    private var currentMediaItemData: MediaItem? = null

    // Формат для парсинга и отображения даты релиза
    private val releaseDateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.US)


    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentEditMediaItemBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        mediaItemIdToEdit = args.mediaItemId

        if (mediaItemIdToEdit == -1L) {
            Toast.makeText(context, "Ошибка: ID медиа-элемента не передан.", Toast.LENGTH_LONG).show()
            Log.e("EditMediaItemFragment", "MediaItem ID is missing.")
            findNavController().popBackStack()
            return
        }

        // TODO: Более строгая проверка прав на редактирование, если MediaItem не привязан к пользователю напрямую
        if (!AuthTokenProvider.isAuthenticated()) {
            Toast.makeText(context, "Необходимо авторизоваться для редактирования.", Toast.LENGTH_LONG).show()
            findNavController().popBackStack()
            return
        }

        loadMediaItemData()

        binding.saveMediaItemButton.setOnClickListener {
            handleUpdateMediaItem()
        }

        binding.thumbnailUrlEditMediaTextField.doOnTextChanged { text, _, _, _ ->
            Glide.with(this)
                .load(text.toString().trim())
                .placeholder(R.drawable.ic_image_placeholder_24)
                .error(R.drawable.ic_image_placeholder_24)
                .into(binding.editMediaItemThumbnailPreview)
        }
    }

    private fun loadMediaItemData() {
        setLoading(true)
        RetrofitClient.instance.getMediaItemById(mediaItemIdToEdit)
            .enqueue(object : Callback<MediaItem> {
                override fun onResponse(call: Call<MediaItem>, response: Response<MediaItem>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let {
                            currentMediaItemData = it
                            populateFields(it)
                        } ?: run {
                            Toast.makeText(context, getString(R.string.media_item_not_found), Toast.LENGTH_LONG).show()
                            findNavController().popBackStack()
                        }
                    } else {
                        Toast.makeText(context, "${getString(R.string.error_loading_media_item_details)}: ${response.code()}", Toast.LENGTH_LONG).show()
                        Log.e("EditMediaItemFragment", "Error loading media item ${response.code()}: ${response.message()}")
                        findNavController().popBackStack()
                    }
                }

                override fun onFailure(call: Call<MediaItem>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "${getString(R.string.network_error)}: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("EditMediaItemFragment", "Network failure loading media item", t)
                    findNavController().popBackStack()
                }
            })
    }

    private fun populateFields(item: MediaItem) {
        binding.titleEditMediaTextField.setText(item.title)
        binding.creatorEditMediaTextField.setText(item.creator ?: "")
        binding.descriptionEditMediaTextField.setText(item.description ?: "")
        binding.thumbnailUrlEditMediaTextField.setText(item.thumbnailUrl ?: "")
        binding.externalUrlEditMediaTextField.setText(item.externalUrl ?: "")
        binding.releaseDateEditMediaTextField.setText(item.releaseDate ?: "")


        Glide.with(this)
            .load(item.thumbnailUrl)
            .placeholder(R.drawable.ic_image_placeholder_24)
            .error(R.drawable.ic_image_placeholder_24)
            .into(binding.editMediaItemThumbnailPreview)
    }

    private fun handleUpdateMediaItem() {
        val title = binding.titleEditMediaTextField.text.toString().trim()
        if (title.isEmpty()) {
            binding.titleEditMediaLayout.error = getString(R.string.error_media_item_title_required)
            return
        } else {
            binding.titleEditMediaLayout.error = null
        }

        val creator = binding.creatorEditMediaTextField.text.toString().trim().ifEmpty { null }
        val description = binding.descriptionEditMediaTextField.text.toString().trim().ifEmpty { null }
        val thumbnailUrl = binding.thumbnailUrlEditMediaTextField.text.toString().trim().ifEmpty { null }
        val externalUrl = binding.externalUrlEditMediaTextField.text.toString().trim().ifEmpty { null }
        var releaseDateString = binding.releaseDateEditMediaTextField.text.toString().trim().ifEmpty { null }

        // Простая валидация формата даты, если введена
        if (releaseDateString != null) {
            try {
                releaseDateFormat.isLenient = false
                releaseDateFormat.parse(releaseDateString) // Просто проверяем парсинг
            } catch (e: ParseException) {
                binding.releaseDateEditMediaLayout.error = "Неверный формат даты (гггг-мм-дд)"
                return
            }
            binding.releaseDateEditMediaLayout.error = null
        }


        // TODO: Проверка, изменилось ли что-то

        setLoading(true)

        val updateRequest = UpdateMediaItemRequest(
            title = title,
            creator = creator,
            description = description,
            thumbnailUrl = thumbnailUrl,
            externalUrl = externalUrl,
            releaseDate = releaseDateString
        )

        RetrofitClient.instance.updateMediaItem(mediaItemIdToEdit, updateRequest)
            .enqueue(object : Callback<MediaItem> {
                override fun onResponse(call: Call<MediaItem>, response: Response<MediaItem>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { updatedItem ->
                            Toast.makeText(context, getString(R.string.media_item_updated_successfully), Toast.LENGTH_SHORT).show()
                            Log.d("EditMediaItemFragment", "MediaItem updated: ${updatedItem.title}")
                            // Можно передать результат обратно, если MediaItemDetailsFragment должен обновиться
                            // setFragmentResult(...)
                            findNavController().popBackStack()
                        } ?: Toast.makeText(context, getString(R.string.error_updating_media_item) + " (пустой ответ)", Toast.LENGTH_LONG).show()
                    } else {
                        val errorMsg = response.errorBody()?.string() ?: getString(R.string.error_updating_media_item)
                        Toast.makeText(context, "${getString(R.string.error_updating_media_item)}: ${response.code()} $errorMsg", Toast.LENGTH_LONG).show()
                        Log.e("EditMediaItemFragment", "API Error ${response.code()}: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<MediaItem>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "${getString(R.string.network_error)}: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("EditMediaItemFragment", "Network Failure", t)
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.editMediaItemProgressBar.isVisible = isLoading
        binding.titleEditMediaTextField.isEnabled = !isLoading
        binding.creatorEditMediaTextField.isEnabled = !isLoading
        binding.descriptionEditMediaTextField.isEnabled = !isLoading
        binding.thumbnailUrlEditMediaTextField.isEnabled = !isLoading
        binding.externalUrlEditMediaTextField.isEnabled = !isLoading
        binding.releaseDateEditMediaTextField.isEnabled = !isLoading
        binding.saveMediaItemButton.isEnabled = !isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\mediaitem\MediaItemDetailsFragment.kt
###############################################################################

package com.example.finalproject.fragments.mediaitem

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.isVisible
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentMediaItemDetailsBinding
import com.example.finalproject.models.MediaItem
import com.example.finalproject.utils.AuthTokenProvider
import com.google.android.material.chip.Chip
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.Locale
import java.util.TimeZone

class MediaItemDetailsFragment : Fragment() {

    private var _binding: FragmentMediaItemDetailsBinding? = null
    private val binding get() = _binding!!

    private val args: MediaItemDetailsFragmentArgs by navArgs()
    private var currentMediaItem: MediaItem? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentMediaItemDetailsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupToolbar()
        fetchMediaItemDetails(args.mediaItemId)

        binding.fabEditMediaItem.setOnClickListener {
            currentMediaItem?.let {
                // TODO: Проверить права пользователя на редактирование этого MediaItem
                // Например, если есть поле createdByUserId в MediaItem и оно совпадает с AuthTokenProvider.getCurrentUser()?.userId
                // Для простоты, пока разрешаем редактирование, если залогинен.
                // В реальном приложении нужна более строгая проверка прав.
                if (AuthTokenProvider.isAuthenticated()) {
                    val action = MediaItemDetailsFragmentDirections.actionMediaItemDetailsFragmentToEditMediaItemFragment(it.itemId)
                    findNavController().navigate(action)
                } else {
                    Toast.makeText(context, "Только авторизованные пользователи могут редактировать", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    private fun setupToolbar() {
        (activity as? AppCompatActivity)?.setSupportActionBar(binding.toolbarMediaDetails)
        (activity as? AppCompatActivity)?.supportActionBar?.setDisplayHomeAsUpEnabled(true)
        binding.toolbarMediaDetails.setNavigationOnClickListener {
            findNavController().popBackStack()
        }
    }

    private fun fetchMediaItemDetails(itemId: Long) {
        setLoading(true)
        RetrofitClient.instance.getMediaItemById(itemId).enqueue(object : Callback<MediaItem> {
            override fun onResponse(call: Call<MediaItem>, response: Response<MediaItem>) {
                setLoading(false)
                if (response.isSuccessful) {
                    response.body()?.let {
                        currentMediaItem = it
                        displayMediaItemDetails(it)
                    } ?: showError(getString(R.string.media_item_not_found))
                } else {
                    showError("${getString(R.string.error_loading_media_item_details)}: ${response.code()}")
                }
            }

            override fun onFailure(call: Call<MediaItem>, t: Throwable) {
                setLoading(false)
                showError("${getString(R.string.network_error)}: ${t.message}")
                Log.e("MediaItemDetails", "API Failure", t)
            }
        })
    }

    private fun displayMediaItemDetails(item: MediaItem) {
        binding.collapsingToolbarLayoutMediaDetails.title = item.title
        binding.toolbarMediaDetails.title = item.title

        binding.mediaItemDetailTitleText.text = item.title
        binding.mediaItemDetailCreatorText.text = item.creator ?: getString(R.string.unknown_author)
        binding.mediaItemDetailTypeText.text = item.contentType?.typeName ?: "N/A"
        binding.mediaItemDetailDescriptionText.text = item.description ?: "Описание отсутствует."

        binding.mediaItemDetailReleaseDateText.text = formatDate(item.releaseDate, "yyyy-MM-dd") ?: "Не указана"
        binding.mediaItemDetailAddedAtText.text = formatDate(item.addedAt) ?: "Неизвестно"

        Glide.with(this)
            .load(item.thumbnailUrl)
            .placeholder(R.drawable.ic_image_placeholder_24)
            .error(R.drawable.ic_image_placeholder_24)
            .into(binding.mediaItemDetailThumbnail)

        if (!item.externalUrl.isNullOrBlank()) {
            binding.buttonOpenExternalUrl.isVisible = true
            binding.buttonOpenExternalUrl.setOnClickListener {
                try {
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(item.externalUrl))
                    startActivity(intent)
                } catch (e: Exception) {
                    Toast.makeText(context, getString(R.string.cannot_open_url), Toast.LENGTH_SHORT).show()
                }
            }
        } else {
            binding.buttonOpenExternalUrl.isVisible = false
        }

        binding.mediaItemDetailTagsChipGroup.removeAllViews()
        if (!item.tags.isNullOrEmpty()) {
            binding.mediaItemDetailTagsChipGroup.isVisible = true
            item.tags.forEach { tag ->
                val chip = Chip(context)
                chip.text = tag.tagName
                // chip.isClickable = true // Если хотите сделать теги кликабельными для поиска по тегу
                // chip.setOnClickListener { /* TODO: Navigate to search by tag */ }
                binding.mediaItemDetailTagsChipGroup.addView(chip)
            }
        } else {
            binding.mediaItemDetailTagsChipGroup.isVisible = false
        }

        // Показать кнопку редактирования, если есть права (здесь упрощенная проверка)
        // TODO: Реализуйте более надежную проверку прав, если это необходимо (например, на основе createdByUserId)
        binding.fabEditMediaItem.isVisible = AuthTokenProvider.isAuthenticated()
    }

    private fun formatDate(dateString: String?, inputPattern: String = "yyyy-MM-dd'T'HH:mm:ss"): String? {
        if (dateString.isNullOrEmpty()) return null
        val defaultLocale = Locale.getDefault()

        // Список возможных входных форматов, включая те, что могут приходить с OffsetDateTime
        val inputFormats = listOf(
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ", defaultLocale),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ", defaultLocale),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSS", defaultLocale),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", defaultLocale),
            SimpleDateFormat(inputPattern, defaultLocale) // Для дат типа releaseDate
        )
        val outputFormat = SimpleDateFormat("dd MMMM yyyy", defaultLocale) // Более простой формат для отображения

        for (format in inputFormats) {
            if (!dateString.contains("Z") && format.toPattern().endsWith("Z")) {
                // Пропускаем форматы с Z, если в строке нет Z, кроме тех, что явно не содержат смещение
                if(!format.toPattern().contains("'Z'")) continue
            }
            // Даты с сервера могут быть в UTC
            if (format.toPattern().contains("T") && (format.toPattern().endsWith("Z") || dateString.endsWith("Z"))) {
                format.timeZone = TimeZone.getTimeZone("UTC")
            } else if (format.toPattern().contains("T")) { // Если время есть, но нет явного UTC, пробуем как локальное или UTC
                format.timeZone = TimeZone.getTimeZone("UTC") // Пробуем UTC как основной вариант для timestamp
            }


            try {
                val date = format.parse(dateString)
                if (date != null) {
                    outputFormat.timeZone = TimeZone.getDefault() // Форматируем в локальную зону
                    return outputFormat.format(date)
                }
            } catch (e: ParseException) {
                // Log.v("MediaItemDetails", "Date parse failed for $dateString with pattern ${format.toPattern()}")
            }
        }
        Log.w("MediaItemDetails", "Could not parse date: $dateString with known formats.")
        return dateString // Возвращаем исходную строку, если не удалось распарсить
    }


    private fun setLoading(isLoading: Boolean) {
        binding.mediaItemDetailProgressBar.isVisible = isLoading
        binding.mediaItemDetailErrorText.isVisible = false
        // Остальной контент управляется через CollapsingToolbarLayout и NestedScrollView
    }

    private fun showError(message: String) {
        binding.mediaItemDetailErrorText.text = message
        binding.mediaItemDetailErrorText.isVisible = true
        binding.mediaItemDetailProgressBar.isVisible = false
        // Скрыть другие элементы, если нужно
        binding.collapsingToolbarLayoutMediaDetails.isVisible = false
        binding.fabEditMediaItem.isVisible = false
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\mediaitem\MediaItemSearchFragment.kt
###############################################################################

package com.example.finalproject.fragments.mediaitem

import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.appcompat.widget.SearchView
import androidx.core.os.bundleOf
import androidx.core.view.isVisible
import androidx.fragment.app.setFragmentResult
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.finalproject.R
import com.example.finalproject.adapters.MediaItemAdapter
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentMediaItemSearchBinding
import com.example.finalproject.models.MediaItem
import com.example.finalproject.models.responce.PagedResponse
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class MediaItemSearchFragment : Fragment() {

    private var _binding: FragmentMediaItemSearchBinding? = null
    private val binding get() = _binding!!

    private lateinit var mediaItemAdapter: MediaItemAdapter

    companion object {
        const val MEDIA_ITEM_SELECTION_REQUEST_KEY = "mediaItemSelectionRequestKey"
        const val SELECTED_MEDIA_ITEM_ID_KEY = "selectedMediaItemId"
        const val SELECTED_MEDIA_ITEM_TITLE_KEY = "selectedMediaItemTitle" // Опционально
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentMediaItemSearchBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupToolbar()
        setupRecyclerView()
        setupSearchView()
    }

    private fun setupToolbar() {
        binding.toolbar.setNavigationIcon(androidx.appcompat.R.drawable.abc_ic_ab_back_material) // Стандартная иконка назад
        binding.toolbar.setNavigationOnClickListener {
            findNavController().popBackStack()
        }
    }

    private fun setupRecyclerView() {
        mediaItemAdapter = MediaItemAdapter { mediaItem ->
            onMediaItemSelected(mediaItem)
        }
        binding.searchResultsRecyclerView.apply {
            adapter = mediaItemAdapter
            layoutManager = LinearLayoutManager(context)
        }
    }

    private fun onMediaItemSelected(mediaItem: MediaItem) {
        setFragmentResult(MEDIA_ITEM_SELECTION_REQUEST_KEY, bundleOf(
            SELECTED_MEDIA_ITEM_ID_KEY to mediaItem.itemId,
            SELECTED_MEDIA_ITEM_TITLE_KEY to mediaItem.title // Передаем и название для отображения
        ))
        findNavController().popBackStack()
    }

    private fun setupSearchView() {
        binding.mediaItemSearchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
            override fun onQueryTextSubmit(query: String?): Boolean {
                query?.let {
                    if (it.length >= 2) { // Искать, если минимум 2 символа
                        performSearch(it)
                    } else {
                        Toast.makeText(context, "Введите минимум 2 символа для поиска", Toast.LENGTH_SHORT).show()
                    }
                }
                return true
            }

            override fun onQueryTextChange(newText: String?): Boolean {
                // Можно добавить поиск по мере ввода с задержкой (debounce)
                return true
            }
        })
    }

    private fun performSearch(query: String) {
        setLoading(true)
        binding.searchEmptyTextView.isVisible = false
        binding.searchResultsRecyclerView.isVisible = false

        RetrofitClient.instance.searchMediaItems(query = query)
            .enqueue(object : Callback<PagedResponse<MediaItem>> {
                override fun onResponse(
                    call: Call<PagedResponse<MediaItem>>,
                    response: Response<PagedResponse<MediaItem>>
                ) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        val pagedResponse = response.body()
                        val items = pagedResponse?.content
                        if (!items.isNullOrEmpty()) {
                            mediaItemAdapter.submitList(items)
                            binding.searchResultsRecyclerView.isVisible = true
                        } else {
                            binding.searchEmptyTextView.text = "По запросу \"$query\" ничего не найдено."
                            binding.searchEmptyTextView.isVisible = true
                        }
                    } else {
                        Toast.makeText(context, "Ошибка поиска: ${response.code()}", Toast.LENGTH_SHORT).show()
                        Log.e("MediaItemSearch", "API Error: ${response.code()} - ${response.message()}")
                        binding.searchEmptyTextView.text = "Ошибка поиска."
                        binding.searchEmptyTextView.isVisible = true
                    }
                }

                override fun onFailure(call: Call<PagedResponse<MediaItem>>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Сетевая ошибка: ${t.message}", Toast.LENGTH_SHORT).show()
                    Log.e("MediaItemSearch", "Network Failure", t)
                    binding.searchEmptyTextView.text = "Сетевая ошибка."
                    binding.searchEmptyTextView.isVisible = true
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.searchProgressBar.isVisible = isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        binding.searchResultsRecyclerView.adapter = null
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\EditProfileFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.core.widget.doOnTextChanged
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentEditProfileBinding
import com.example.finalproject.models.User
import com.example.finalproject.models.request.UpdateProfileRequest
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class EditProfileFragment : Fragment() {

    private var _binding: FragmentEditProfileBinding? = null
    private val binding get() = _binding!!

    private val args: EditProfileFragmentArgs by navArgs()
    private var userIdToEdit: Long = -1L
    private var currentUserData: User? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentEditProfileBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        userIdToEdit = args.userId

        if (userIdToEdit == -1L || userIdToEdit != AuthTokenProvider.getCurrentUser()?.userId) {
            Toast.makeText(context, "Ошибка: Невозможно редактировать этот профиль.", Toast.LENGTH_LONG).show()
            Log.e("EditProfileFragment", "Attempted to edit profile with invalid userId: $userIdToEdit")
            findNavController().popBackStack()
            return
        }

        loadCurrentProfileData()

        binding.saveProfileButton.setOnClickListener {
            handleUpdateProfile()
        }

        binding.avatarUrlEditTextField.doOnTextChanged { text, _, _, _ ->
            Glide.with(this)
                .load(text.toString())
                .placeholder(R.drawable.ic_profile_24)
                .error(R.drawable.ic_profile_24)
                .circleCrop()
                .into(binding.editProfileAvatarPreview)
        }
    }

    private fun loadCurrentProfileData() {
        setLoading(true)
        currentUserData = AuthTokenProvider.getCurrentUser()

        if (currentUserData == null) {
            setLoading(false)
            Toast.makeText(context, getString(R.string.error_loading_data_for_edit), Toast.LENGTH_LONG).show()
            Log.e("EditProfileFragment", "Could not load current user data from AuthTokenProvider.")
            findNavController().popBackStack()
            return
        }

        populateFields(currentUserData!!)
        setLoading(false)
    }

    private fun populateFields(user: User) {
        binding.displayNameEditTextField.setText(user.displayName ?: "")
        binding.bioEditTextField.setText(user.bio ?: "")
        binding.avatarUrlEditTextField.setText(user.avatarUrl ?: "")

        Glide.with(this)
            .load(user.avatarUrl)
            .placeholder(R.drawable.ic_profile_24)
            .error(R.drawable.ic_profile_24)
            .circleCrop()
            .into(binding.editProfileAvatarPreview)
    }

    private fun handleUpdateProfile() {
        val displayName = binding.displayNameEditTextField.text.toString().trim().ifEmpty { null }
        val bio = binding.bioEditTextField.text.toString().trim().ifEmpty { null }
        val avatarUrl = binding.avatarUrlEditTextField.text.toString().trim().ifEmpty { null }

        if (displayName == currentUserData?.displayName &&
            bio == currentUserData?.bio &&
            avatarUrl == currentUserData?.avatarUrl) {
            Toast.makeText(context, "Нет изменений для сохранения.", Toast.LENGTH_SHORT).show()
            return
        }

        setLoading(true)

        val updateRequest = UpdateProfileRequest(displayName, bio, avatarUrl)

        RetrofitClient.instance.updateMyProfile(updateRequest)
            .enqueue(object : Callback<User> {
                override fun onResponse(call: Call<User>, response: Response<User>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { updatedUser ->
                            AuthTokenProvider.saveUser(updatedUser)
                            Toast.makeText(context, getString(R.string.profile_updated_successfully), Toast.LENGTH_SHORT).show()
                            Log.d("EditProfileFragment", "Profile updated for user: ${updatedUser.username}")
                            findNavController().popBackStack()
                        } ?: run {
                            Toast.makeText(context, getString(R.string.error_updating_profile) + " (пустой ответ)", Toast.LENGTH_LONG).show()
                        }
                    } else {
                        val errorMsg = response.errorBody()?.string() ?: getString(R.string.error_updating_profile)
                        Toast.makeText(context, "${getString(R.string.error_updating_profile)}: ${response.code()} $errorMsg", Toast.LENGTH_LONG).show()
                        Log.e("EditProfileFragment", "API Error ${response.code()}: $errorMsg")
                    }
                }

                override fun onFailure(call: Call<User>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "${getString(R.string.network_error)}: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("EditProfileFragment", "Network Failure", t)
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.editProfileProgressBar.isVisible = isLoading
        binding.displayNameEditTextField.isEnabled = !isLoading
        binding.bioEditTextField.isEnabled = !isLoading
        binding.avatarUrlEditTextField.isEnabled = !isLoading
        binding.saveProfileButton.isEnabled = !isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
        currentUserData = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\ForgotPasswordFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.util.Patterns
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentForgotPasswordBinding
import com.example.finalproject.models.request.ForgotPasswordRequest
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class ForgotPasswordFragment : Fragment() {

    private var _binding: FragmentForgotPasswordBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentForgotPasswordBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.sendButton.setOnClickListener {
            handleForgotPasswordRequest()
        }
    }

    private fun handleForgotPasswordRequest() {
        val email = binding.emailEditText.text.toString().trim()

        if (!isValidEmail(email)) {
            binding.emailTextInputLayout.error = getString(R.string.error_invalid_email)
            return
        } else {
            binding.emailTextInputLayout.error = null
        }

        setLoading(true)

        val forgotPasswordRequest = ForgotPasswordRequest(email)
        RetrofitClient.instance.forgotPassword(forgotPasswordRequest)
            .enqueue(object : Callback<ResponseBody> {
                override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        // Успешный ответ от сервера
                        Toast.makeText(context, "Инструкции по сбросу пароля отправлены на вашу почту.", Toast.LENGTH_LONG).show()
                        // Можно добавить навигацию обратно на экран входа или показать сообщение
                        findNavController().popBackStack() // Вернуться на предыдущий экран (LoginFragment)
                    } else {
                        // Ошибка сервера
                        val errorBody = response.errorBody()?.string() ?: "Неизвестная ошибка сервера"
                        Toast.makeText(context, "Ошибка: ${response.code()} - $errorBody", Toast.LENGTH_LONG).show()
                        Log.e("ForgetPassword", "API Error: ${response.code()} - $errorBody")
                    }
                }

                override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Ошибка сети: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("ForgetPassword", "Network failure", t)
                }
            })
    }

    private fun isValidEmail(email: String): Boolean {
        return Patterns.EMAIL_ADDRESS.matcher(email).matches()
    }

    private fun setLoading(isLoading: Boolean) {
        binding.progressBar.isVisible = isLoading
        binding.sendButton.isEnabled = !isLoading
        binding.emailEditText.isEnabled = !isLoading
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\LoginFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.util.Patterns
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentLoginBinding
import com.example.finalproject.models.responce.AuthResponse
import com.example.finalproject.models.request.LoginRequest
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class LoginFragment : Fragment() {

    private var _binding: FragmentLoginBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentLoginBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.loginButton.setOnClickListener {
            handleLogin()
        }

        binding.signUpTextView.setOnClickListener {
            findNavController().navigate(R.id.action_login_to_registration)
        }
    }

    private fun handleLogin() {
        val email = binding.emailEditText.text.toString().trim()
        val password = binding.passwordEditText.text.toString().trim()

        if (!isValidEmail(email)) {
            binding.emailTextInputLayout.error = getString(R.string.error_invalid_email)
            return
        } else {
            binding.emailTextInputLayout.error = null
        }

        if (password.isEmpty()) {
            binding.passwordTextInputLayout.error = getString(R.string.error_empty_password)
            return
        } else {
            binding.passwordTextInputLayout.error = null
        }

        binding.loginButton.isEnabled = false

        val loginRequest = LoginRequest(email, password)
        RetrofitClient.instance.loginUser(loginRequest)
            .enqueue(object : Callback<AuthResponse> {
                override fun onResponse(call: Call<AuthResponse>, response: Response<AuthResponse>) {
                    binding.loginButton.isEnabled = true

                    if (response.isSuccessful) {
                        val authResponse = response.body()
                        if (authResponse != null) {
                            AuthTokenProvider.saveToken(authResponse.token)
                            AuthTokenProvider.saveUser(authResponse.user)

                            Toast.makeText(context, "Вход успешен! Добро пожаловать, ${authResponse.user.displayName ?: authResponse.user.username}", Toast.LENGTH_LONG).show()

                            try {
                                findNavController().navigate(R.id.action_login_to_homeFragment)
                            } catch (e: IllegalArgumentException) {
                                Toast.makeText(context, "Ошибка навигации: ${e.localizedMessage}", Toast.LENGTH_LONG).show()
                                Log.e("LoginFragment", "Navigation error", e)
                            }
                        } else {
                            Toast.makeText(context, "Ошибка входа: Пустой ответ от сервера", Toast.LENGTH_LONG).show()
                        }
                    } else {
                        val errorBody = response.errorBody()?.string() ?: "Неизвестная ошибка сервера"
                        Toast.makeText(context, "Ошибка входа: ${response.code()} - $errorBody", Toast.LENGTH_LONG).show()
                        Log.e("LoginFragment", "Login failed: ${response.code()} - $errorBody")
                    }
                }

                override fun onFailure(call: Call<AuthResponse>, t: Throwable) {
                    binding.loginButton.isEnabled = true
                    Toast.makeText(context, "Ошибка сети: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("LoginFragment", "Network error", t)
                }
            })
    }

    private fun isValidEmail(email: String): Boolean {
        return Patterns.EMAIL_ADDRESS.matcher(email).matches()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\RegistrationFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.util.Patterns
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentRegistrationBinding
import com.example.finalproject.models.responce.AuthResponse
import com.example.finalproject.models.request.RegistrationRequest
// import com.example.finalproject.utils.AuthTokenProvider // Не нужен здесь, т.к. после регистрации обычно перенаправляем на логин
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class RegistrationFragment : Fragment() {

    private var _binding: FragmentRegistrationBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentRegistrationBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.registerButton.setOnClickListener {
            handleRegistration()
        }

        binding.loginNowTextView.setOnClickListener {
            // Переход на экран логина, если пользователь уже имеет аккаунт
            findNavController().navigate(R.id.action_registration_to_login)
        }
    }

    private fun handleRegistration() {
        val username = binding.usernameEditText.text.toString().trim()
        val email = binding.emailEditTextRegister.text.toString().trim()
        val displayName = binding.displayNameEditText.text.toString().trim().let { if (it.isEmpty()) null else it }
        val password = binding.passwordEditTextRegister.text.toString() // Не trim, чтобы не обрезать пробелы в пароле
        val confirmPassword = binding.confirmPasswordEditText.text.toString()

        var isValid = true

        // Валидация имени пользователя
        if (username.isEmpty()) {
            binding.usernameTextInputLayout.error = getString(R.string.error_empty_username)
            isValid = false
        } else {
            binding.usernameTextInputLayout.error = null
        }

        // Валидация email
        if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
            binding.emailTextInputLayoutRegister.error = getString(R.string.error_invalid_email)
            isValid = false
        } else {
            binding.emailTextInputLayoutRegister.error = null
        }

        // Валидация пароля
        if (password.isEmpty()) {
            binding.passwordTextInputLayoutRegister.error = getString(R.string.error_empty_password)
            isValid = false
        } else if (password.length < 6) {
            binding.passwordTextInputLayoutRegister.error = getString(R.string.error_password_too_short)
            isValid = false
        } else {
            binding.passwordTextInputLayoutRegister.error = null
        }

        // Валидация подтверждения пароля
        if (confirmPassword.isEmpty()) {
            binding.confirmPasswordTextInputLayout.error = getString(R.string.error_empty_password)
            isValid = false
        } else if (password != confirmPassword) {
            binding.confirmPasswordTextInputLayout.error = getString(R.string.error_passwords_do_not_match)
            isValid = false
        } else {
            binding.confirmPasswordTextInputLayout.error = null
        }

        if (!isValid) return

        setLoading(true)

        val registrationRequest = RegistrationRequest(username, email, password, displayName)

        RetrofitClient.instance.registerUser(registrationRequest)
            .enqueue(object : Callback<AuthResponse> {
                override fun onResponse(call: Call<AuthResponse>, response: Response<AuthResponse>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        // ВАЖНО: Сервер возвращает AuthResponse, но мы не сохраняем токен здесь.
                        // Вместо этого перенаправляем пользователя на экран входа.
                        // Либо, если API спроектировано так, что регистрация сразу логинит,
                        // то нужно сохранить токен и пользователя, как в LoginFragment.
                        // Сейчас предполагаем, что после регистрации нужно залогиниться отдельно.
                        val authResponse = response.body()
                        Log.d("RegistrationFragment", "Registration successful: ${authResponse?.user?.username}")
                        Toast.makeText(context, getString(R.string.registration_successful), Toast.LENGTH_LONG).show()

                        // Переход на экран логина
                        findNavController().navigate(R.id.action_registration_to_login)

                    } else {
                        val errorBody = response.errorBody()?.string() ?: "Неизвестная ошибка сервера"
                        Toast.makeText(context, "${getString(R.string.registration_failed)}: ${response.code()} - $errorBody", Toast.LENGTH_LONG).show()
                        Log.e("RegistrationFragment", "Registration failed: ${response.code()} - $errorBody")
                    }
                }

                override fun onFailure(call: Call<AuthResponse>, t: Throwable) {
                    setLoading(false)
                    Toast.makeText(context, "Ошибка сети: ${t.message}", Toast.LENGTH_LONG).show()
                    Log.e("RegistrationFragment", "Network error", t)
                }
            })
    }

    private fun setLoading(isLoading: Boolean) {
        binding.progressBarRegister.isVisible = isLoading
        binding.registerButton.isEnabled = !isLoading
        binding.usernameEditText.isEnabled = !isLoading
        binding.emailEditTextRegister.isEnabled = !isLoading
        binding.displayNameEditText.isEnabled = !isLoading
        binding.passwordEditTextRegister.isEnabled = !isLoading
        binding.confirmPasswordEditText.isEnabled = !isLoading
    }


    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\fragments\user\UserProfileFragment.kt
###############################################################################

package com.example.finalproject.fragments.user

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.bumptech.glide.Glide
import com.example.finalproject.R
import com.example.finalproject.api.RetrofitClient
import com.example.finalproject.databinding.FragmentUserProfileBinding
import com.example.finalproject.models.User
import com.example.finalproject.utils.AuthTokenProvider
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.Locale
import java.util.TimeZone

class UserProfileFragment : Fragment() {

    private var _binding: FragmentUserProfileBinding? = null
    private val binding get() = _binding!!

    private val args: UserProfileFragmentArgs by navArgs()
    private var profileUserIdToLoad: Long? = null
    private var currentlyDisplayedUser: User? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentUserProfileBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        profileUserIdToLoad = if (args.userId == -1L) {
            AuthTokenProvider.getCurrentUser()?.userId
        } else {
            args.userId
        }

        loadUserProfileData()

        binding.editProfileButton.setOnClickListener {
            if (isCurrentUserProfileOwner()) {
                currentlyDisplayedUser?.userId?.let { userId ->
                    val action = UserProfileFragmentDirections.actionUserProfileFragmentToEditProfile(userId)
                    findNavController().navigate(action)
                } ?: Toast.makeText(context, "Ошибка: ID пользователя не найден", Toast.LENGTH_SHORT).show()
            }
        }

        binding.logoutButton.setOnClickListener {
            if (isCurrentUserProfileOwner()) {
                showLogoutConfirmationDialog()
            }
        }
    }

    private fun isCurrentUserProfileOwner(): Boolean {
        val loggedInUserId = AuthTokenProvider.getCurrentUser()?.userId
        return loggedInUserId != null && currentlyDisplayedUser?.userId == loggedInUserId
    }

    private fun loadUserProfileData() {
        setLoading(true)
        binding.profileErrorText.isVisible = false
        binding.profileContentGroup.isVisible = false

        if (profileUserIdToLoad == null && args.userId == -1L) {
            val currentUser = AuthTokenProvider.getCurrentUser()
            if (currentUser != null) {
                profileUserIdToLoad = currentUser.userId
                displayProfileData(currentUser)
                setLoading(false)
            } else {
                showError(getString(R.string.user_not_logged_in))
                setLoading(false)
                updateButtonVisibility()
            }
            return
        }

        if (profileUserIdToLoad == null) {
            showError(getString(R.string.user_not_found) + " (ID не указан)")
            setLoading(false)
            updateButtonVisibility()
            return
        }

        RetrofitClient.instance.getUserProfileById(profileUserIdToLoad!!)
            .enqueue(object : Callback<User> {
                override fun onResponse(call: Call<User>, response: Response<User>) {
                    setLoading(false)
                    if (response.isSuccessful) {
                        response.body()?.let { user ->
                            displayProfileData(user)
                        } ?: showError(getString(R.string.user_not_found))
                    } else {
                        showError("${getString(R.string.error_loading_profile)}: ${response.code()} ${response.message()}")
                    }
                }

                override fun onFailure(call: Call<User>, t: Throwable) {
                    setLoading(false)
                    showError("${getString(R.string.network_error)}: ${t.localizedMessage}")
                    Log.e("UserProfileFragment", "Failed to load profile", t)
                }
            })
    }

    private fun displayProfileData(user: User) {
        currentlyDisplayedUser = user

        binding.usernameTextView.text = user.username
        binding.displayNameTextView.text = user.displayName ?: getString(R.string.default_display_name)
        binding.emailTextView.text = user.email
        binding.bioTextView.text = user.bio ?: getString(R.string.default_bio)

        binding.joinedDateTextView.text = formatDate(user.createdAt)
        binding.lastLoginDateTextView.text = user.lastLogin?.let { formatDate(it) } ?: getString(R.string.placeholder_date)

        Glide.with(this)
            .load(user.avatarUrl)
            .placeholder(R.drawable.ic_profile_24)
            .error(R.drawable.ic_profile_24)
            .circleCrop()
            .into(binding.profileAvatarImageView)

        binding.profileContentGroup.isVisible = true
        updateButtonVisibility()
    }

    private fun updateButtonVisibility() {
        val isOwner = isCurrentUserProfileOwner()
        binding.editProfileButton.isVisible = isOwner
        binding.logoutButton.isVisible = isOwner
    }


    private fun showLogoutConfirmationDialog() {
        AlertDialog.Builder(requireContext())
            .setTitle(getString(R.string.confirm_logout_title))
            .setMessage(getString(R.string.confirm_logout_message))
            .setPositiveButton(getString(R.string.action_yes)) { dialog, _ ->
                performLogout()
                dialog.dismiss()
            }
            .setNegativeButton(getString(R.string.action_no)) { dialog, _ ->
                dialog.dismiss()
            }
            .show()
    }

    private fun performLogout() {
        AuthTokenProvider.clearAuthData()
        Toast.makeText(context, getString(R.string.logged_out_successfully), Toast.LENGTH_SHORT).show()
        try {
            findNavController().navigate(R.id.login, null, androidx.navigation.NavOptions.Builder()
                .setPopUpTo(R.id.nav_graph, true)
                .build())
        } catch (e: Exception) {
            Log.e("UserProfileFragment", "Navigation to login after logout failed", e)
        }
    }

    private fun setLoading(isLoading: Boolean) {
        binding.profileProgressBar.isVisible = isLoading
        if (!isLoading) {
            if (!binding.profileErrorText.isVisible) binding.profileContentGroup.isVisible = true
        } else {
            binding.profileContentGroup.isVisible = false
        }
    }

    private fun showError(message: String) {
        binding.profileErrorText.text = message
        binding.profileErrorText.isVisible = true
        binding.profileContentGroup.isVisible = false
        updateButtonVisibility()
    }

    private fun formatDate(dateString: String?): String {
        if (dateString.isNullOrEmpty()) return getString(R.string.placeholder_date)
        val inputFormats = listOf(
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSS", Locale.getDefault()),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ", Locale.getDefault()),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.getDefault()),
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.getDefault())
        )
        val outputFormat = SimpleDateFormat("dd MMMM yyyy, HH:mm", Locale.getDefault())

        for (format in inputFormats) {
            if (!dateString.contains("Z") && format.toPattern().endsWith("'Z'")) {
            } else {
                format.timeZone = TimeZone.getTimeZone("UTC")
            }
            try {
                val date = format.parse(dateString)
                if (date != null) {
                    outputFormat.timeZone = TimeZone.getDefault()
                    return outputFormat.format(date)
                }
            } catch (e: ParseException) {
            }
        }
        Log.w("UserProfileFragment", "Could not parse date: $dateString, returning as is.")
        return dateString
    }

    override fun onResume() {
        super.onResume()
        val currentLoggedInUserId = AuthTokenProvider.getCurrentUser()?.userId
        val targetUserIdForDisplay = if (args.userId == -1L) currentLoggedInUserId else args.userId

        if (profileUserIdToLoad != targetUserIdForDisplay || currentlyDisplayedUser == null) {
            profileUserIdToLoad = targetUserIdForDisplay
            loadUserProfileData()
        } else {
            if (isCurrentUserProfileOwner()) {
                AuthTokenProvider.getCurrentUser()?.let {
                    if (it != currentlyDisplayedUser) {
                        displayProfileData(it)
                    }
                }
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
        currentlyDisplayedUser = null
    }
}

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\AddItemToCollectionRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class AddItemToCollectionRequest(
    val mediaItemId: Long,
    val notes: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\CreateCollectionRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class CreateCollectionRequest(
    val title: String,
    val description: String?,
    val coverImageUrl: String?,
    val isPublic: Boolean
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\CreateCommentRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class CreateCommentRequest(
    val commentText: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\CreateMediaItemRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class CreateMediaItemRequest(
    val title: String,
    val typeId: Long,
    val creator: String?,
    val description: String?,
    val thumbnailUrl: String?,
    val externalUrl: String?,
    val releaseDate: String?
    // val tags: List<String>?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\ForgotPasswordRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class ForgotPasswordRequest(
    val email: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\LoginRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class LoginRequest(
    val email: String,
    val password: String
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\RegistrationRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class RegistrationRequest(
    val username: String,
    val email: String,
    val password: String,
    val displayName: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\UpdateMediaItemRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class UpdateMediaItemRequest(
    val title: String,
    val creator: String?,
    val description: String?,
    val thumbnailUrl: String?,
    val externalUrl: String?,
    val releaseDate: String?,
    // val typeId: Long,
    // val tags: List<TagRequest>
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\request\UpdateProfileRequest.kt
###############################################################################

package com.example.finalproject.models.request

data class UpdateProfileRequest(
    val displayName: String?,
    val bio: String?,
    val avatarUrl: String?
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\AuthResponse.kt
###############################################################################

package com.example.finalproject.models.responce

import com.example.finalproject.models.User

data class AuthResponse(
    val token: String,
    val user: User
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\PageableDetails.kt
###############################################################################

package com.example.finalproject.models.responce

import com.google.gson.annotations.SerializedName

data class PageableDetails(
    val pageNumber: Int,
    val pageSize: Int,
    @SerializedName("sort")
    val sortDetails: List<SortProperty>,
    val offset: Long,
    val paged: Boolean,
    val unpaged: Boolean
)


###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\PagedResponse.kt
###############################################################################

package com.example.finalproject.models.responce

import com.google.gson.annotations.SerializedName

data class PagedResponse<T>(
    @SerializedName("content")
    val content: List<T>,

    @SerializedName("pageable")
    val pageable: PageableDetails,

    @SerializedName("last")
    val last: Boolean,

    @SerializedName("totalPages")
    val totalPages: Int,

    @SerializedName("totalElements")
    val totalElements: Int,

    @SerializedName("size")
    val size: Int,

    @SerializedName("number")
    val number: Int,

    @SerializedName("sort")
    val sort: List<SortProperty>,

    @SerializedName("first")
    val first: Boolean,

    @SerializedName("numberOfElements")
    val numberOfElements: Int,

    @SerializedName("empty")
    val empty: Boolean
)

###############################################################################
# FILE: app\src\main\java\com\example\finalproject\models\responce\SortProperty.kt
###############################################################################

package com.example.finalproject.models.responce

data class SortProperty(
    val direction: String?,
    val property: String?,
    val ignoreCase: Boolean?,
    val nullHandling: String?,
    val ascending: Boolean?,
    val descending: Boolean?
)


###############################################################################
# SUMMARY
# Total files: 92
# Total size: 570.47 KB
# Processing time: 0.79 seconds
###############################################################################
